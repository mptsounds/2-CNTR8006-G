
test_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005000  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c2c  08005c2c  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c2c  08005c2c  00006c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c34  08005c34  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c34  08005c34  00006c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c38  08005c38  00006c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005c3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  08005ca4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005ca4  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001212c  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  000191c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf0  00000000  00000000  0001cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dde  00000000  00000000  0001dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014569  00000000  00000000  00037a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eed8  00000000  00000000  0004bf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eae4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b94  00000000  00000000  000eae94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000efa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005180 	.word	0x08005180

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08005180 	.word	0x08005180

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b21      	ldr	r3, [pc, #132]	@ (800059c <MX_ADC1_Init+0x98>)
 8000518:	4a21      	ldr	r2, [pc, #132]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <MX_ADC1_Init+0x98>)
 800051e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <MX_ADC1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052a:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000530:	4b1a      	ldr	r3, [pc, #104]	@ (800059c <MX_ADC1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053e:	4b17      	ldr	r3, [pc, #92]	@ (800059c <MX_ADC1_Init+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <MX_ADC1_Init+0x98>)
 8000546:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <MX_ADC1_Init+0xa0>)
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_ADC1_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_ADC1_Init+0x98>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_ADC1_Init+0x98>)
 8000560:	2201      	movs	r2, #1
 8000562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <MX_ADC1_Init+0x98>)
 8000566:	f001 f933 	bl	80017d0 <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000570:	f000 faac 	bl	8000acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000574:	230a      	movs	r3, #10
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <MX_ADC1_Init+0x98>)
 8000586:	f001 f967 	bl	8001858 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000590:	f000 fa9c 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000084 	.word	0x20000084
 80005a0:	40012000 	.word	0x40012000
 80005a4:	0f000001 	.word	0x0f000001

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_ADC_MspInit+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d127      	bne.n	800061a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000602:	2307      	movs	r3, #7
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <HAL_ADC_MspInit+0x84>)
 8000616:	f001 fc5f 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	@ 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40012000 	.word	0x40012000
 8000628:	40023800 	.word	0x40023800
 800062c:	40020800 	.word	0x40020800

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <MX_GPIO_Init+0x140>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a48      	ldr	r2, [pc, #288]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b46      	ldr	r3, [pc, #280]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b42      	ldr	r3, [pc, #264]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a41      	ldr	r2, [pc, #260]	@ (8000770 <MX_GPIO_Init+0x140>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b3f      	ldr	r3, [pc, #252]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a3a      	ldr	r2, [pc, #232]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b38      	ldr	r3, [pc, #224]	@ (8000770 <MX_GPIO_Init+0x140>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <MX_GPIO_Init+0x140>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a33      	ldr	r2, [pc, #204]	@ (8000770 <MX_GPIO_Init+0x140>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <MX_GPIO_Init+0x140>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER_STEP_Pin|LD2_Pin|MOTOR1_ENCODERA_Pin|MOTOR1_ENCODERB_Pin
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80006bc:	482d      	ldr	r0, [pc, #180]	@ (8000774 <MX_GPIO_Init+0x144>)
 80006be:	f001 fd8f 	bl	80021e0 <HAL_GPIO_WritePin>
                          |MOTOR1_PWM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin|OLED_CS_Pin|MOTOR1_DIR1_Pin
 80006c2:	2200      	movs	r2, #0
 80006c4:	f24f 01c7 	movw	r1, #61639	@ 0xf0c7
 80006c8:	482b      	ldr	r0, [pc, #172]	@ (8000778 <MX_GPIO_Init+0x148>)
 80006ca:	f001 fd89 	bl	80021e0 <HAL_GPIO_WritePin>
                          |MOTOR1_DIR2_Pin|MOTOR2_DIR1_Pin|MOTOR2_DIR2_Pin|MOTOR2_ENCODERA_Pin
                          |MOTOR2_ENCODER_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEPPER_DIR_Pin|STEPPER_RESET_Pin|STEPPER_ENABLE_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80006d4:	4829      	ldr	r0, [pc, #164]	@ (800077c <MX_GPIO_Init+0x14c>)
 80006d6:	f001 fd83 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4822      	ldr	r0, [pc, #136]	@ (800077c <MX_GPIO_Init+0x14c>)
 80006f2:	f001 fbf1 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_STEP_Pin LD2_Pin MOTOR1_ENCODERA_Pin MOTOR1_ENCODERB_Pin
                           MOTOR1_PWM_Pin */
  GPIO_InitStruct.Pin = STEPPER_STEP_Pin|LD2_Pin|MOTOR1_ENCODERA_Pin|MOTOR1_ENCODERB_Pin
 80006f6:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 80006fa:	617b      	str	r3, [r7, #20]
                          |MOTOR1_PWM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4819      	ldr	r0, [pc, #100]	@ (8000774 <MX_GPIO_Init+0x144>)
 8000710:	f001 fbe2 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOG_OUT_Pin */
  GPIO_InitStruct.Pin = ANALOG_OUT_Pin;
 8000714:	2310      	movs	r3, #16
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ANALOG_OUT_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4813      	ldr	r0, [pc, #76]	@ (8000774 <MX_GPIO_Init+0x144>)
 8000728:	f001 fbd6 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin OLED_CS_Pin MOTOR1_DIR1_Pin
                           MOTOR1_DIR2_Pin MOTOR2_DIR1_Pin MOTOR2_DIR2_Pin MOTOR2_ENCODERA_Pin
                           MOTOR2_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin|OLED_CS_Pin|MOTOR1_DIR1_Pin
 800072c:	f24f 03c7 	movw	r3, #61639	@ 0xf0c7
 8000730:	617b      	str	r3, [r7, #20]
                          |MOTOR1_DIR2_Pin|MOTOR2_DIR1_Pin|MOTOR2_DIR2_Pin|MOTOR2_ENCODERA_Pin
                          |MOTOR2_ENCODER_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_GPIO_Init+0x148>)
 8000746:	f001 fbc7 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_DIR_Pin STEPPER_RESET_Pin STEPPER_ENABLE_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_Pin|STEPPER_RESET_Pin|STEPPER_ENABLE_Pin;
 800074a:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <MX_GPIO_Init+0x14c>)
 8000764:	f001 fbb8 	bl	8001ed8 <HAL_GPIO_Init>

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	@ 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800

08000780 <showOledSplashScreen>:
 * FUNCTION : showOledSplashScreen
 * DESCRIPTION : Display a fixed string on the OLED
 * PARAMETERS : void
 * RETURNS : void
*/
void showOledSplashScreen (void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af02      	add	r7, sp, #8
	const char *testString = {"Monica's OLED!\n"}; // the string
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <showOledSplashScreen+0x24>)
 8000788:	607b      	str	r3, [r7, #4]

	ssd1331_display_string(0, 0, testString, FONT_1206, WHITE); // don't need to think about string buffer here
 800078a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	230c      	movs	r3, #12
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fb02 	bl	8000da0 <ssd1331_display_string>
} // end of func
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08005198 	.word	0x08005198

080007a8 <microDelay>:
 * FUNCTION : microDelay
 * DESCRIPTION : Delays execution for a specified number of MICROseconds using TIM4's counter.
 * PARAMETERS : uint32_t us - number of microseconds to delay
 * RETURNS : void
*/
void microDelay (uint32_t us) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	// Reset CouNTer:
	TIM4->CNT = 0; // After reset, it counts based on TIM config in main()
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <microDelay+0x2c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24

	// Wait in a loop until the counter reaches the desired time:
	while (TIM4->CNT < us) {
 80007b6:	e000      	b.n	80007ba <microDelay+0x12>
		asm volatile ("nop\n"); // prevents the compiler from optimizing the loop away
 80007b8:	bf00      	nop
	while (TIM4->CNT < us) {
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <microDelay+0x2c>)
 80007bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8f9      	bhi.n	80007b8 <microDelay+0x10>
	}
} // end of func
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40000800 	.word	0x40000800

080007d8 <moveStepper>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // VRef is HIGH
	microDelay(1000); // 1 ms delay to make sure everything's registered properly
} // end of func

void moveStepper(uint16_t steps, uint8_t direction)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	717b      	strb	r3, [r7, #5]
    // Set direction (1 = clockwise, 0 = counterclockwise)
    if (direction) {
 80007e8:	797b      	ldrb	r3, [r7, #5]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <moveStepper+0x22>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // dir pin - clockwise
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	@ 0x40
 80007f2:	4814      	ldr	r0, [pc, #80]	@ (8000844 <moveStepper+0x6c>)
 80007f4:	f001 fcf4 	bl	80021e0 <HAL_GPIO_WritePin>
 80007f8:	e004      	b.n	8000804 <moveStepper+0x2c>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);    // dir pin Counterclockwise
 80007fa:	2201      	movs	r2, #1
 80007fc:	2140      	movs	r1, #64	@ 0x40
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <moveStepper+0x6c>)
 8000800:	f001 fcee 	bl	80021e0 <HAL_GPIO_WritePin>
    }

    for (uint16_t i = 0; i < steps; i++) {
 8000804:	2300      	movs	r3, #0
 8000806:	81fb      	strh	r3, [r7, #14]
 8000808:	e012      	b.n	8000830 <moveStepper+0x58>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // stepper step
 800080a:	2201      	movs	r2, #1
 800080c:	2102      	movs	r1, #2
 800080e:	480e      	ldr	r0, [pc, #56]	@ (8000848 <moveStepper+0x70>)
 8000810:	f001 fce6 	bl	80021e0 <HAL_GPIO_WritePin>
        microDelay(50);
 8000814:	2032      	movs	r0, #50	@ 0x32
 8000816:	f7ff ffc7 	bl	80007a8 <microDelay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // steper step
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	480a      	ldr	r0, [pc, #40]	@ (8000848 <moveStepper+0x70>)
 8000820:	f001 fcde 	bl	80021e0 <HAL_GPIO_WritePin>
        microDelay(50);
 8000824:	2032      	movs	r0, #50	@ 0x32
 8000826:	f7ff ffbf 	bl	80007a8 <microDelay>
    for (uint16_t i = 0; i < steps; i++) {
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	3301      	adds	r3, #1
 800082e:	81fb      	strh	r3, [r7, #14]
 8000830:	89fa      	ldrh	r2, [r7, #14]
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3e8      	bcc.n	800080a <moveStepper+0x32>
    }
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40020800 	.word	0x40020800
 8000848:	40020000 	.word	0x40020000

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 ff28 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f862 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f7ff feea 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800085c:	f000 fe52 	bl	8001504 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000860:	f000 fe26 	bl	80014b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000864:	f7ff fe4e 	bl	8000504 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000868:	f000 fccc 	bl	8001204 <MX_TIM1_Init>
  MX_SPI2_Init();
 800086c:	f000 f934 	bl	8000ad8 <MX_SPI2_Init>
  MX_TIM4_Init();
 8000870:	f000 fd4c 	bl	800130c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Init OLED:
  ssd1331_init();
 8000874:	f000 fb02 	bl	8000e7c <ssd1331_init>
  showOledSplashScreen();
 8000878:	f7ff ff82 	bl	8000780 <showOledSplashScreen>

  HAL_TIM_Base_Start(&htim4);       // Start TIM4 for delay timing
 800087c:	4823      	ldr	r0, [pc, #140]	@ (800090c <main+0xc0>)
 800087e:	f002 fc5b 	bl	8003138 <HAL_TIM_Base_Start>

      /* Motor Driver Initialization */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);       // Ensure STEP pin low
 8000882:	2200      	movs	r2, #0
 8000884:	2102      	movs	r1, #2
 8000886:	4822      	ldr	r0, [pc, #136]	@ (8000910 <main+0xc4>)
 8000888:	f001 fcaa 	bl	80021e0 <HAL_GPIO_WritePin>
      //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_, GPIO_PIN_SET);           // PS = HIGH (Enable power)
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);           // RST = HIGH (Enable driver)
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000892:	4820      	ldr	r0, [pc, #128]	@ (8000914 <main+0xc8>)
 8000894:	f001 fca4 	bl	80021e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);         // OE = LOW (Output Enable)
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089e:	481d      	ldr	r0, [pc, #116]	@ (8000914 <main+0xc8>)
 80008a0:	f001 fc9e 	bl	80021e0 <HAL_GPIO_WritePin>
      //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);           // VREF = HIGH

      /* Stepper Motor Control */
      moveStepper(1000, 1);  // Move 1000 steps clockwise
 80008a4:	2101      	movs	r1, #1
 80008a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008aa:	f7ff ff95 	bl	80007d8 <moveStepper>
      moveStepper(500, 0);   // Move 500 steps counterclockwise
 80008ae:	2100      	movs	r1, #0
 80008b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008b4:	f7ff ff90 	bl	80007d8 <moveStepper>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello\r\n");
 80008b8:	4817      	ldr	r0, [pc, #92]	@ (8000918 <main+0xcc>)
 80008ba:	f004 f8cd 	bl	8004a58 <puts>
	  HAL_Delay(500);
 80008be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c2:	f000 ff61 	bl	8001788 <HAL_Delay>
	  /* Rotate motor clockwise for 5 seconds */
	     motorControl(1, 50);  // 1: Clockwise, 50% speed
 80008c6:	2132      	movs	r1, #50	@ 0x32
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 f8bf 	bl	8000a4c <motorControl>
	     HAL_Delay(5000);       // Rotate for 5 seconds
 80008ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008d2:	f000 ff59 	bl	8001788 <HAL_Delay>

	     /* Stop motor */
	     motorControl(0, 0);   // 0: Stop motor
 80008d6:	2100      	movs	r1, #0
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 f8b7 	bl	8000a4c <motorControl>
	     HAL_Delay(1000);       // Stop for 1 second
 80008de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e2:	f000 ff51 	bl	8001788 <HAL_Delay>

	     /* Rotate motor counter-clockwise for 3 seconds */
	     motorControl(2, 50);  // 2: Counter-clockwise, 50% speed
 80008e6:	2132      	movs	r1, #50	@ 0x32
 80008e8:	2002      	movs	r0, #2
 80008ea:	f000 f8af 	bl	8000a4c <motorControl>
	     HAL_Delay(3000);       // Rotate for 3 seconds
 80008ee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80008f2:	f000 ff49 	bl	8001788 <HAL_Delay>

	     /* Stop motor */
	     motorControl(0, 0);   // 0: Stop motor
 80008f6:	2100      	movs	r1, #0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f8a7 	bl	8000a4c <motorControl>
	     HAL_Delay(1000);       // Stop for 1 second
 80008fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000902:	f000 ff41 	bl	8001788 <HAL_Delay>
	  printf("Hello\r\n");
 8000906:	bf00      	nop
 8000908:	e7d6      	b.n	80008b8 <main+0x6c>
 800090a:	bf00      	nop
 800090c:	20000170 	.word	0x20000170
 8000910:	40020000 	.word	0x40020000
 8000914:	40020800 	.word	0x40020800
 8000918:	080051a8 	.word	0x080051a8

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	@ 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	@ 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f974 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <SystemClock_Config+0xc8>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	4a26      	ldr	r2, [pc, #152]	@ (80009e4 <SystemClock_Config+0xc8>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <SystemClock_Config+0xc8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <SystemClock_Config+0xcc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a20      	ldr	r2, [pc, #128]	@ (80009e8 <SystemClock_Config+0xcc>)
 8000966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <SystemClock_Config+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800098c:	2308      	movs	r3, #8
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000990:	2364      	movs	r3, #100	@ 0x64
 8000992:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fc37 	bl	8002214 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ac:	f000 f88e 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2103      	movs	r1, #3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fe99 	bl	8002704 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009d8:	f000 f878 	bl	8000acc <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	@ 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009fa:	2201      	movs	r2, #1
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <__io_putchar+0x20>)
 80009fe:	f003 fac1 	bl	8003f84 <HAL_UART_Transmit>
  return ch;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000200 	.word	0x20000200

08000a10 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
  // Clear the Overrun flag just before receiving the first character
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <__io_getchar+0x38>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <__io_getchar+0x38>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 5);
 8000a30:	1df9      	adds	r1, r7, #7
 8000a32:	2305      	movs	r3, #5
 8000a34:	2201      	movs	r2, #1
 8000a36:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <__io_getchar+0x38>)
 8000a38:	f003 fb2f 	bl	800409a <HAL_UART_Receive>
  return ch;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000200 	.word	0x20000200

08000a4c <motorControl>:

void motorControl(uint8_t direction, uint8_t speed)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	460a      	mov	r2, r1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	71bb      	strb	r3, [r7, #6]
  // Set motor direction
  if (direction == 1)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10c      	bne.n	8000a7c <motorControl+0x30>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // IN1 -> High
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a68:	4816      	ldr	r0, [pc, #88]	@ (8000ac4 <motorControl+0x78>)
 8000a6a:	f001 fbb9 	bl	80021e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // IN2 -> Low
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a74:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <motorControl+0x78>)
 8000a76:	f001 fbb3 	bl	80021e0 <HAL_GPIO_WritePin>
 8000a7a:	e01b      	b.n	8000ab4 <motorControl+0x68>
  }
  else if (direction == 2)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d10c      	bne.n	8000a9c <motorControl+0x50>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // IN1 -> Low
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a88:	480e      	ldr	r0, [pc, #56]	@ (8000ac4 <motorControl+0x78>)
 8000a8a:	f001 fba9 	bl	80021e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);   // IN2 -> High
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a94:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <motorControl+0x78>)
 8000a96:	f001 fba3 	bl	80021e0 <HAL_GPIO_WritePin>
 8000a9a:	e00b      	b.n	8000ab4 <motorControl+0x68>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // IN1 -> Low
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa2:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <motorControl+0x78>)
 8000aa4:	f001 fb9c 	bl	80021e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // IN2 -> Low
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <motorControl+0x78>)
 8000ab0:	f001 fb96 	bl	80021e0 <HAL_GPIO_WritePin>
  }

  // Set PWM duty cycle for motor speed
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed); // Set duty cycle (0 to 100)
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <motorControl+0x7c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	79ba      	ldrb	r2, [r7, #6]
 8000aba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	20000128 	.word	0x20000128

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000ade:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <MX_SPI2_Init+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_SPI2_Init+0x64>)
 8000b2a:	f002 f80b 	bl	8002b44 <HAL_SPI_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b34:	f7ff ffca 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000cc 	.word	0x200000cc
 8000b40:	40003800 	.word	0x40003800

08000b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_SPI_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000b9e:	2388      	movs	r3, #136	@ 0x88
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_SPI_MspInit+0x8c>)
 8000bba:	f001 f98d 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40003800 	.word	0x40003800
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000bea:	2201      	movs	r2, #1
 8000bec:	2102      	movs	r1, #2
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <ssd1331_write_byte+0x60>)
 8000bf0:	f001 faf6 	bl	80021e0 <HAL_GPIO_WritePin>
 8000bf4:	e004      	b.n	8000c00 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <ssd1331_write_byte+0x60>)
 8000bfc:	f001 faf0 	bl	80021e0 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8000c00:	2200      	movs	r2, #0
 8000c02:	2104      	movs	r1, #4
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <ssd1331_write_byte+0x60>)
 8000c06:	f001 faeb 	bl	80021e0 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000c0a:	1df9      	adds	r1, r7, #7
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <ssd1331_write_byte+0x64>)
 8000c12:	f002 f820 	bl	8002c56 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8000c16:	2201      	movs	r2, #1
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <ssd1331_write_byte+0x60>)
 8000c1c:	f001 fae0 	bl	80021e0 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000c20:	2201      	movs	r2, #1
 8000c22:	2102      	movs	r1, #2
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <ssd1331_write_byte+0x60>)
 8000c26:	f001 fadb 	bl	80021e0 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020400 	.word	0x40020400
 8000c38:	200000cc 	.word	0x200000cc

08000c3c <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c52:	d82b      	bhi.n	8000cac <ssd1331_draw_point+0x70>
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c58:	d828      	bhi.n	8000cac <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2015      	movs	r0, #21
 8000c5e:	f7ff ffb9 	bl	8000bd4 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffb4 	bl	8000bd4 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	205f      	movs	r0, #95	@ 0x5f
 8000c70:	f7ff ffb0 	bl	8000bd4 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2075      	movs	r0, #117	@ 0x75
 8000c78:	f7ff ffac 	bl	8000bd4 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffa7 	bl	8000bd4 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8000c86:	2100      	movs	r1, #0
 8000c88:	203f      	movs	r0, #63	@ 0x3f
 8000c8a:	f7ff ffa3 	bl	8000bd4 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff9b 	bl	8000bd4 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000c9e:	88bb      	ldrh	r3, [r7, #4]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff95 	bl	8000bd4 <ssd1331_write_byte>
 8000caa:	e000      	b.n	8000cae <ssd1331_draw_point+0x72>
		return;
 8000cac:	bf00      	nop
}
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4604      	mov	r4, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b5f      	cmp	r3, #95	@ 0x5f
 8000cde:	d857      	bhi.n	8000d90 <ssd1331_display_char+0xdc>
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ce4:	d854      	bhi.n	8000d90 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e04c      	b.n	8000d86 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8000cec:	793b      	ldrb	r3, [r7, #4]
 8000cee:	2b0c      	cmp	r3, #12
 8000cf0:	d10d      	bne.n	8000d0e <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000cf2:	797b      	ldrb	r3, [r7, #5]
 8000cf4:	f1a3 0220 	sub.w	r2, r3, #32
 8000cf8:	7bf9      	ldrb	r1, [r7, #15]
 8000cfa:	4827      	ldr	r0, [pc, #156]	@ (8000d98 <ssd1331_display_char+0xe4>)
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4403      	add	r3, r0
 8000d06:	440b      	add	r3, r1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	737b      	strb	r3, [r7, #13]
 8000d0c:	e00c      	b.n	8000d28 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8000d0e:	793b      	ldrb	r3, [r7, #4]
 8000d10:	2b10      	cmp	r3, #16
 8000d12:	d109      	bne.n	8000d28 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	f1a3 0220 	sub.w	r2, r3, #32
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	491f      	ldr	r1, [pc, #124]	@ (8000d9c <ssd1331_display_char+0xe8>)
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	440a      	add	r2, r1
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73bb      	strb	r3, [r7, #14]
 8000d2c:	e025      	b.n	8000d7a <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8000d2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da06      	bge.n	8000d44 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8000d36:	8c3a      	ldrh	r2, [r7, #32]
 8000d38:	79b9      	ldrb	r1, [r7, #6]
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff7d 	bl	8000c3c <ssd1331_draw_point>
 8000d42:	e005      	b.n	8000d50 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8000d44:	79b9      	ldrb	r1, [r7, #6]
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff76 	bl	8000c3c <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8000d50:	7b7b      	ldrb	r3, [r7, #13]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	1ad2      	subs	r2, r2, r3
 8000d62:	793b      	ldrb	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d105      	bne.n	8000d74 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8000d68:	7b3b      	ldrb	r3, [r7, #12]
 8000d6a:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
				break;
 8000d72:	e005      	b.n	8000d80 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	3301      	adds	r3, #1
 8000d78:	73bb      	strb	r3, [r7, #14]
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	2b07      	cmp	r3, #7
 8000d7e:	d9d6      	bls.n	8000d2e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	3301      	adds	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	793b      	ldrb	r3, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3ae      	bcc.n	8000cec <ssd1331_display_char+0x38>
 8000d8e:	e000      	b.n	8000d92 <ssd1331_display_char+0xde>
		return;
 8000d90:	bf00      	nop
			}
		}
    }
}
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	080051b0 	.word	0x080051b0
 8000d9c:	08005624 	.word	0x08005624

08000da0 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	603a      	str	r2, [r7, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	460b      	mov	r3, r1
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	4613      	mov	r3, r2
 8000db4:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b5f      	cmp	r3, #95	@ 0x5f
 8000dba:	d836      	bhi.n	8000e2a <ssd1331_display_string+0x8a>
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dc0:	d833      	bhi.n	8000e2a <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8000dc2:	e02d      	b.n	8000e20 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8000dc4:	79fa      	ldrb	r2, [r7, #7]
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	085b      	lsrs	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f1c3 0360 	rsb	r3, r3, #96	@ 0x60
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dd12      	ble.n	8000dfa <ssd1331_display_string+0x5a>
			chXpos = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8000dd8:	79ba      	ldrb	r2, [r7, #6]
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	4413      	add	r3, r2
 8000dde:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8000de0:	79ba      	ldrb	r2, [r7, #6]
 8000de2:	797b      	ldrb	r3, [r7, #5]
 8000de4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dd06      	ble.n	8000dfa <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f81c 	bl	8000e32 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	797c      	ldrb	r4, [r7, #5]
 8000e00:	79b9      	ldrb	r1, [r7, #6]
 8000e02:	79f8      	ldrb	r0, [r7, #7]
 8000e04:	8b3b      	ldrh	r3, [r7, #24]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	f7ff ff53 	bl	8000cb4 <ssd1331_display_char>
        chXpos += chSize / 2;
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4413      	add	r3, r2
 8000e18:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1cd      	bne.n	8000dc4 <ssd1331_display_string+0x24>
 8000e28:	e000      	b.n	8000e2c <ssd1331_display_string+0x8c>
		return;
 8000e2a:	bf00      	nop
    }
}
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}

08000e32 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	81fb      	strh	r3, [r7, #14]
 8000e40:	e013      	b.n	8000e6a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	81bb      	strh	r3, [r7, #12]
 8000e46:	e00a      	b.n	8000e5e <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000e48:	89bb      	ldrh	r3, [r7, #12]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	89fa      	ldrh	r2, [r7, #14]
 8000e4e:	b2d1      	uxtb	r1, r2
 8000e50:	88fa      	ldrh	r2, [r7, #6]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fef2 	bl	8000c3c <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000e58:	89bb      	ldrh	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	81bb      	strh	r3, [r7, #12]
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e62:	d9f1      	bls.n	8000e48 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	3301      	adds	r3, #1
 8000e68:	81fb      	strh	r3, [r7, #14]
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
 8000e6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e6e:	d9e8      	bls.n	8000e42 <ssd1331_clear_screen+0x10>
		}
	}
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <ssd1331_init>:


void ssd1331_init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8000e80:	2201      	movs	r2, #1
 8000e82:	2101      	movs	r1, #1
 8000e84:	4852      	ldr	r0, [pc, #328]	@ (8000fd0 <ssd1331_init+0x154>)
 8000e86:	f001 f9ab 	bl	80021e0 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4850      	ldr	r0, [pc, #320]	@ (8000fd0 <ssd1331_init+0x154>)
 8000e90:	f001 f9a6 	bl	80021e0 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8000e94:	2100      	movs	r1, #0
 8000e96:	20ae      	movs	r0, #174	@ 0xae
 8000e98:	f7ff fe9c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2081      	movs	r0, #129	@ 0x81
 8000ea0:	f7ff fe98 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	20ff      	movs	r0, #255	@ 0xff
 8000ea8:	f7ff fe94 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8000eac:	2100      	movs	r1, #0
 8000eae:	2082      	movs	r0, #130	@ 0x82
 8000eb0:	f7ff fe90 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	20ff      	movs	r0, #255	@ 0xff
 8000eb8:	f7ff fe8c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2083      	movs	r0, #131	@ 0x83
 8000ec0:	f7ff fe88 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	f7ff fe84 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2087      	movs	r0, #135	@ 0x87
 8000ed0:	f7ff fe80 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2006      	movs	r0, #6
 8000ed8:	f7ff fe7c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8000edc:	2100      	movs	r1, #0
 8000ede:	208a      	movs	r0, #138	@ 0x8a
 8000ee0:	f7ff fe78 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2064      	movs	r0, #100	@ 0x64
 8000ee8:	f7ff fe74 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8000eec:	2100      	movs	r1, #0
 8000eee:	208b      	movs	r0, #139	@ 0x8b
 8000ef0:	f7ff fe70 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2078      	movs	r0, #120	@ 0x78
 8000ef8:	f7ff fe6c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8000efc:	2100      	movs	r1, #0
 8000efe:	208c      	movs	r0, #140	@ 0x8c
 8000f00:	f7ff fe68 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000f04:	2100      	movs	r1, #0
 8000f06:	2064      	movs	r0, #100	@ 0x64
 8000f08:	f7ff fe64 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	20a0      	movs	r0, #160	@ 0xa0
 8000f10:	f7ff fe60 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8000f14:	2100      	movs	r1, #0
 8000f16:	2072      	movs	r0, #114	@ 0x72
 8000f18:	f7ff fe5c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	20a1      	movs	r0, #161	@ 0xa1
 8000f20:	f7ff fe58 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fe54 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	20a2      	movs	r0, #162	@ 0xa2
 8000f30:	f7ff fe50 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fe4c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	20a4      	movs	r0, #164	@ 0xa4
 8000f40:	f7ff fe48 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8000f44:	2100      	movs	r1, #0
 8000f46:	20a8      	movs	r0, #168	@ 0xa8
 8000f48:	f7ff fe44 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	203f      	movs	r0, #63	@ 0x3f
 8000f50:	f7ff fe40 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8000f54:	2100      	movs	r1, #0
 8000f56:	20ad      	movs	r0, #173	@ 0xad
 8000f58:	f7ff fe3c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	208e      	movs	r0, #142	@ 0x8e
 8000f60:	f7ff fe38 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8000f64:	2100      	movs	r1, #0
 8000f66:	20b0      	movs	r0, #176	@ 0xb0
 8000f68:	f7ff fe34 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fe30 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8000f74:	2100      	movs	r1, #0
 8000f76:	20b1      	movs	r0, #177	@ 0xb1
 8000f78:	f7ff fe2c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2031      	movs	r0, #49	@ 0x31
 8000f80:	f7ff fe28 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8000f84:	2100      	movs	r1, #0
 8000f86:	20b3      	movs	r0, #179	@ 0xb3
 8000f88:	f7ff fe24 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	20f0      	movs	r0, #240	@ 0xf0
 8000f90:	f7ff fe20 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8000f94:	2100      	movs	r1, #0
 8000f96:	20bb      	movs	r0, #187	@ 0xbb
 8000f98:	f7ff fe1c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	203a      	movs	r0, #58	@ 0x3a
 8000fa0:	f7ff fe18 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	20be      	movs	r0, #190	@ 0xbe
 8000fa8:	f7ff fe14 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8000fac:	2100      	movs	r1, #0
 8000fae:	203e      	movs	r0, #62	@ 0x3e
 8000fb0:	f7ff fe10 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	202e      	movs	r0, #46	@ 0x2e
 8000fb8:	f7ff fe0c 	bl	8000bd4 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	20af      	movs	r0, #175	@ 0xaf
 8000fc0:	f7ff fe08 	bl	8000bd4 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ff34 	bl	8000e32 <ssd1331_clear_screen>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <HAL_MspInit+0x4c>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_MspInit+0x4c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001004:	6413      	str	r3, [r2, #64]	@ 0x40
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001012:	2007      	movs	r0, #7
 8001014:	f000 ff1e 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 fb65 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <TIM4_IRQHandler+0x10>)
 800108a:	f002 f8fe 	bl	800328a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000170 	.word	0x20000170

08001098 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00a      	b.n	80010c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010aa:	f7ff fcb1 	bl	8000a10 <__io_getchar>
 80010ae:	4601      	mov	r1, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf0      	blt.n	80010aa <_read+0x12>
  }

  return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fc7d 	bl	80009ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x12>
  }
  return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:

int _close(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001132:	605a      	str	r2, [r3, #4]
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_isatty>:

int _isatty(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f003 fd86 	bl	8004cb4 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20020000 	.word	0x20020000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20000124 	.word	0x20000124
 80011dc:	20000398 	.word	0x20000398

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b092      	sub	sp, #72	@ 0x48
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2220      	movs	r2, #32
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fcf2 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001234:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001236:	4a34      	ldr	r2, [pc, #208]	@ (8001308 <MX_TIM1_Init+0x104>)
 8001238:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800123a:	4b32      	ldr	r3, [pc, #200]	@ (8001304 <MX_TIM1_Init+0x100>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001246:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b2d      	ldr	r3, [pc, #180]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001254:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <MX_TIM1_Init+0x100>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001260:	4828      	ldr	r0, [pc, #160]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001262:	f001 ffc3 	bl	80031ec <HAL_TIM_PWM_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800126c:	f7ff fc2e 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001278:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800127c:	4619      	mov	r1, r3
 800127e:	4821      	ldr	r0, [pc, #132]	@ (8001304 <MX_TIM1_Init+0x100>)
 8001280:	f002 fd5c 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800128a:	f7ff fc1f 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128e:	2360      	movs	r3, #96	@ 0x60
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	2204      	movs	r2, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4814      	ldr	r0, [pc, #80]	@ (8001304 <MX_TIM1_Init+0x100>)
 80012b4:	f002 f8da 	bl	800346c <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80012be:	f7ff fc05 	bl	8000acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <MX_TIM1_Init+0x100>)
 80012e6:	f002 fd97 	bl	8003e18 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80012f0:	f7ff fbec 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f4:	4803      	ldr	r0, [pc, #12]	@ (8001304 <MX_TIM1_Init+0x100>)
 80012f6:	f000 f8a1 	bl	800143c <HAL_TIM_MspPostInit>

}
 80012fa:	bf00      	nop
 80012fc:	3748      	adds	r7, #72	@ 0x48
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000128 	.word	0x20000128
 8001308:	40010000 	.word	0x40010000

0800130c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_TIM4_Init+0x94>)
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <MX_TIM4_Init+0x98>)
 800132c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_TIM4_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_TIM4_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <MX_TIM4_Init+0x94>)
 800133c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_TIM4_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_TIM4_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_TIM4_Init+0x94>)
 8001350:	f001 fea2 	bl	8003098 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800135a:	f7ff fbb7 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_TIM4_Init+0x94>)
 800136c:	f002 f940 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001376:	f7ff fba9 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_TIM4_Init+0x94>)
 8001388:	f002 fcd8 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001392:	f7ff fb9b 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000170 	.word	0x20000170
 80013a4:	40000800 	.word	0x40000800

080013a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10d      	bne.n	80013d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_TIM_PWM_MspInit+0x40>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <HAL_TIM_PWM_MspInit+0x40>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_TIM_PWM_MspInit+0x40>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <HAL_TIM_Base_MspInit+0x48>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d115      	bne.n	800142a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_TIM_Base_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <HAL_TIM_Base_MspInit+0x4c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6413      	str	r3, [r2, #64]	@ 0x40
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_TIM_Base_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	201e      	movs	r0, #30
 8001420:	f000 fd23 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001424:	201e      	movs	r0, #30
 8001426:	f000 fd3c 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40000800 	.word	0x40000800
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <HAL_TIM_MspPostInit+0x68>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d11e      	bne.n	800149c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_TIM_MspPostInit+0x6c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_TIM_MspPostInit+0x6c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_TIM_MspPostInit+0x6c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800147e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_TIM_MspPostInit+0x70>)
 8001498:	f000 fd1e 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <MX_USART1_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e8:	f002 fcfc 	bl	8003ee4 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f7ff faeb 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001b8 	.word	0x200001b8
 8001500:	40011000 	.word	0x40011000

08001504 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_USART2_UART_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_USART2_UART_Init+0x4c>)
 800153c:	f002 fcd2 	bl	8003ee4 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001546:	f7ff fac1 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000200 	.word	0x20000200
 8001554:	40004400 	.word	0x40004400

08001558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <HAL_UART_MspInit+0xe8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12d      	bne.n	80015d6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <HAL_UART_MspInit+0xec>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a30      	ldr	r2, [pc, #192]	@ (8001644 <HAL_UART_MspInit+0xec>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <HAL_UART_MspInit+0xec>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <HAL_UART_MspInit+0xec>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a29      	ldr	r2, [pc, #164]	@ (8001644 <HAL_UART_MspInit+0xec>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <HAL_UART_MspInit+0xec>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80015b2:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c4:	2307      	movs	r3, #7
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	481e      	ldr	r0, [pc, #120]	@ (8001648 <HAL_UART_MspInit+0xf0>)
 80015d0:	f000 fc82 	bl	8001ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015d4:	e030      	b.n	8001638 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <HAL_UART_MspInit+0xf4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12b      	bne.n	8001638 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <HAL_UART_MspInit+0xec>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	4a16      	ldr	r2, [pc, #88]	@ (8001644 <HAL_UART_MspInit+0xec>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <HAL_UART_MspInit+0xec>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_UART_MspInit+0xec>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_UART_MspInit+0xec>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6313      	str	r3, [r2, #48]	@ 0x30
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_UART_MspInit+0xec>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001618:	230c      	movs	r3, #12
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_UART_MspInit+0xf0>)
 8001634:	f000 fc50 	bl	8001ed8 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	@ 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40011000 	.word	0x40011000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40004400 	.word	0x40004400

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001654:	f7ff fdc4 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f003 fb1f 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff f8e3 	bl	800084c <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001694:	08005c3c 	.word	0x08005c3c
  ldr r2, =_sbss
 8001698:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800169c:	20000398 	.word	0x20000398

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 fbc1 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fc7c 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fbd9 	bl	8001ebe <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 fba1 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	@ (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	20000248 	.word	0x20000248

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000248 	.word	0x20000248

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e033      	b.n	800184e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe feda 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001816:	f023 0302 	bic.w	r3, r3, #2
 800181a:	f043 0202 	orr.w	r2, r3, #2
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f94a 	bl	8001abc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	@ 0x40
 800183e:	e001      	b.n	8001844 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1c>
 8001870:	2302      	movs	r3, #2
 8001872:	e113      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x244>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d925      	bls.n	80018d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68d9      	ldr	r1, [r3, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	3b1e      	subs	r3, #30
 800189a:	2207      	movs	r2, #7
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43da      	mvns	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	400a      	ands	r2, r1
 80018a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68d9      	ldr	r1, [r3, #12]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	4603      	mov	r3, r0
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4403      	add	r3, r0
 80018c2:	3b1e      	subs	r3, #30
 80018c4:	409a      	lsls	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	e022      	b.n	8001916 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6919      	ldr	r1, [r3, #16]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	2207      	movs	r2, #7
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	400a      	ands	r2, r1
 80018f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6919      	ldr	r1, [r3, #16]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	4603      	mov	r3, r0
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4403      	add	r3, r0
 800190c:	409a      	lsls	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b06      	cmp	r3, #6
 800191c:	d824      	bhi.n	8001968 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b05      	subs	r3, #5
 8001930:	221f      	movs	r2, #31
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	400a      	ands	r2, r1
 800193e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b05      	subs	r3, #5
 800195a:	fa00 f203 	lsl.w	r2, r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
 8001966:	e04c      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d824      	bhi.n	80019ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b23      	subs	r3, #35	@ 0x23
 8001982:	221f      	movs	r2, #31
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43da      	mvns	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	400a      	ands	r2, r1
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b23      	subs	r3, #35	@ 0x23
 80019ac:	fa00 f203 	lsl.w	r2, r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b8:	e023      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b41      	subs	r3, #65	@ 0x41
 80019cc:	221f      	movs	r2, #31
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b41      	subs	r3, #65	@ 0x41
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x250>)
 8001a04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a28      	ldr	r2, [pc, #160]	@ (8001aac <HAL_ADC_ConfigChannel+0x254>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d10f      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1d8>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d10b      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <HAL_ADC_ConfigChannel+0x254>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12b      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x23a>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x258>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d003      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x1f4>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d122      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x258>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d111      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <HAL_ADC_ConfigChannel+0x260>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	10000012 	.word	0x10000012
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	431bde83 	.word	0x431bde83

08001abc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac4:	4b79      	ldr	r3, [pc, #484]	@ (8001cac <ADC_Init+0x1f0>)
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	021a      	lsls	r2, r3, #8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6899      	ldr	r1, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <ADC_Init+0x1f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e00f      	b.n	8001bba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0202 	bic.w	r2, r2, #2
 8001bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e1b      	ldrb	r3, [r3, #24]
 8001bd4:	005a      	lsls	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	3b01      	subs	r3, #1
 8001c14:	035a      	lsls	r2, r3, #13
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	e007      	b.n	8001c30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	051a      	lsls	r2, r3, #20
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c72:	025a      	lsls	r2, r3, #9
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	029a      	lsls	r2, r3, #10
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	0f000001 	.word	0x0f000001

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	@ (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff3e 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff8e 	bl	8001da8 <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5d 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff31 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e159      	b.n	80021a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8148 	bne.w	80021a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d130      	bne.n	8001f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d017      	beq.n	8001fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a2 	beq.w	80021a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <HAL_GPIO_Init+0x2e8>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4a56      	ldr	r2, [pc, #344]	@ (80021c0 <HAL_GPIO_Init+0x2e8>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206c:	6453      	str	r3, [r2, #68]	@ 0x44
 800206e:	4b54      	ldr	r3, [pc, #336]	@ (80021c0 <HAL_GPIO_Init+0x2e8>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_GPIO_Init+0x2ec>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a49      	ldr	r2, [pc, #292]	@ (80021c8 <HAL_GPIO_Init+0x2f0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x202>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a48      	ldr	r2, [pc, #288]	@ (80021cc <HAL_GPIO_Init+0x2f4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x1fe>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a47      	ldr	r2, [pc, #284]	@ (80021d0 <HAL_GPIO_Init+0x2f8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x1fa>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a46      	ldr	r2, [pc, #280]	@ (80021d4 <HAL_GPIO_Init+0x2fc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x1f6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a45      	ldr	r2, [pc, #276]	@ (80021d8 <HAL_GPIO_Init+0x300>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x1f2>
 80020c6:	2304      	movs	r3, #4
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020ca:	2307      	movs	r3, #7
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x204>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	@ (80021c4 <HAL_GPIO_Init+0x2ec>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <HAL_GPIO_Init+0x304>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a2f      	ldr	r2, [pc, #188]	@ (80021dc <HAL_GPIO_Init+0x304>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b2d      	ldr	r3, [pc, #180]	@ (80021dc <HAL_GPIO_Init+0x304>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a24      	ldr	r2, [pc, #144]	@ (80021dc <HAL_GPIO_Init+0x304>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <HAL_GPIO_Init+0x304>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <HAL_GPIO_Init+0x304>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <HAL_GPIO_Init+0x304>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a0f      	ldr	r2, [pc, #60]	@ (80021dc <HAL_GPIO_Init+0x304>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f aea2 	bls.w	8001ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40013c00 	.word	0x40013c00

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e267      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d075      	beq.n	800231e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002232:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d00c      	beq.n	8002258 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223e:	4b85      	ldr	r3, [pc, #532]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002246:	2b08      	cmp	r3, #8
 8002248:	d112      	bne.n	8002270 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4b82      	ldr	r3, [pc, #520]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002256:	d10b      	bne.n	8002270 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	4b7e      	ldr	r3, [pc, #504]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d05b      	beq.n	800231c <HAL_RCC_OscConfig+0x108>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d157      	bne.n	800231c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e242      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002278:	d106      	bne.n	8002288 <HAL_RCC_OscConfig+0x74>
 800227a:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a75      	ldr	r2, [pc, #468]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0xb0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x98>
 8002292:	4b70      	ldr	r3, [pc, #448]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6f      	ldr	r2, [pc, #444]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b6d      	ldr	r3, [pc, #436]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xb0>
 80022ac:	4b69      	ldr	r3, [pc, #420]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a68      	ldr	r2, [pc, #416]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a65      	ldr	r2, [pc, #404]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fa50 	bl	8001770 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fa4c 	bl	8001770 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	@ 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e207      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xc0>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fa3c 	bl	8001770 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fa38 	bl	8001770 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	@ 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1f3      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	4b51      	ldr	r3, [pc, #324]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0xe8>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d063      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800232a:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800233e:	2b08      	cmp	r3, #8
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x152>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e1c7      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4937      	ldr	r1, [pc, #220]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e03a      	b.n	80023f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_OscConfig+0x244>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7ff f9f1 	bl	8001770 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7ff f9ed 	bl	8001770 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1a8      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4925      	ldr	r1, [pc, #148]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_RCC_OscConfig+0x244>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff f9d0 	bl	8001770 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7ff f9cc 	bl	8001770 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e187      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d036      	beq.n	800246c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_RCC_OscConfig+0x248>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff f9b0 	bl	8001770 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff f9ac 	bl	8001770 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e167      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_OscConfig+0x240>)
 8002428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x200>
 8002432:	e01b      	b.n	800246c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_OscConfig+0x248>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7ff f999 	bl	8001770 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	e00e      	b.n	8002460 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002442:	f7ff f995 	bl	8001770 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d907      	bls.n	8002460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e150      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
 8002454:	40023800 	.word	0x40023800
 8002458:	42470000 	.word	0x42470000
 800245c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b88      	ldr	r3, [pc, #544]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ea      	bne.n	8002442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8097 	beq.w	80025a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b81      	ldr	r3, [pc, #516]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b7d      	ldr	r3, [pc, #500]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a7c      	ldr	r2, [pc, #496]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b7a      	ldr	r3, [pc, #488]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b77      	ldr	r3, [pc, #476]	@ (8002688 <HAL_RCC_OscConfig+0x474>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b74      	ldr	r3, [pc, #464]	@ (8002688 <HAL_RCC_OscConfig+0x474>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a73      	ldr	r2, [pc, #460]	@ (8002688 <HAL_RCC_OscConfig+0x474>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c2:	f7ff f955 	bl	8001770 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ca:	f7ff f951 	bl	8001770 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e10c      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <HAL_RCC_OscConfig+0x474>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x2ea>
 80024f0:	4b64      	ldr	r3, [pc, #400]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	4a63      	ldr	r2, [pc, #396]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0x324>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x30c>
 8002506:	4b5f      	ldr	r3, [pc, #380]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6713      	str	r3, [r2, #112]	@ 0x70
 8002512:	4b5c      	ldr	r3, [pc, #368]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	4a5b      	ldr	r2, [pc, #364]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6713      	str	r3, [r2, #112]	@ 0x70
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0x324>
 8002520:	4b58      	ldr	r3, [pc, #352]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002524:	4a57      	ldr	r2, [pc, #348]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	@ 0x70
 800252c:	4b55      	ldr	r3, [pc, #340]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002532:	f023 0304 	bic.w	r3, r3, #4
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7ff f916 	bl	8001770 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7ff f912 	bl	8001770 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0cb      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255e:	4b49      	ldr	r3, [pc, #292]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ee      	beq.n	8002548 <HAL_RCC_OscConfig+0x334>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff f900 	bl	8001770 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7ff f8fc 	bl	8001770 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0b5      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258a:	4b3e      	ldr	r3, [pc, #248]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ee      	bne.n	8002574 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b39      	ldr	r3, [pc, #228]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	4a38      	ldr	r2, [pc, #224]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a1 	beq.w	80026f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b2:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d05c      	beq.n	8002678 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d141      	bne.n	800264a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_RCC_OscConfig+0x478>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff f8d0 	bl	8001770 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7ff f8cc 	bl	8001770 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e087      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	019b      	lsls	r3, r3, #6
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	491b      	ldr	r1, [pc, #108]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_RCC_OscConfig+0x478>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff f8a5 	bl	8001770 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff f8a1 	bl	8001770 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e05c      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x416>
 8002648:	e054      	b.n	80026f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_RCC_OscConfig+0x478>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff f88e 	bl	8001770 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff f88a 	bl	8001770 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e045      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_OscConfig+0x470>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x444>
 8002676:	e03d      	b.n	80026f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e038      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
 8002684:	40023800 	.word	0x40023800
 8002688:	40007000 	.word	0x40007000
 800268c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002690:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <HAL_RCC_OscConfig+0x4ec>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d028      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d121      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d11a      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026c0:	4013      	ands	r3, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d111      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	3b01      	subs	r3, #1
 80026da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0cc      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b68      	ldr	r3, [pc, #416]	@ (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d90c      	bls.n	8002740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b65      	ldr	r3, [pc, #404]	@ (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	@ (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a58      	ldr	r2, [pc, #352]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a52      	ldr	r2, [pc, #328]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800277a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d044      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d119      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e067      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4934      	ldr	r1, [pc, #208]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe ffbc 	bl	8001770 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe ffb8 	bl	8001770 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e04f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d20c      	bcs.n	800284c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002876:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe ff1c 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08005c14 	.word	0x08005c14
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d4:	b094      	sub	sp, #80	@ 0x50
 80028d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e8:	4b79      	ldr	r3, [pc, #484]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d00d      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x40>
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	f200 80e1 	bhi.w	8002abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x34>
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x3a>
 8002902:	e0db      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b73      	ldr	r3, [pc, #460]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002908:	e0db      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290a:	4b73      	ldr	r3, [pc, #460]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800290c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800290e:	e0d8      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002910:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002918:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d063      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002926:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	2200      	movs	r2, #0
 800292e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002930:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
 800293a:	2300      	movs	r3, #0
 800293c:	637b      	str	r3, [r7, #52]	@ 0x34
 800293e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002942:	4622      	mov	r2, r4
 8002944:	462b      	mov	r3, r5
 8002946:	f04f 0000 	mov.w	r0, #0
 800294a:	f04f 0100 	mov.w	r1, #0
 800294e:	0159      	lsls	r1, r3, #5
 8002950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002954:	0150      	lsls	r0, r2, #5
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4621      	mov	r1, r4
 800295c:	1a51      	subs	r1, r2, r1
 800295e:	6139      	str	r1, [r7, #16]
 8002960:	4629      	mov	r1, r5
 8002962:	eb63 0301 	sbc.w	r3, r3, r1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002974:	4659      	mov	r1, fp
 8002976:	018b      	lsls	r3, r1, #6
 8002978:	4651      	mov	r1, sl
 800297a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800297e:	4651      	mov	r1, sl
 8002980:	018a      	lsls	r2, r1, #6
 8002982:	4651      	mov	r1, sl
 8002984:	ebb2 0801 	subs.w	r8, r2, r1
 8002988:	4659      	mov	r1, fp
 800298a:	eb63 0901 	sbc.w	r9, r3, r1
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800299e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a2:	4690      	mov	r8, r2
 80029a4:	4699      	mov	r9, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	eb18 0303 	adds.w	r3, r8, r3
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	462b      	mov	r3, r5
 80029b0:	eb49 0303 	adc.w	r3, r9, r3
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029c2:	4629      	mov	r1, r5
 80029c4:	024b      	lsls	r3, r1, #9
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029cc:	4621      	mov	r1, r4
 80029ce:	024a      	lsls	r2, r1, #9
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029e0:	f7fd fbfa 	bl	80001d8 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ec:	e058      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ee:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	099b      	lsrs	r3, r3, #6
 80029f4:	2200      	movs	r2, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	4611      	mov	r1, r2
 80029fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a08:	4642      	mov	r2, r8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	f04f 0000 	mov.w	r0, #0
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	0159      	lsls	r1, r3, #5
 8002a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a1a:	0150      	lsls	r0, r2, #5
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4641      	mov	r1, r8
 8002a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a26:	4649      	mov	r1, r9
 8002a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a40:	ebb2 040a 	subs.w	r4, r2, sl
 8002a44:	eb63 050b 	sbc.w	r5, r3, fp
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	00eb      	lsls	r3, r5, #3
 8002a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a56:	00e2      	lsls	r2, r4, #3
 8002a58:	4614      	mov	r4, r2
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	18e3      	adds	r3, r4, r3
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	464b      	mov	r3, r9
 8002a64:	eb45 0303 	adc.w	r3, r5, r3
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a76:	4629      	mov	r1, r5
 8002a78:	028b      	lsls	r3, r1, #10
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a80:	4621      	mov	r1, r4
 8002a82:	028a      	lsls	r2, r1, #10
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	61fa      	str	r2, [r7, #28]
 8002a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a94:	f7fd fba0 	bl	80001d8 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ab0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aba:	e002      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3750      	adds	r7, #80	@ 0x50
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	00f42400 	.word	0x00f42400
 8002ad8:	007a1200 	.word	0x007a1200

08002adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae0:	4b03      	ldr	r3, [pc, #12]	@ (8002af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000000 	.word	0x20000000

08002af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af8:	f7ff fff0 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0a9b      	lsrs	r3, r3, #10
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08005c24 	.word	0x08005c24

08002b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b20:	f7ff ffdc 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0b5b      	lsrs	r3, r3, #13
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08005c24 	.word	0x08005c24

08002b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07b      	b.n	8002c4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d108      	bne.n	8002b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b66:	d009      	beq.n	8002b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
 8002b6e:	e005      	b.n	8002b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd ffd4 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0104 	and.w	r1, r3, #4
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	f003 0210 	and.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69da      	ldr	r2, [r3, #28]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b088      	sub	sp, #32
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c66:	f7fe fd83 	bl	8001770 <HAL_GetTick>
 8002c6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d001      	beq.n	8002c80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e12a      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Transmit+0x36>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e122      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_SPI_Transmit+0x48>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e11b      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cec:	d10f      	bne.n	8002d0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d007      	beq.n	8002d2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d34:	d152      	bne.n	8002ddc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0xee>
 8002d3e:	8b7b      	ldrh	r3, [r7, #26]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d145      	bne.n	8002dd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d68:	e032      	b.n	8002dd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d112      	bne.n	8002d9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d9c:	e018      	b.n	8002dd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe fce7 	bl	8001770 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Transmit+0x160>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x166>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e082      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c7      	bne.n	8002d6a <HAL_SPI_Transmit+0x114>
 8002dda:	e053      	b.n	8002e84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_Transmit+0x194>
 8002de4:	8b7b      	ldrh	r3, [r7, #26]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d147      	bne.n	8002e7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e10:	e033      	b.n	8002e7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d113      	bne.n	8002e48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e46:	e018      	b.n	8002e7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e48:	f7fe fc92 	bl	8001770 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d803      	bhi.n	8002e60 <HAL_SPI_Transmit+0x20a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d102      	bne.n	8002e66 <HAL_SPI_Transmit+0x210>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e02d      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1c6      	bne.n	8002e12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f8b1 	bl	8002ff0 <SPI_EndRxTxTransaction>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ef0:	f7fe fc3e 	bl	8001770 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f00:	f7fe fc36 	bl	8001770 <HAL_GetTick>
 8002f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f06:	4b39      	ldr	r3, [pc, #228]	@ (8002fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	0d1b      	lsrs	r3, r3, #20
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f16:	e055      	b.n	8002fc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d051      	beq.n	8002fc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f20:	f7fe fc26 	bl	8001770 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d902      	bls.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13d      	bne.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f4e:	d111      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f58:	d004      	beq.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d107      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7c:	d10f      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e018      	b.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e002      	b.n	8002fc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d19a      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000000 	.word	0x20000000

08002ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2201      	movs	r2, #1
 8003004:	2102      	movs	r1, #2
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff ff6a 	bl	8002ee0 <SPI_WaitFlagStateUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e032      	b.n	8003088 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <SPI_EndRxTxTransaction+0xa0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <SPI_EndRxTxTransaction+0xa4>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003040:	d112      	bne.n	8003068 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	@ 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ff47 	bl	8002ee0 <SPI_WaitFlagStateUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d016      	beq.n	8003086 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e00f      	b.n	8003088 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3b01      	subs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b80      	cmp	r3, #128	@ 0x80
 8003080:	d0f2      	beq.n	8003068 <SPI_EndRxTxTransaction+0x78>
 8003082:	e000      	b.n	8003086 <SPI_EndRxTxTransaction+0x96>
        break;
 8003084:	bf00      	nop
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000000 	.word	0x20000000
 8003094:	165e9f81 	.word	0x165e9f81

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e041      	b.n	800312e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe f994 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fb84 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e03c      	b.n	80031ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1e      	ldr	r2, [pc, #120]	@ (80031d8 <HAL_TIM_Base_Start+0xa0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_TIM_Base_Start+0x5c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316a:	d013      	beq.n	8003194 <HAL_TIM_Base_Start+0x5c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1a      	ldr	r2, [pc, #104]	@ (80031dc <HAL_TIM_Base_Start+0xa4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_TIM_Base_Start+0x5c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_TIM_Base_Start+0xa8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_Base_Start+0x5c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a17      	ldr	r2, [pc, #92]	@ (80031e4 <HAL_TIM_Base_Start+0xac>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_Base_Start+0x5c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a16      	ldr	r2, [pc, #88]	@ (80031e8 <HAL_TIM_Base_Start+0xb0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d111      	bne.n	80031b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d010      	beq.n	80031c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b6:	e007      	b.n	80031c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	40014000 	.word	0x40014000

080031ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e041      	b.n	8003282 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f8c8 	bl	80013a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 fada 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01b      	beq.n	80032ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0202 	mvn.w	r2, #2
 80032be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fa66 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80032da:	e005      	b.n	80032e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fa58 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa69 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01b      	beq.n	800333a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0204 	mvn.w	r2, #4
 800330a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fa40 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003326:	e005      	b.n	8003334 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fa32 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa43 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01b      	beq.n	8003386 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0208 	mvn.w	r2, #8
 8003356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fa1a 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003372:	e005      	b.n	8003380 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fa0c 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa1d 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01b      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f06f 0210 	mvn.w	r2, #16
 80033a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2208      	movs	r2, #8
 80033a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f9f4 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80033be:	e005      	b.n	80033cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f9e6 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9f7 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00c      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0201 	mvn.w	r2, #1
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f9c4 	bl	800377e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fd5b 	bl	8003ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f9c8 	bl	80037ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00c      	beq.n	8003462 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 0220 	mvn.w	r2, #32
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fd2d 	bl	8003ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003486:	2302      	movs	r3, #2
 8003488:	e0ae      	b.n	80035e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	f200 809f 	bhi.w	80035d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800349a:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	080035d9 	.word	0x080035d9
 80034a8:	080035d9 	.word	0x080035d9
 80034ac:	080035d9 	.word	0x080035d9
 80034b0:	08003515 	.word	0x08003515
 80034b4:	080035d9 	.word	0x080035d9
 80034b8:	080035d9 	.word	0x080035d9
 80034bc:	080035d9 	.word	0x080035d9
 80034c0:	08003557 	.word	0x08003557
 80034c4:	080035d9 	.word	0x080035d9
 80034c8:	080035d9 	.word	0x080035d9
 80034cc:	080035d9 	.word	0x080035d9
 80034d0:	08003597 	.word	0x08003597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa08 	bl	80038f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0208 	orr.w	r2, r2, #8
 80034ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6999      	ldr	r1, [r3, #24]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	619a      	str	r2, [r3, #24]
      break;
 8003512:	e064      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa4e 	bl	80039bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800352e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6999      	ldr	r1, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	021a      	lsls	r2, r3, #8
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	619a      	str	r2, [r3, #24]
      break;
 8003554:	e043      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fa99 	bl	8003a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0208 	orr.w	r2, r2, #8
 8003570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0204 	bic.w	r2, r2, #4
 8003580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69d9      	ldr	r1, [r3, #28]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	61da      	str	r2, [r3, #28]
      break;
 8003594:	e023      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fae3 	bl	8003b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	021a      	lsls	r2, r3, #8
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	61da      	str	r2, [r3, #28]
      break;
 80035d6:	e002      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
      break;
 80035dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIM_ConfigClockSource+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e0b4      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x186>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003644:	d03e      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	f200 8087 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003652:	f000 8086 	beq.w	8003762 <HAL_TIM_ConfigClockSource+0x172>
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365a:	d87f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b70      	cmp	r3, #112	@ 0x70
 800365e:	d01a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0xa6>
 8003660:	2b70      	cmp	r3, #112	@ 0x70
 8003662:	d87b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b60      	cmp	r3, #96	@ 0x60
 8003666:	d050      	beq.n	800370a <HAL_TIM_ConfigClockSource+0x11a>
 8003668:	2b60      	cmp	r3, #96	@ 0x60
 800366a:	d877      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d03c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0xfa>
 8003670:	2b50      	cmp	r3, #80	@ 0x50
 8003672:	d873      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d058      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x13a>
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	d86f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b30      	cmp	r3, #48	@ 0x30
 800367e:	d064      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b30      	cmp	r3, #48	@ 0x30
 8003682:	d86b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d060      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d867      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d05a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003694:	e062      	b.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	f000 fb29 	bl	8003cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	609a      	str	r2, [r3, #8]
      break;
 80036c2:	e04f      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	f000 fb12 	bl	8003cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e6:	609a      	str	r2, [r3, #8]
      break;
 80036e8:	e03c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 fa86 	bl	8003c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2150      	movs	r1, #80	@ 0x50
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fadf 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003708:	e02c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003716:	461a      	mov	r2, r3
 8003718:	f000 faa5 	bl	8003c66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2160      	movs	r1, #96	@ 0x60
 8003722:	4618      	mov	r0, r3
 8003724:	f000 facf 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003728:	e01c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	461a      	mov	r2, r3
 8003738:	f000 fa66 	bl	8003c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2140      	movs	r1, #64	@ 0x40
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fabf 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003748:	e00c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 fab6 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 800375a:	e003      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a37      	ldr	r2, [pc, #220]	@ (80038d4 <TIM_Base_SetConfig+0xf0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00f      	beq.n	800381c <TIM_Base_SetConfig+0x38>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003802:	d00b      	beq.n	800381c <TIM_Base_SetConfig+0x38>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a34      	ldr	r2, [pc, #208]	@ (80038d8 <TIM_Base_SetConfig+0xf4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_Base_SetConfig+0x38>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a33      	ldr	r2, [pc, #204]	@ (80038dc <TIM_Base_SetConfig+0xf8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0x38>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a32      	ldr	r2, [pc, #200]	@ (80038e0 <TIM_Base_SetConfig+0xfc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a28      	ldr	r2, [pc, #160]	@ (80038d4 <TIM_Base_SetConfig+0xf0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01b      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d017      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a25      	ldr	r2, [pc, #148]	@ (80038d8 <TIM_Base_SetConfig+0xf4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a24      	ldr	r2, [pc, #144]	@ (80038dc <TIM_Base_SetConfig+0xf8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a23      	ldr	r2, [pc, #140]	@ (80038e0 <TIM_Base_SetConfig+0xfc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a22      	ldr	r2, [pc, #136]	@ (80038e4 <TIM_Base_SetConfig+0x100>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a21      	ldr	r2, [pc, #132]	@ (80038e8 <TIM_Base_SetConfig+0x104>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a20      	ldr	r2, [pc, #128]	@ (80038ec <TIM_Base_SetConfig+0x108>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0c      	ldr	r2, [pc, #48]	@ (80038d4 <TIM_Base_SetConfig+0xf0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d103      	bne.n	80038ae <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800

080038f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 0201 	bic.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 0302 	bic.w	r3, r3, #2
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <TIM_OC1_SetConfig+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10c      	bne.n	8003966 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0308 	bic.w	r3, r3, #8
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <TIM_OC1_SetConfig+0xc8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d111      	bne.n	8003992 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	621a      	str	r2, [r3, #32]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40010000 	.word	0x40010000

080039bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f023 0210 	bic.w	r2, r3, #16
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0320 	bic.w	r3, r3, #32
 8003a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <TIM_OC2_SetConfig+0xd4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10d      	bne.n	8003a38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a15      	ldr	r2, [pc, #84]	@ (8003a90 <TIM_OC2_SetConfig+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d113      	bne.n	8003a68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000

08003a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <TIM_OC3_SetConfig+0xd0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10d      	bne.n	8003b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <TIM_OC3_SetConfig+0xd0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d113      	bne.n	8003b3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40010000 	.word	0x40010000

08003b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	031b      	lsls	r3, r3, #12
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a10      	ldr	r2, [pc, #64]	@ (8003c04 <TIM_OC4_SetConfig+0x9c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	019b      	lsls	r3, r3, #6
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000

08003c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 030a 	bic.w	r3, r3, #10
 8003c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f023 0210 	bic.w	r2, r3, #16
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f043 0307 	orr.w	r3, r3, #7
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e050      	b.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da0:	d013      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a13      	ldr	r2, [pc, #76]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10c      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40014000 	.word	0x40014000

08003e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e03d      	b.n	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e042      	b.n	8003f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fb24 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	@ 0x24
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa09 	bl	8004340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	@ 0x28
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d175      	bne.n	8004090 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Transmit+0x2c>
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e06e      	b.n	8004092 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2221      	movs	r2, #33	@ 0x21
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc2:	f7fd fbd5 	bl	8001770 <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fdc:	d108      	bne.n	8003ff0 <HAL_UART_Transmit+0x6c>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e003      	b.n	8003ff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ff8:	e02e      	b.n	8004058 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2180      	movs	r1, #128	@ 0x80
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f8df 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e03a      	b.n	8004092 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3302      	adds	r3, #2
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e007      	b.n	800404a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1cb      	bne.n	8003ffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2140      	movs	r1, #64	@ 0x40
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f8ab 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e006      	b.n	8004092 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b08a      	sub	sp, #40	@ 0x28
 800409e:	af02      	add	r7, sp, #8
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	f040 8081 	bne.w	80041be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_UART_Receive+0x2e>
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e079      	b.n	80041c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2222      	movs	r2, #34	@ 0x22
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e0:	f7fd fb46 	bl	8001770 <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fa:	d108      	bne.n	800410e <HAL_UART_Receive+0x74>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e003      	b.n	8004116 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004116:	e047      	b.n	80041a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2200      	movs	r2, #0
 8004120:	2120      	movs	r1, #32
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f850 	bl	80041c8 <UART_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e042      	b.n	80041c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10c      	bne.n	800415a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	b29a      	uxth	r2, r3
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	3302      	adds	r3, #2
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	e01f      	b.n	800419a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004162:	d007      	beq.n	8004174 <HAL_UART_Receive+0xda>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_UART_Receive+0xe8>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e008      	b.n	8004194 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800418e:	b2da      	uxtb	r2, r3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3301      	adds	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1b2      	bne.n	8004118 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d8:	e03b      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d037      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fd fac5 	bl	8001770 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e03a      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d023      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x8a>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b80      	cmp	r3, #128	@ 0x80
 800420e:	d020      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b40      	cmp	r3, #64	@ 0x40
 8004214:	d01d      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d116      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f81d 	bl	800427a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2208      	movs	r2, #8
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e00f      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0b4      	beq.n	80041da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427a:	b480      	push	{r7}
 800427c:	b095      	sub	sp, #84	@ 0x54
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e5      	bne.n	80042b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d119      	bne.n	8004326 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	60bb      	str	r3, [r7, #8]
   return(result);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 0310 	bic.w	r3, r3, #16
 8004308:	647b      	str	r3, [r7, #68]	@ 0x44
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004312:	61ba      	str	r2, [r7, #24]
 8004314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	613b      	str	r3, [r7, #16]
   return(result);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004334:	bf00      	nop
 8004336:	3754      	adds	r7, #84	@ 0x54
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b0c0      	sub	sp, #256	@ 0x100
 8004346:	af00      	add	r7, sp, #0
 8004348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	68d9      	ldr	r1, [r3, #12]
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	ea40 0301 	orr.w	r3, r0, r1
 8004368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004398:	f021 010c 	bic.w	r1, r1, #12
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043a6:	430b      	orrs	r3, r1
 80043a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	6999      	ldr	r1, [r3, #24]
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	ea40 0301 	orr.w	r3, r0, r1
 80043c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b8f      	ldr	r3, [pc, #572]	@ (800460c <UART_SetConfig+0x2cc>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d005      	beq.n	80043e0 <UART_SetConfig+0xa0>
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8d      	ldr	r3, [pc, #564]	@ (8004610 <UART_SetConfig+0x2d0>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d104      	bne.n	80043ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7fe fb9c 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 80043e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043e8:	e003      	b.n	80043f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ea:	f7fe fb83 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 80043ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fc:	f040 810c 	bne.w	8004618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800440a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800440e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	1891      	adds	r1, r2, r2
 8004418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800441a:	415b      	adcs	r3, r3
 800441c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004422:	4621      	mov	r1, r4
 8004424:	eb12 0801 	adds.w	r8, r2, r1
 8004428:	4629      	mov	r1, r5
 800442a:	eb43 0901 	adc.w	r9, r3, r1
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004442:	4690      	mov	r8, r2
 8004444:	4699      	mov	r9, r3
 8004446:	4623      	mov	r3, r4
 8004448:	eb18 0303 	adds.w	r3, r8, r3
 800444c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004450:	462b      	mov	r3, r5
 8004452:	eb49 0303 	adc.w	r3, r9, r3
 8004456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800446a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800446e:	460b      	mov	r3, r1
 8004470:	18db      	adds	r3, r3, r3
 8004472:	653b      	str	r3, [r7, #80]	@ 0x50
 8004474:	4613      	mov	r3, r2
 8004476:	eb42 0303 	adc.w	r3, r2, r3
 800447a:	657b      	str	r3, [r7, #84]	@ 0x54
 800447c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004484:	f7fb fea8 	bl	80001d8 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4b61      	ldr	r3, [pc, #388]	@ (8004614 <UART_SetConfig+0x2d4>)
 800448e:	fba3 2302 	umull	r2, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	011c      	lsls	r4, r3, #4
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044b0:	415b      	adcs	r3, r3
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044b8:	4641      	mov	r1, r8
 80044ba:	eb12 0a01 	adds.w	sl, r2, r1
 80044be:	4649      	mov	r1, r9
 80044c0:	eb43 0b01 	adc.w	fp, r3, r1
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d8:	4692      	mov	sl, r2
 80044da:	469b      	mov	fp, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	eb1a 0303 	adds.w	r3, sl, r3
 80044e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044e6:	464b      	mov	r3, r9
 80044e8:	eb4b 0303 	adc.w	r3, fp, r3
 80044ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004504:	460b      	mov	r3, r1
 8004506:	18db      	adds	r3, r3, r3
 8004508:	643b      	str	r3, [r7, #64]	@ 0x40
 800450a:	4613      	mov	r3, r2
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	647b      	str	r3, [r7, #68]	@ 0x44
 8004512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800451a:	f7fb fe5d 	bl	80001d8 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4b3b      	ldr	r3, [pc, #236]	@ (8004614 <UART_SetConfig+0x2d4>)
 8004526:	fba3 2301 	umull	r2, r3, r3, r1
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2264      	movs	r2, #100	@ 0x64
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	1acb      	subs	r3, r1, r3
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800453a:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <UART_SetConfig+0x2d4>)
 800453c:	fba3 2302 	umull	r2, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004548:	441c      	add	r4, r3
 800454a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	1891      	adds	r1, r2, r2
 8004562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004564:	415b      	adcs	r3, r3
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800456c:	4641      	mov	r1, r8
 800456e:	1851      	adds	r1, r2, r1
 8004570:	6339      	str	r1, [r7, #48]	@ 0x30
 8004572:	4649      	mov	r1, r9
 8004574:	414b      	adcs	r3, r1
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004584:	4659      	mov	r1, fp
 8004586:	00cb      	lsls	r3, r1, #3
 8004588:	4651      	mov	r1, sl
 800458a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458e:	4651      	mov	r1, sl
 8004590:	00ca      	lsls	r2, r1, #3
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	4603      	mov	r3, r0
 8004598:	4642      	mov	r2, r8
 800459a:	189b      	adds	r3, r3, r2
 800459c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045a0:	464b      	mov	r3, r9
 80045a2:	460a      	mov	r2, r1
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045c0:	460b      	mov	r3, r1
 80045c2:	18db      	adds	r3, r3, r3
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	4613      	mov	r3, r2
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045d6:	f7fb fdff 	bl	80001d8 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <UART_SetConfig+0x2d4>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	@ 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	3332      	adds	r3, #50	@ 0x32
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <UART_SetConfig+0x2d4>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4422      	add	r2, r4
 8004606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004608:	e106      	b.n	8004818 <UART_SetConfig+0x4d8>
 800460a:	bf00      	nop
 800460c:	40011000 	.word	0x40011000
 8004610:	40011400 	.word	0x40011400
 8004614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800462a:	4642      	mov	r2, r8
 800462c:	464b      	mov	r3, r9
 800462e:	1891      	adds	r1, r2, r2
 8004630:	6239      	str	r1, [r7, #32]
 8004632:	415b      	adcs	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
 8004636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463a:	4641      	mov	r1, r8
 800463c:	1854      	adds	r4, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb43 0501 	adc.w	r5, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	00eb      	lsls	r3, r5, #3
 800464e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004652:	00e2      	lsls	r2, r4, #3
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	4643      	mov	r3, r8
 800465a:	18e3      	adds	r3, r4, r3
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004660:	464b      	mov	r3, r9
 8004662:	eb45 0303 	adc.w	r3, r5, r3
 8004666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004686:	4629      	mov	r1, r5
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004690:	4621      	mov	r1, r4
 8004692:	008a      	lsls	r2, r1, #2
 8004694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004698:	f7fb fd9e 	bl	80001d8 <__aeabi_uldivmod>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4b60      	ldr	r3, [pc, #384]	@ (8004824 <UART_SetConfig+0x4e4>)
 80046a2:	fba3 2302 	umull	r2, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	011c      	lsls	r4, r3, #4
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	61b9      	str	r1, [r7, #24]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6139      	str	r1, [r7, #16]
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004724:	4649      	mov	r1, r9
 8004726:	008b      	lsls	r3, r1, #2
 8004728:	4641      	mov	r1, r8
 800472a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472e:	4641      	mov	r1, r8
 8004730:	008a      	lsls	r2, r1, #2
 8004732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004736:	f7fb fd4f 	bl	80001d8 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4611      	mov	r1, r2
 8004740:	4b38      	ldr	r3, [pc, #224]	@ (8004824 <UART_SetConfig+0x4e4>)
 8004742:	fba3 2301 	umull	r2, r3, r3, r1
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2264      	movs	r2, #100	@ 0x64
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	1acb      	subs	r3, r1, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	@ 0x32
 8004754:	4a33      	ldr	r2, [pc, #204]	@ (8004824 <UART_SetConfig+0x4e4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004760:	441c      	add	r4, r3
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	673b      	str	r3, [r7, #112]	@ 0x70
 800476a:	677a      	str	r2, [r7, #116]	@ 0x74
 800476c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	415b      	adcs	r3, r3
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004780:	4641      	mov	r1, r8
 8004782:	1851      	adds	r1, r2, r1
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	4649      	mov	r1, r9
 8004788:	414b      	adcs	r3, r1
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004798:	4659      	mov	r1, fp
 800479a:	00cb      	lsls	r3, r1, #3
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a2:	4651      	mov	r1, sl
 80047a4:	00ca      	lsls	r2, r1, #3
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	4642      	mov	r2, r8
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b2:	464b      	mov	r3, r9
 80047b4:	460a      	mov	r2, r1
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047d4:	4649      	mov	r1, r9
 80047d6:	008b      	lsls	r3, r1, #2
 80047d8:	4641      	mov	r1, r8
 80047da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047de:	4641      	mov	r1, r8
 80047e0:	008a      	lsls	r2, r1, #2
 80047e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047e6:	f7fb fcf7 	bl	80001d8 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <UART_SetConfig+0x4e4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	@ 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	3332      	adds	r3, #50	@ 0x32
 8004802:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <UART_SetConfig+0x4e4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4422      	add	r2, r4
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800481e:	46bd      	mov	sp, r7
 8004820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004824:	51eb851f 	.word	0x51eb851f

08004828 <std>:
 8004828:	2300      	movs	r3, #0
 800482a:	b510      	push	{r4, lr}
 800482c:	4604      	mov	r4, r0
 800482e:	e9c0 3300 	strd	r3, r3, [r0]
 8004832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004836:	6083      	str	r3, [r0, #8]
 8004838:	8181      	strh	r1, [r0, #12]
 800483a:	6643      	str	r3, [r0, #100]	@ 0x64
 800483c:	81c2      	strh	r2, [r0, #14]
 800483e:	6183      	str	r3, [r0, #24]
 8004840:	4619      	mov	r1, r3
 8004842:	2208      	movs	r2, #8
 8004844:	305c      	adds	r0, #92	@ 0x5c
 8004846:	f000 f9e7 	bl	8004c18 <memset>
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <std+0x58>)
 800484c:	6263      	str	r3, [r4, #36]	@ 0x24
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <std+0x5c>)
 8004850:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <std+0x60>)
 8004854:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004856:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <std+0x64>)
 8004858:	6323      	str	r3, [r4, #48]	@ 0x30
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <std+0x68>)
 800485c:	6224      	str	r4, [r4, #32]
 800485e:	429c      	cmp	r4, r3
 8004860:	d006      	beq.n	8004870 <std+0x48>
 8004862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004866:	4294      	cmp	r4, r2
 8004868:	d002      	beq.n	8004870 <std+0x48>
 800486a:	33d0      	adds	r3, #208	@ 0xd0
 800486c:	429c      	cmp	r4, r3
 800486e:	d105      	bne.n	800487c <std+0x54>
 8004870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004878:	f000 ba46 	b.w	8004d08 <__retarget_lock_init_recursive>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop
 8004880:	08004a69 	.word	0x08004a69
 8004884:	08004a8b 	.word	0x08004a8b
 8004888:	08004ac3 	.word	0x08004ac3
 800488c:	08004ae7 	.word	0x08004ae7
 8004890:	2000024c 	.word	0x2000024c

08004894 <stdio_exit_handler>:
 8004894:	4a02      	ldr	r2, [pc, #8]	@ (80048a0 <stdio_exit_handler+0xc>)
 8004896:	4903      	ldr	r1, [pc, #12]	@ (80048a4 <stdio_exit_handler+0x10>)
 8004898:	4803      	ldr	r0, [pc, #12]	@ (80048a8 <stdio_exit_handler+0x14>)
 800489a:	f000 b869 	b.w	8004970 <_fwalk_sglue>
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	08005009 	.word	0x08005009
 80048a8:	2000001c 	.word	0x2000001c

080048ac <cleanup_stdio>:
 80048ac:	6841      	ldr	r1, [r0, #4]
 80048ae:	4b0c      	ldr	r3, [pc, #48]	@ (80048e0 <cleanup_stdio+0x34>)
 80048b0:	4299      	cmp	r1, r3
 80048b2:	b510      	push	{r4, lr}
 80048b4:	4604      	mov	r4, r0
 80048b6:	d001      	beq.n	80048bc <cleanup_stdio+0x10>
 80048b8:	f000 fba6 	bl	8005008 <_fflush_r>
 80048bc:	68a1      	ldr	r1, [r4, #8]
 80048be:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <cleanup_stdio+0x38>)
 80048c0:	4299      	cmp	r1, r3
 80048c2:	d002      	beq.n	80048ca <cleanup_stdio+0x1e>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 fb9f 	bl	8005008 <_fflush_r>
 80048ca:	68e1      	ldr	r1, [r4, #12]
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <cleanup_stdio+0x3c>)
 80048ce:	4299      	cmp	r1, r3
 80048d0:	d004      	beq.n	80048dc <cleanup_stdio+0x30>
 80048d2:	4620      	mov	r0, r4
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d8:	f000 bb96 	b.w	8005008 <_fflush_r>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	2000024c 	.word	0x2000024c
 80048e4:	200002b4 	.word	0x200002b4
 80048e8:	2000031c 	.word	0x2000031c

080048ec <global_stdio_init.part.0>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <global_stdio_init.part.0+0x30>)
 80048f0:	4c0b      	ldr	r4, [pc, #44]	@ (8004920 <global_stdio_init.part.0+0x34>)
 80048f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004924 <global_stdio_init.part.0+0x38>)
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	4620      	mov	r0, r4
 80048f8:	2200      	movs	r2, #0
 80048fa:	2104      	movs	r1, #4
 80048fc:	f7ff ff94 	bl	8004828 <std>
 8004900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004904:	2201      	movs	r2, #1
 8004906:	2109      	movs	r1, #9
 8004908:	f7ff ff8e 	bl	8004828 <std>
 800490c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004910:	2202      	movs	r2, #2
 8004912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004916:	2112      	movs	r1, #18
 8004918:	f7ff bf86 	b.w	8004828 <std>
 800491c:	20000384 	.word	0x20000384
 8004920:	2000024c 	.word	0x2000024c
 8004924:	08004895 	.word	0x08004895

08004928 <__sfp_lock_acquire>:
 8004928:	4801      	ldr	r0, [pc, #4]	@ (8004930 <__sfp_lock_acquire+0x8>)
 800492a:	f000 b9ee 	b.w	8004d0a <__retarget_lock_acquire_recursive>
 800492e:	bf00      	nop
 8004930:	2000038d 	.word	0x2000038d

08004934 <__sfp_lock_release>:
 8004934:	4801      	ldr	r0, [pc, #4]	@ (800493c <__sfp_lock_release+0x8>)
 8004936:	f000 b9e9 	b.w	8004d0c <__retarget_lock_release_recursive>
 800493a:	bf00      	nop
 800493c:	2000038d 	.word	0x2000038d

08004940 <__sinit>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4604      	mov	r4, r0
 8004944:	f7ff fff0 	bl	8004928 <__sfp_lock_acquire>
 8004948:	6a23      	ldr	r3, [r4, #32]
 800494a:	b11b      	cbz	r3, 8004954 <__sinit+0x14>
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004950:	f7ff bff0 	b.w	8004934 <__sfp_lock_release>
 8004954:	4b04      	ldr	r3, [pc, #16]	@ (8004968 <__sinit+0x28>)
 8004956:	6223      	str	r3, [r4, #32]
 8004958:	4b04      	ldr	r3, [pc, #16]	@ (800496c <__sinit+0x2c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f5      	bne.n	800494c <__sinit+0xc>
 8004960:	f7ff ffc4 	bl	80048ec <global_stdio_init.part.0>
 8004964:	e7f2      	b.n	800494c <__sinit+0xc>
 8004966:	bf00      	nop
 8004968:	080048ad 	.word	0x080048ad
 800496c:	20000384 	.word	0x20000384

08004970 <_fwalk_sglue>:
 8004970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004974:	4607      	mov	r7, r0
 8004976:	4688      	mov	r8, r1
 8004978:	4614      	mov	r4, r2
 800497a:	2600      	movs	r6, #0
 800497c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004980:	f1b9 0901 	subs.w	r9, r9, #1
 8004984:	d505      	bpl.n	8004992 <_fwalk_sglue+0x22>
 8004986:	6824      	ldr	r4, [r4, #0]
 8004988:	2c00      	cmp	r4, #0
 800498a:	d1f7      	bne.n	800497c <_fwalk_sglue+0xc>
 800498c:	4630      	mov	r0, r6
 800498e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d907      	bls.n	80049a8 <_fwalk_sglue+0x38>
 8004998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800499c:	3301      	adds	r3, #1
 800499e:	d003      	beq.n	80049a8 <_fwalk_sglue+0x38>
 80049a0:	4629      	mov	r1, r5
 80049a2:	4638      	mov	r0, r7
 80049a4:	47c0      	blx	r8
 80049a6:	4306      	orrs	r6, r0
 80049a8:	3568      	adds	r5, #104	@ 0x68
 80049aa:	e7e9      	b.n	8004980 <_fwalk_sglue+0x10>

080049ac <_puts_r>:
 80049ac:	6a03      	ldr	r3, [r0, #32]
 80049ae:	b570      	push	{r4, r5, r6, lr}
 80049b0:	6884      	ldr	r4, [r0, #8]
 80049b2:	4605      	mov	r5, r0
 80049b4:	460e      	mov	r6, r1
 80049b6:	b90b      	cbnz	r3, 80049bc <_puts_r+0x10>
 80049b8:	f7ff ffc2 	bl	8004940 <__sinit>
 80049bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049be:	07db      	lsls	r3, r3, #31
 80049c0:	d405      	bmi.n	80049ce <_puts_r+0x22>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	0598      	lsls	r0, r3, #22
 80049c6:	d402      	bmi.n	80049ce <_puts_r+0x22>
 80049c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ca:	f000 f99e 	bl	8004d0a <__retarget_lock_acquire_recursive>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	0719      	lsls	r1, r3, #28
 80049d2:	d502      	bpl.n	80049da <_puts_r+0x2e>
 80049d4:	6923      	ldr	r3, [r4, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d135      	bne.n	8004a46 <_puts_r+0x9a>
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 f8c5 	bl	8004b6c <__swsetup_r>
 80049e2:	b380      	cbz	r0, 8004a46 <_puts_r+0x9a>
 80049e4:	f04f 35ff 	mov.w	r5, #4294967295
 80049e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049ea:	07da      	lsls	r2, r3, #31
 80049ec:	d405      	bmi.n	80049fa <_puts_r+0x4e>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	d402      	bmi.n	80049fa <_puts_r+0x4e>
 80049f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049f6:	f000 f989 	bl	8004d0c <__retarget_lock_release_recursive>
 80049fa:	4628      	mov	r0, r5
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da04      	bge.n	8004a0c <_puts_r+0x60>
 8004a02:	69a2      	ldr	r2, [r4, #24]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	dc17      	bgt.n	8004a38 <_puts_r+0x8c>
 8004a08:	290a      	cmp	r1, #10
 8004a0a:	d015      	beq.n	8004a38 <_puts_r+0x8c>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	6022      	str	r2, [r4, #0]
 8004a12:	7019      	strb	r1, [r3, #0]
 8004a14:	68a3      	ldr	r3, [r4, #8]
 8004a16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	60a3      	str	r3, [r4, #8]
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	d1ed      	bne.n	80049fe <_puts_r+0x52>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	da11      	bge.n	8004a4a <_puts_r+0x9e>
 8004a26:	4622      	mov	r2, r4
 8004a28:	210a      	movs	r1, #10
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 f85f 	bl	8004aee <__swbuf_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d0d7      	beq.n	80049e4 <_puts_r+0x38>
 8004a34:	250a      	movs	r5, #10
 8004a36:	e7d7      	b.n	80049e8 <_puts_r+0x3c>
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 f857 	bl	8004aee <__swbuf_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d1e7      	bne.n	8004a14 <_puts_r+0x68>
 8004a44:	e7ce      	b.n	80049e4 <_puts_r+0x38>
 8004a46:	3e01      	subs	r6, #1
 8004a48:	e7e4      	b.n	8004a14 <_puts_r+0x68>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	6022      	str	r2, [r4, #0]
 8004a50:	220a      	movs	r2, #10
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e7ee      	b.n	8004a34 <_puts_r+0x88>
	...

08004a58 <puts>:
 8004a58:	4b02      	ldr	r3, [pc, #8]	@ (8004a64 <puts+0xc>)
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f7ff bfa5 	b.w	80049ac <_puts_r>
 8004a62:	bf00      	nop
 8004a64:	20000018 	.word	0x20000018

08004a68 <__sread>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a70:	f000 f8fc 	bl	8004c6c <_read_r>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	bfab      	itete	ge
 8004a78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a7c:	181b      	addge	r3, r3, r0
 8004a7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a82:	bfac      	ite	ge
 8004a84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a86:	81a3      	strhlt	r3, [r4, #12]
 8004a88:	bd10      	pop	{r4, pc}

08004a8a <__swrite>:
 8004a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	461f      	mov	r7, r3
 8004a90:	898b      	ldrh	r3, [r1, #12]
 8004a92:	05db      	lsls	r3, r3, #23
 8004a94:	4605      	mov	r5, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	4616      	mov	r6, r2
 8004a9a:	d505      	bpl.n	8004aa8 <__swrite+0x1e>
 8004a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f000 f8d0 	bl	8004c48 <_lseek_r>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	4628      	mov	r0, r5
 8004aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004abe:	f000 b8e7 	b.w	8004c90 <_write_r>

08004ac2 <__sseek>:
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aca:	f000 f8bd 	bl	8004c48 <_lseek_r>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	bf15      	itete	ne
 8004ad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ade:	81a3      	strheq	r3, [r4, #12]
 8004ae0:	bf18      	it	ne
 8004ae2:	81a3      	strhne	r3, [r4, #12]
 8004ae4:	bd10      	pop	{r4, pc}

08004ae6 <__sclose>:
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 b89d 	b.w	8004c28 <_close_r>

08004aee <__swbuf_r>:
 8004aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af0:	460e      	mov	r6, r1
 8004af2:	4614      	mov	r4, r2
 8004af4:	4605      	mov	r5, r0
 8004af6:	b118      	cbz	r0, 8004b00 <__swbuf_r+0x12>
 8004af8:	6a03      	ldr	r3, [r0, #32]
 8004afa:	b90b      	cbnz	r3, 8004b00 <__swbuf_r+0x12>
 8004afc:	f7ff ff20 	bl	8004940 <__sinit>
 8004b00:	69a3      	ldr	r3, [r4, #24]
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	071a      	lsls	r2, r3, #28
 8004b08:	d501      	bpl.n	8004b0e <__swbuf_r+0x20>
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	b943      	cbnz	r3, 8004b20 <__swbuf_r+0x32>
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 f82b 	bl	8004b6c <__swsetup_r>
 8004b16:	b118      	cbz	r0, 8004b20 <__swbuf_r+0x32>
 8004b18:	f04f 37ff 	mov.w	r7, #4294967295
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	6922      	ldr	r2, [r4, #16]
 8004b24:	1a98      	subs	r0, r3, r2
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	b2f6      	uxtb	r6, r6
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	4637      	mov	r7, r6
 8004b2e:	dc05      	bgt.n	8004b3c <__swbuf_r+0x4e>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fa68 	bl	8005008 <_fflush_r>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1ed      	bne.n	8004b18 <__swbuf_r+0x2a>
 8004b3c:	68a3      	ldr	r3, [r4, #8]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	701e      	strb	r6, [r3, #0]
 8004b4a:	6962      	ldr	r2, [r4, #20]
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d004      	beq.n	8004b5c <__swbuf_r+0x6e>
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d5e1      	bpl.n	8004b1c <__swbuf_r+0x2e>
 8004b58:	2e0a      	cmp	r6, #10
 8004b5a:	d1df      	bne.n	8004b1c <__swbuf_r+0x2e>
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fa52 	bl	8005008 <_fflush_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0d9      	beq.n	8004b1c <__swbuf_r+0x2e>
 8004b68:	e7d6      	b.n	8004b18 <__swbuf_r+0x2a>
	...

08004b6c <__swsetup_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4b29      	ldr	r3, [pc, #164]	@ (8004c14 <__swsetup_r+0xa8>)
 8004b70:	4605      	mov	r5, r0
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	460c      	mov	r4, r1
 8004b76:	b118      	cbz	r0, 8004b80 <__swsetup_r+0x14>
 8004b78:	6a03      	ldr	r3, [r0, #32]
 8004b7a:	b90b      	cbnz	r3, 8004b80 <__swsetup_r+0x14>
 8004b7c:	f7ff fee0 	bl	8004940 <__sinit>
 8004b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b84:	0719      	lsls	r1, r3, #28
 8004b86:	d422      	bmi.n	8004bce <__swsetup_r+0x62>
 8004b88:	06da      	lsls	r2, r3, #27
 8004b8a:	d407      	bmi.n	8004b9c <__swsetup_r+0x30>
 8004b8c:	2209      	movs	r2, #9
 8004b8e:	602a      	str	r2, [r5, #0]
 8004b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	e033      	b.n	8004c04 <__swsetup_r+0x98>
 8004b9c:	0758      	lsls	r0, r3, #29
 8004b9e:	d512      	bpl.n	8004bc6 <__swsetup_r+0x5a>
 8004ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ba2:	b141      	cbz	r1, 8004bb6 <__swsetup_r+0x4a>
 8004ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	d002      	beq.n	8004bb2 <__swsetup_r+0x46>
 8004bac:	4628      	mov	r0, r5
 8004bae:	f000 f8af 	bl	8004d10 <_free_r>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6063      	str	r3, [r4, #4]
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f043 0308 	orr.w	r3, r3, #8
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	b94b      	cbnz	r3, 8004be6 <__swsetup_r+0x7a>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bdc:	d003      	beq.n	8004be6 <__swsetup_r+0x7a>
 8004bde:	4621      	mov	r1, r4
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 fa5f 	bl	80050a4 <__smakebuf_r>
 8004be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bea:	f013 0201 	ands.w	r2, r3, #1
 8004bee:	d00a      	beq.n	8004c06 <__swsetup_r+0x9a>
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	60a2      	str	r2, [r4, #8]
 8004bf4:	6962      	ldr	r2, [r4, #20]
 8004bf6:	4252      	negs	r2, r2
 8004bf8:	61a2      	str	r2, [r4, #24]
 8004bfa:	6922      	ldr	r2, [r4, #16]
 8004bfc:	b942      	cbnz	r2, 8004c10 <__swsetup_r+0xa4>
 8004bfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c02:	d1c5      	bne.n	8004b90 <__swsetup_r+0x24>
 8004c04:	bd38      	pop	{r3, r4, r5, pc}
 8004c06:	0799      	lsls	r1, r3, #30
 8004c08:	bf58      	it	pl
 8004c0a:	6962      	ldrpl	r2, [r4, #20]
 8004c0c:	60a2      	str	r2, [r4, #8]
 8004c0e:	e7f4      	b.n	8004bfa <__swsetup_r+0x8e>
 8004c10:	2000      	movs	r0, #0
 8004c12:	e7f7      	b.n	8004c04 <__swsetup_r+0x98>
 8004c14:	20000018 	.word	0x20000018

08004c18 <memset>:
 8004c18:	4402      	add	r2, r0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	f803 1b01 	strb.w	r1, [r3], #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <_close_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d06      	ldr	r5, [pc, #24]	@ (8004c44 <_close_r+0x1c>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fc fa69 	bl	800110a <_close>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_close_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_close_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	20000388 	.word	0x20000388

08004c48 <_lseek_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	@ (8004c68 <_lseek_r+0x20>)
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4608      	mov	r0, r1
 8004c50:	4611      	mov	r1, r2
 8004c52:	2200      	movs	r2, #0
 8004c54:	602a      	str	r2, [r5, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f7fc fa7e 	bl	8001158 <_lseek>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_lseek_r+0x1e>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_lseek_r+0x1e>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	20000388 	.word	0x20000388

08004c6c <_read_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4d07      	ldr	r5, [pc, #28]	@ (8004c8c <_read_r+0x20>)
 8004c70:	4604      	mov	r4, r0
 8004c72:	4608      	mov	r0, r1
 8004c74:	4611      	mov	r1, r2
 8004c76:	2200      	movs	r2, #0
 8004c78:	602a      	str	r2, [r5, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f7fc fa0c 	bl	8001098 <_read>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_read_r+0x1e>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_read_r+0x1e>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	20000388 	.word	0x20000388

08004c90 <_write_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d07      	ldr	r5, [pc, #28]	@ (8004cb0 <_write_r+0x20>)
 8004c94:	4604      	mov	r4, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fc fa17 	bl	80010d2 <_write>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_write_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_write_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20000388 	.word	0x20000388

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	@ (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000018 	.word	0x20000018

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 fa54 	bl	8005180 <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08005c34 	.word	0x08005c34
 8004cfc:	08005c34 	.word	0x08005c34
 8004d00:	08005c34 	.word	0x08005c34
 8004d04:	08005c38 	.word	0x08005c38

08004d08 <__retarget_lock_init_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <__retarget_lock_acquire_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <__retarget_lock_release_recursive>:
 8004d0c:	4770      	bx	lr
	...

08004d10 <_free_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4605      	mov	r5, r0
 8004d14:	2900      	cmp	r1, #0
 8004d16:	d041      	beq.n	8004d9c <_free_r+0x8c>
 8004d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1c:	1f0c      	subs	r4, r1, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bfb8      	it	lt
 8004d22:	18e4      	addlt	r4, r4, r3
 8004d24:	f000 f8e0 	bl	8004ee8 <__malloc_lock>
 8004d28:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <_free_r+0x90>)
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	b933      	cbnz	r3, 8004d3c <_free_r+0x2c>
 8004d2e:	6063      	str	r3, [r4, #4]
 8004d30:	6014      	str	r4, [r2, #0]
 8004d32:	4628      	mov	r0, r5
 8004d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d38:	f000 b8dc 	b.w	8004ef4 <__malloc_unlock>
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	d908      	bls.n	8004d52 <_free_r+0x42>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428b      	cmp	r3, r1
 8004d46:	bf01      	itttt	eq
 8004d48:	6819      	ldreq	r1, [r3, #0]
 8004d4a:	685b      	ldreq	r3, [r3, #4]
 8004d4c:	1809      	addeq	r1, r1, r0
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	e7ed      	b.n	8004d2e <_free_r+0x1e>
 8004d52:	461a      	mov	r2, r3
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	b10b      	cbz	r3, 8004d5c <_free_r+0x4c>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d9fa      	bls.n	8004d52 <_free_r+0x42>
 8004d5c:	6811      	ldr	r1, [r2, #0]
 8004d5e:	1850      	adds	r0, r2, r1
 8004d60:	42a0      	cmp	r0, r4
 8004d62:	d10b      	bne.n	8004d7c <_free_r+0x6c>
 8004d64:	6820      	ldr	r0, [r4, #0]
 8004d66:	4401      	add	r1, r0
 8004d68:	1850      	adds	r0, r2, r1
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	d1e0      	bne.n	8004d32 <_free_r+0x22>
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	6053      	str	r3, [r2, #4]
 8004d76:	4408      	add	r0, r1
 8004d78:	6010      	str	r0, [r2, #0]
 8004d7a:	e7da      	b.n	8004d32 <_free_r+0x22>
 8004d7c:	d902      	bls.n	8004d84 <_free_r+0x74>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	602b      	str	r3, [r5, #0]
 8004d82:	e7d6      	b.n	8004d32 <_free_r+0x22>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	1821      	adds	r1, r4, r0
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	bf04      	itt	eq
 8004d8c:	6819      	ldreq	r1, [r3, #0]
 8004d8e:	685b      	ldreq	r3, [r3, #4]
 8004d90:	6063      	str	r3, [r4, #4]
 8004d92:	bf04      	itt	eq
 8004d94:	1809      	addeq	r1, r1, r0
 8004d96:	6021      	streq	r1, [r4, #0]
 8004d98:	6054      	str	r4, [r2, #4]
 8004d9a:	e7ca      	b.n	8004d32 <_free_r+0x22>
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000394 	.word	0x20000394

08004da4 <sbrk_aligned>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	4e0f      	ldr	r6, [pc, #60]	@ (8004de4 <sbrk_aligned+0x40>)
 8004da8:	460c      	mov	r4, r1
 8004daa:	6831      	ldr	r1, [r6, #0]
 8004dac:	4605      	mov	r5, r0
 8004dae:	b911      	cbnz	r1, 8004db6 <sbrk_aligned+0x12>
 8004db0:	f000 f9d6 	bl	8005160 <_sbrk_r>
 8004db4:	6030      	str	r0, [r6, #0]
 8004db6:	4621      	mov	r1, r4
 8004db8:	4628      	mov	r0, r5
 8004dba:	f000 f9d1 	bl	8005160 <_sbrk_r>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	d103      	bne.n	8004dca <sbrk_aligned+0x26>
 8004dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	bd70      	pop	{r4, r5, r6, pc}
 8004dca:	1cc4      	adds	r4, r0, #3
 8004dcc:	f024 0403 	bic.w	r4, r4, #3
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d0f8      	beq.n	8004dc6 <sbrk_aligned+0x22>
 8004dd4:	1a21      	subs	r1, r4, r0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 f9c2 	bl	8005160 <_sbrk_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d1f2      	bne.n	8004dc6 <sbrk_aligned+0x22>
 8004de0:	e7ef      	b.n	8004dc2 <sbrk_aligned+0x1e>
 8004de2:	bf00      	nop
 8004de4:	20000390 	.word	0x20000390

08004de8 <_malloc_r>:
 8004de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dec:	1ccd      	adds	r5, r1, #3
 8004dee:	f025 0503 	bic.w	r5, r5, #3
 8004df2:	3508      	adds	r5, #8
 8004df4:	2d0c      	cmp	r5, #12
 8004df6:	bf38      	it	cc
 8004df8:	250c      	movcc	r5, #12
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	db01      	blt.n	8004e04 <_malloc_r+0x1c>
 8004e00:	42a9      	cmp	r1, r5
 8004e02:	d904      	bls.n	8004e0e <_malloc_r+0x26>
 8004e04:	230c      	movs	r3, #12
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ee4 <_malloc_r+0xfc>
 8004e12:	f000 f869 	bl	8004ee8 <__malloc_lock>
 8004e16:	f8d8 3000 	ldr.w	r3, [r8]
 8004e1a:	461c      	mov	r4, r3
 8004e1c:	bb44      	cbnz	r4, 8004e70 <_malloc_r+0x88>
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4630      	mov	r0, r6
 8004e22:	f7ff ffbf 	bl	8004da4 <sbrk_aligned>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	4604      	mov	r4, r0
 8004e2a:	d158      	bne.n	8004ede <_malloc_r+0xf6>
 8004e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e30:	4627      	mov	r7, r4
 8004e32:	2f00      	cmp	r7, #0
 8004e34:	d143      	bne.n	8004ebe <_malloc_r+0xd6>
 8004e36:	2c00      	cmp	r4, #0
 8004e38:	d04b      	beq.n	8004ed2 <_malloc_r+0xea>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	4630      	mov	r0, r6
 8004e40:	eb04 0903 	add.w	r9, r4, r3
 8004e44:	f000 f98c 	bl	8005160 <_sbrk_r>
 8004e48:	4581      	cmp	r9, r0
 8004e4a:	d142      	bne.n	8004ed2 <_malloc_r+0xea>
 8004e4c:	6821      	ldr	r1, [r4, #0]
 8004e4e:	1a6d      	subs	r5, r5, r1
 8004e50:	4629      	mov	r1, r5
 8004e52:	4630      	mov	r0, r6
 8004e54:	f7ff ffa6 	bl	8004da4 <sbrk_aligned>
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d03a      	beq.n	8004ed2 <_malloc_r+0xea>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	442b      	add	r3, r5
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	f8d8 3000 	ldr.w	r3, [r8]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	bb62      	cbnz	r2, 8004ec4 <_malloc_r+0xdc>
 8004e6a:	f8c8 7000 	str.w	r7, [r8]
 8004e6e:	e00f      	b.n	8004e90 <_malloc_r+0xa8>
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	1b52      	subs	r2, r2, r5
 8004e74:	d420      	bmi.n	8004eb8 <_malloc_r+0xd0>
 8004e76:	2a0b      	cmp	r2, #11
 8004e78:	d917      	bls.n	8004eaa <_malloc_r+0xc2>
 8004e7a:	1961      	adds	r1, r4, r5
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	6025      	str	r5, [r4, #0]
 8004e80:	bf18      	it	ne
 8004e82:	6059      	strne	r1, [r3, #4]
 8004e84:	6863      	ldr	r3, [r4, #4]
 8004e86:	bf08      	it	eq
 8004e88:	f8c8 1000 	streq.w	r1, [r8]
 8004e8c:	5162      	str	r2, [r4, r5]
 8004e8e:	604b      	str	r3, [r1, #4]
 8004e90:	4630      	mov	r0, r6
 8004e92:	f000 f82f 	bl	8004ef4 <__malloc_unlock>
 8004e96:	f104 000b 	add.w	r0, r4, #11
 8004e9a:	1d23      	adds	r3, r4, #4
 8004e9c:	f020 0007 	bic.w	r0, r0, #7
 8004ea0:	1ac2      	subs	r2, r0, r3
 8004ea2:	bf1c      	itt	ne
 8004ea4:	1a1b      	subne	r3, r3, r0
 8004ea6:	50a3      	strne	r3, [r4, r2]
 8004ea8:	e7af      	b.n	8004e0a <_malloc_r+0x22>
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	bf0c      	ite	eq
 8004eb0:	f8c8 2000 	streq.w	r2, [r8]
 8004eb4:	605a      	strne	r2, [r3, #4]
 8004eb6:	e7eb      	b.n	8004e90 <_malloc_r+0xa8>
 8004eb8:	4623      	mov	r3, r4
 8004eba:	6864      	ldr	r4, [r4, #4]
 8004ebc:	e7ae      	b.n	8004e1c <_malloc_r+0x34>
 8004ebe:	463c      	mov	r4, r7
 8004ec0:	687f      	ldr	r7, [r7, #4]
 8004ec2:	e7b6      	b.n	8004e32 <_malloc_r+0x4a>
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d1fb      	bne.n	8004ec4 <_malloc_r+0xdc>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6053      	str	r3, [r2, #4]
 8004ed0:	e7de      	b.n	8004e90 <_malloc_r+0xa8>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f80c 	bl	8004ef4 <__malloc_unlock>
 8004edc:	e794      	b.n	8004e08 <_malloc_r+0x20>
 8004ede:	6005      	str	r5, [r0, #0]
 8004ee0:	e7d6      	b.n	8004e90 <_malloc_r+0xa8>
 8004ee2:	bf00      	nop
 8004ee4:	20000394 	.word	0x20000394

08004ee8 <__malloc_lock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	@ (8004ef0 <__malloc_lock+0x8>)
 8004eea:	f7ff bf0e 	b.w	8004d0a <__retarget_lock_acquire_recursive>
 8004eee:	bf00      	nop
 8004ef0:	2000038c 	.word	0x2000038c

08004ef4 <__malloc_unlock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__malloc_unlock+0x8>)
 8004ef6:	f7ff bf09 	b.w	8004d0c <__retarget_lock_release_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000038c 	.word	0x2000038c

08004f00 <__sflush_r>:
 8004f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f08:	0716      	lsls	r6, r2, #28
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	d454      	bmi.n	8004fba <__sflush_r+0xba>
 8004f10:	684b      	ldr	r3, [r1, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc02      	bgt.n	8004f1c <__sflush_r+0x1c>
 8004f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dd48      	ble.n	8004fae <__sflush_r+0xae>
 8004f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d045      	beq.n	8004fae <__sflush_r+0xae>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f28:	682f      	ldr	r7, [r5, #0]
 8004f2a:	6a21      	ldr	r1, [r4, #32]
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	d030      	beq.n	8004f92 <__sflush_r+0x92>
 8004f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	0759      	lsls	r1, r3, #29
 8004f36:	d505      	bpl.n	8004f44 <__sflush_r+0x44>
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f3e:	b10b      	cbz	r3, 8004f44 <__sflush_r+0x44>
 8004f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f48:	6a21      	ldr	r1, [r4, #32]
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b0      	blx	r6
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	d106      	bne.n	8004f62 <__sflush_r+0x62>
 8004f54:	6829      	ldr	r1, [r5, #0]
 8004f56:	291d      	cmp	r1, #29
 8004f58:	d82b      	bhi.n	8004fb2 <__sflush_r+0xb2>
 8004f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005004 <__sflush_r+0x104>)
 8004f5c:	40ca      	lsrs	r2, r1
 8004f5e:	07d6      	lsls	r6, r2, #31
 8004f60:	d527      	bpl.n	8004fb2 <__sflush_r+0xb2>
 8004f62:	2200      	movs	r2, #0
 8004f64:	6062      	str	r2, [r4, #4]
 8004f66:	04d9      	lsls	r1, r3, #19
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	d504      	bpl.n	8004f78 <__sflush_r+0x78>
 8004f6e:	1c42      	adds	r2, r0, #1
 8004f70:	d101      	bne.n	8004f76 <__sflush_r+0x76>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	b903      	cbnz	r3, 8004f78 <__sflush_r+0x78>
 8004f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f7a:	602f      	str	r7, [r5, #0]
 8004f7c:	b1b9      	cbz	r1, 8004fae <__sflush_r+0xae>
 8004f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f82:	4299      	cmp	r1, r3
 8004f84:	d002      	beq.n	8004f8c <__sflush_r+0x8c>
 8004f86:	4628      	mov	r0, r5
 8004f88:	f7ff fec2 	bl	8004d10 <_free_r>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f90:	e00d      	b.n	8004fae <__sflush_r+0xae>
 8004f92:	2301      	movs	r3, #1
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b0      	blx	r6
 8004f98:	4602      	mov	r2, r0
 8004f9a:	1c50      	adds	r0, r2, #1
 8004f9c:	d1c9      	bne.n	8004f32 <__sflush_r+0x32>
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0c6      	beq.n	8004f32 <__sflush_r+0x32>
 8004fa4:	2b1d      	cmp	r3, #29
 8004fa6:	d001      	beq.n	8004fac <__sflush_r+0xac>
 8004fa8:	2b16      	cmp	r3, #22
 8004faa:	d11e      	bne.n	8004fea <__sflush_r+0xea>
 8004fac:	602f      	str	r7, [r5, #0]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e022      	b.n	8004ff8 <__sflush_r+0xf8>
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb6:	b21b      	sxth	r3, r3
 8004fb8:	e01b      	b.n	8004ff2 <__sflush_r+0xf2>
 8004fba:	690f      	ldr	r7, [r1, #16]
 8004fbc:	2f00      	cmp	r7, #0
 8004fbe:	d0f6      	beq.n	8004fae <__sflush_r+0xae>
 8004fc0:	0793      	lsls	r3, r2, #30
 8004fc2:	680e      	ldr	r6, [r1, #0]
 8004fc4:	bf08      	it	eq
 8004fc6:	694b      	ldreq	r3, [r1, #20]
 8004fc8:	600f      	str	r7, [r1, #0]
 8004fca:	bf18      	it	ne
 8004fcc:	2300      	movne	r3, #0
 8004fce:	eba6 0807 	sub.w	r8, r6, r7
 8004fd2:	608b      	str	r3, [r1, #8]
 8004fd4:	f1b8 0f00 	cmp.w	r8, #0
 8004fd8:	dde9      	ble.n	8004fae <__sflush_r+0xae>
 8004fda:	6a21      	ldr	r1, [r4, #32]
 8004fdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004fde:	4643      	mov	r3, r8
 8004fe0:	463a      	mov	r2, r7
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b0      	blx	r6
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	dc08      	bgt.n	8004ffc <__sflush_r+0xfc>
 8004fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ffc:	4407      	add	r7, r0
 8004ffe:	eba8 0800 	sub.w	r8, r8, r0
 8005002:	e7e7      	b.n	8004fd4 <__sflush_r+0xd4>
 8005004:	20400001 	.word	0x20400001

08005008 <_fflush_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b913      	cbnz	r3, 8005018 <_fflush_r+0x10>
 8005012:	2500      	movs	r5, #0
 8005014:	4628      	mov	r0, r5
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	b118      	cbz	r0, 8005022 <_fflush_r+0x1a>
 800501a:	6a03      	ldr	r3, [r0, #32]
 800501c:	b90b      	cbnz	r3, 8005022 <_fflush_r+0x1a>
 800501e:	f7ff fc8f 	bl	8004940 <__sinit>
 8005022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f3      	beq.n	8005012 <_fflush_r+0xa>
 800502a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800502c:	07d0      	lsls	r0, r2, #31
 800502e:	d404      	bmi.n	800503a <_fflush_r+0x32>
 8005030:	0599      	lsls	r1, r3, #22
 8005032:	d402      	bmi.n	800503a <_fflush_r+0x32>
 8005034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005036:	f7ff fe68 	bl	8004d0a <__retarget_lock_acquire_recursive>
 800503a:	4628      	mov	r0, r5
 800503c:	4621      	mov	r1, r4
 800503e:	f7ff ff5f 	bl	8004f00 <__sflush_r>
 8005042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005044:	07da      	lsls	r2, r3, #31
 8005046:	4605      	mov	r5, r0
 8005048:	d4e4      	bmi.n	8005014 <_fflush_r+0xc>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	059b      	lsls	r3, r3, #22
 800504e:	d4e1      	bmi.n	8005014 <_fflush_r+0xc>
 8005050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005052:	f7ff fe5b 	bl	8004d0c <__retarget_lock_release_recursive>
 8005056:	e7dd      	b.n	8005014 <_fflush_r+0xc>

08005058 <__swhatbuf_r>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	460c      	mov	r4, r1
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	2900      	cmp	r1, #0
 8005062:	b096      	sub	sp, #88	@ 0x58
 8005064:	4615      	mov	r5, r2
 8005066:	461e      	mov	r6, r3
 8005068:	da0d      	bge.n	8005086 <__swhatbuf_r+0x2e>
 800506a:	89a3      	ldrh	r3, [r4, #12]
 800506c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005070:	f04f 0100 	mov.w	r1, #0
 8005074:	bf14      	ite	ne
 8005076:	2340      	movne	r3, #64	@ 0x40
 8005078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800507c:	2000      	movs	r0, #0
 800507e:	6031      	str	r1, [r6, #0]
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	b016      	add	sp, #88	@ 0x58
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	466a      	mov	r2, sp
 8005088:	f000 f848 	bl	800511c <_fstat_r>
 800508c:	2800      	cmp	r0, #0
 800508e:	dbec      	blt.n	800506a <__swhatbuf_r+0x12>
 8005090:	9901      	ldr	r1, [sp, #4]
 8005092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800509a:	4259      	negs	r1, r3
 800509c:	4159      	adcs	r1, r3
 800509e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050a2:	e7eb      	b.n	800507c <__swhatbuf_r+0x24>

080050a4 <__smakebuf_r>:
 80050a4:	898b      	ldrh	r3, [r1, #12]
 80050a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a8:	079d      	lsls	r5, r3, #30
 80050aa:	4606      	mov	r6, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d507      	bpl.n	80050c0 <__smakebuf_r+0x1c>
 80050b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	2301      	movs	r3, #1
 80050ba:	6163      	str	r3, [r4, #20]
 80050bc:	b003      	add	sp, #12
 80050be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c0:	ab01      	add	r3, sp, #4
 80050c2:	466a      	mov	r2, sp
 80050c4:	f7ff ffc8 	bl	8005058 <__swhatbuf_r>
 80050c8:	9f00      	ldr	r7, [sp, #0]
 80050ca:	4605      	mov	r5, r0
 80050cc:	4639      	mov	r1, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff fe8a 	bl	8004de8 <_malloc_r>
 80050d4:	b948      	cbnz	r0, 80050ea <__smakebuf_r+0x46>
 80050d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050da:	059a      	lsls	r2, r3, #22
 80050dc:	d4ee      	bmi.n	80050bc <__smakebuf_r+0x18>
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	e7e2      	b.n	80050b0 <__smakebuf_r+0xc>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	6020      	str	r0, [r4, #0]
 80050ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	9b01      	ldr	r3, [sp, #4]
 80050f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050fa:	b15b      	cbz	r3, 8005114 <__smakebuf_r+0x70>
 80050fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f81d 	bl	8005140 <_isatty_r>
 8005106:	b128      	cbz	r0, 8005114 <__smakebuf_r+0x70>
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	431d      	orrs	r5, r3
 8005118:	81a5      	strh	r5, [r4, #12]
 800511a:	e7cf      	b.n	80050bc <__smakebuf_r+0x18>

0800511c <_fstat_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d07      	ldr	r5, [pc, #28]	@ (800513c <_fstat_r+0x20>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	4611      	mov	r1, r2
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	f7fb fffa 	bl	8001122 <_fstat>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	d102      	bne.n	8005138 <_fstat_r+0x1c>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	b103      	cbz	r3, 8005138 <_fstat_r+0x1c>
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	bd38      	pop	{r3, r4, r5, pc}
 800513a:	bf00      	nop
 800513c:	20000388 	.word	0x20000388

08005140 <_isatty_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	@ (800515c <_isatty_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fb fff9 	bl	8001142 <_isatty>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_isatty_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_isatty_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000388 	.word	0x20000388

08005160 <_sbrk_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d06      	ldr	r5, [pc, #24]	@ (800517c <_sbrk_r+0x1c>)
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	602b      	str	r3, [r5, #0]
 800516c:	f7fc f802 	bl	8001174 <_sbrk>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_sbrk_r+0x1a>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_sbrk_r+0x1a>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	20000388 	.word	0x20000388

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
