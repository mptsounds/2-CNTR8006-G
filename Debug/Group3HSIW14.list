
Group3HSIW14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001374  08009fe0  08009fe0  0000afe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b354  0800b354  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b35c  0800b35c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b35c  0800b35c  0000c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b360  0800b360  0000c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b364  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001d4  0800b538  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800b538  0000d49c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013365  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003202  00000000  00000000  00020569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00023770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcd  00000000  00000000  00024950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001999b  00000000  00000000  0002571d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167fc  00000000  00000000  0003f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f2b3  00000000  00000000  000558b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4b67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f54  00000000  00000000  000f4bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fc4 	.word	0x08009fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009fc4 	.word	0x08009fc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <DWT_Delay_Init+0x58>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <DWT_Delay_Init+0x58>)
 800103a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800103e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <DWT_Delay_Init+0x58>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <DWT_Delay_Init+0x58>)
 8001046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800104a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <DWT_Delay_Init+0x5c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <DWT_Delay_Init+0x5c>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <DWT_Delay_Init+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <DWT_Delay_Init+0x5c>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <DWT_Delay_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800106a:	bf00      	nop
     __ASM volatile ("NOP");
 800106c:	bf00      	nop
  __ASM volatile ("NOP");
 800106e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <DWT_Delay_Init+0x5c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001078:	2300      	movs	r3, #0
 800107a:	e000      	b.n	800107e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800107c:	2301      	movs	r3, #1
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000edf0 	.word	0xe000edf0
 800108c:	e0001000 	.word	0xe0001000

08001090 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <delay+0x40>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800109e:	f003 f9bd 	bl	800441c <HAL_RCC_GetHCLKFreq>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <delay+0x44>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80010b4:	bf00      	nop
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <delay+0x40>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad2      	subs	r2, r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3f8      	bcc.n	80010b6 <delay+0x26>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e0001000 	.word	0xe0001000
 80010d4:	431bde83 	.word	0x431bde83

080010d8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f002 fb6e 	bl	80037e8 <HAL_GPIO_Init>
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f002 fb50 	bl	80037e8 <HAL_GPIO_Init>
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <DHT_Start>:


void DHT_Start (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001154:	f7ff ff6c 	bl	8001030 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001158:	2102      	movs	r1, #2
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <DHT_Start+0x40>)
 800115c:	f7ff ffbc 	bl	80010d8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	480a      	ldr	r0, [pc, #40]	@ (8001190 <DHT_Start+0x40>)
 8001166:	f002 fcdb 	bl	8003b20 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 800116a:	f244 6050 	movw	r0, #18000	@ 0x4650
 800116e:	f7ff ff8f 	bl	8001090 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001172:	2201      	movs	r2, #1
 8001174:	2102      	movs	r1, #2
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <DHT_Start+0x40>)
 8001178:	f002 fcd2 	bl	8003b20 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 800117c:	2014      	movs	r0, #20
 800117e:	f7ff ff87 	bl	8001090 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001182:	2102      	movs	r1, #2
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <DHT_Start+0x40>)
 8001186:	f7ff ffc5 	bl	8001114 <Set_Pin_Input>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800119e:	2028      	movs	r0, #40	@ 0x28
 80011a0:	f7ff ff76 	bl	8001090 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80011a4:	2102      	movs	r1, #2
 80011a6:	4811      	ldr	r0, [pc, #68]	@ (80011ec <DHT_Check_Response+0x58>)
 80011a8:	f002 fca2 	bl	8003af0 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80011b2:	2050      	movs	r0, #80	@ 0x50
 80011b4:	f7ff ff6c 	bl	8001090 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80011b8:	2102      	movs	r1, #2
 80011ba:	480c      	ldr	r0, [pc, #48]	@ (80011ec <DHT_Check_Response+0x58>)
 80011bc:	f002 fc98 	bl	8003af0 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <DHT_Check_Response+0x38>
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <DHT_Check_Response+0x3c>
		else Response = -1;
 80011cc:	23ff      	movs	r3, #255	@ 0xff
 80011ce:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80011d0:	bf00      	nop
 80011d2:	2102      	movs	r1, #2
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <DHT_Check_Response+0x58>)
 80011d6:	f002 fc8b 	bl	8003af0 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f8      	bne.n	80011d2 <DHT_Check_Response+0x3e>

	return Response;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000

080011f0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	71bb      	strb	r3, [r7, #6]
 80011fa:	e037      	b.n	800126c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80011fc:	bf00      	nop
 80011fe:	2102      	movs	r1, #2
 8001200:	481e      	ldr	r0, [pc, #120]	@ (800127c <DHT_Read+0x8c>)
 8001202:	f002 fc75 	bl	8003af0 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f8      	beq.n	80011fe <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f7ff ff3f 	bl	8001090 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001212:	2102      	movs	r1, #2
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <DHT_Read+0x8c>)
 8001216:	f002 fc6b 	bl	8003af0 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10e      	bne.n	800123e <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2201      	movs	r2, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	b25b      	sxtb	r3, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	4013      	ands	r3, r2
 8001238:	b25b      	sxtb	r3, r3
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	e00b      	b.n	8001256 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	f1c3 0307 	rsb	r3, r3, #7
 8001244:	2201      	movs	r2, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	b25a      	sxtb	r2, r3
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4313      	orrs	r3, r2
 8001252:	b25b      	sxtb	r3, r3
 8001254:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001256:	bf00      	nop
 8001258:	2102      	movs	r1, #2
 800125a:	4808      	ldr	r0, [pc, #32]	@ (800127c <DHT_Read+0x8c>)
 800125c:	f002 fc48 	bl	8003af0 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f8      	bne.n	8001258 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	3301      	adds	r3, #1
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b07      	cmp	r3, #7
 8001270:	d9c4      	bls.n	80011fc <DHT_Read+0xc>
	}
	return i;
 8001272:	79fb      	ldrb	r3, [r7, #7]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020000 	.word	0x40020000

08001280 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001288:	f7ff ff62 	bl	8001150 <DHT_Start>
	Presence = DHT_Check_Response ();
 800128c:	f7ff ff82 	bl	8001194 <DHT_Check_Response>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <DHT_GetData+0xa4>)
 8001296:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001298:	f7ff ffaa 	bl	80011f0 <DHT_Read>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <DHT_GetData+0xa8>)
 80012a2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80012a4:	f7ff ffa4 	bl	80011f0 <DHT_Read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <DHT_GetData+0xac>)
 80012ae:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80012b0:	f7ff ff9e 	bl	80011f0 <DHT_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <DHT_GetData+0xb0>)
 80012ba:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80012bc:	f7ff ff98 	bl	80011f0 <DHT_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <DHT_GetData+0xb4>)
 80012c6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80012c8:	f7ff ff92 	bl	80011f0 <DHT_Read>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <DHT_GetData+0xb8>)
 80012d2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <DHT_GetData+0xb8>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <DHT_GetData+0xa8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <DHT_GetData+0xac>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <DHT_GetData+0xb0>)
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <DHT_GetData+0xb4>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d111      	bne.n	800131a <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <DHT_GetData+0xb0>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <DHT_GetData+0xa8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001f6 	.word	0x200001f6
 8001328:	200001f0 	.word	0x200001f0
 800132c:	200001f1 	.word	0x200001f1
 8001330:	200001f2 	.word	0x200001f2
 8001334:	200001f3 	.word	0x200001f3
 8001338:	200001f4 	.word	0x200001f4

0800133c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134e:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001350:	4a2f      	ldr	r2, [pc, #188]	@ (8001410 <MX_ADC1_Init+0xd4>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001356:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800135a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <MX_ADC1_Init+0xd0>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001364:	2201      	movs	r2, #1
 8001366:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <MX_ADC1_Init+0xd0>)
 800136a:	2201      	movs	r2, #1
 800136c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136e:	4b27      	ldr	r3, [pc, #156]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_ADC1_Init+0xd0>)
 800137e:	4a25      	ldr	r2, [pc, #148]	@ (8001414 <MX_ADC1_Init+0xd8>)
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_ADC1_Init+0xd0>)
 800138a:	2203      	movs	r2, #3
 800138c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001398:	2201      	movs	r2, #1
 800139a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139c:	481b      	ldr	r0, [pc, #108]	@ (800140c <MX_ADC1_Init+0xd0>)
 800139e:	f001 fb33 	bl	8002a08 <HAL_ADC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a8:	f000 fd8a 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ac:	230a      	movs	r3, #10
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <MX_ADC1_Init+0xd0>)
 80013be:	f001 fec9 	bl	8003154 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c8:	f000 fd7a 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013cc:	230b      	movs	r3, #11
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_ADC1_Init+0xd0>)
 80013da:	f001 febb 	bl	8003154 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013e4:	f000 fd6c 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013e8:	230c      	movs	r3, #12
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013ec:	2303      	movs	r3, #3
 80013ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_ADC1_Init+0xd0>)
 80013f6:	f001 fead 	bl	8003154 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001400:	f000 fd5e 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200001f8 	.word	0x200001f8
 8001410:	40012000 	.word	0x40012000
 8001414:	0f000001 	.word	0x0f000001

08001418 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <HAL_ADC_MspInit+0x8c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12f      	bne.n	800149a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6453      	str	r3, [r2, #68]	@ 0x44
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ANALOG_IN_1_Pin|ANALOG_IN_2_Pin|ANALOG_IN_3_Pin;
 8001472:	2307      	movs	r3, #7
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <HAL_ADC_MspInit+0x94>)
 8001486:	f002 f9af 	bl	80037e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2012      	movs	r0, #18
 8001490:	f002 f973 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001494:	2012      	movs	r0, #18
 8001496:	f002 f98c 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012000 	.word	0x40012000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800

080014b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a42      	ldr	r2, [pc, #264]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a3b      	ldr	r2, [pc, #236]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <MX_GPIO_Init+0x128>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	4828      	ldr	r0, [pc, #160]	@ (80015dc <MX_GPIO_Init+0x12c>)
 800153c:	f002 faf0 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2107      	movs	r1, #7
 8001544:	4826      	ldr	r0, [pc, #152]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001546:	f002 faeb 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B0_Pin */
  GPIO_InitStruct.Pin = B0_Pin;
 800154a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001550:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B0_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4820      	ldr	r0, [pc, #128]	@ (80015e4 <MX_GPIO_Init+0x134>)
 8001562:	f002 f941 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001566:	2302      	movs	r3, #2
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4818      	ldr	r0, [pc, #96]	@ (80015dc <MX_GPIO_Init+0x12c>)
 800157a:	f002 f935 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOG_OUT_Pin */
  GPIO_InitStruct.Pin = ANALOG_OUT_Pin;
 800157e:	2310      	movs	r3, #16
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001582:	2303      	movs	r3, #3
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ANALOG_OUT_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4812      	ldr	r0, [pc, #72]	@ (80015dc <MX_GPIO_Init+0x12c>)
 8001592:	f002 f929 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8001596:	2320      	movs	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	@ (80015dc <MX_GPIO_Init+0x12c>)
 80015ae:	f002 f91b 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin|OLED_CS_Pin;
 80015b2:	2307      	movs	r3, #7
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80015ca:	f002 f90d 	bl	80037e8 <HAL_GPIO_Init>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800

080015e8 <printMenu>:
 *    for each option. Called when user selects an option amongst the
 *    ones below, or at startup.
 * PARAMETERS : void
 * RETURNS : void
 */
void printMenu (void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	printf("Choose a module to test:\n\r");
 80015ec:	480b      	ldr	r0, [pc, #44]	@ (800161c <printMenu+0x34>)
 80015ee:	f005 f85f 	bl	80066b0 <iprintf>
	printf("0: Show menu again\n\r");
 80015f2:	480b      	ldr	r0, [pc, #44]	@ (8001620 <printMenu+0x38>)
 80015f4:	f005 f85c 	bl	80066b0 <iprintf>
	printf("1: Test only DHT11\n\r");
 80015f8:	480a      	ldr	r0, [pc, #40]	@ (8001624 <printMenu+0x3c>)
 80015fa:	f005 f859 	bl	80066b0 <iprintf>
	printf("2: Test only OLED (SPI2)\n\r");
 80015fe:	480a      	ldr	r0, [pc, #40]	@ (8001628 <printMenu+0x40>)
 8001600:	f005 f856 	bl	80066b0 <iprintf>
	printf("3: Test only Solar panel (ADC1 CH1)\n\r");
 8001604:	4809      	ldr	r0, [pc, #36]	@ (800162c <printMenu+0x44>)
 8001606:	f005 f853 	bl	80066b0 <iprintf>
	printf("4: Test only ADC interrupt\n\r");
 800160a:	4809      	ldr	r0, [pc, #36]	@ (8001630 <printMenu+0x48>)
 800160c:	f005 f850 	bl	80066b0 <iprintf>
	printf("5: Evaluate mold risk\n\r");
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <printMenu+0x4c>)
 8001612:	f005 f84d 	bl	80066b0 <iprintf>
	return;
 8001616:	bf00      	nop
} // end of func
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	08009fe0 	.word	0x08009fe0
 8001620:	08009ffc 	.word	0x08009ffc
 8001624:	0800a014 	.word	0x0800a014
 8001628:	0800a02c 	.word	0x0800a02c
 800162c:	0800a048 	.word	0x0800a048
 8001630:	0800a070 	.word	0x0800a070
 8001634:	0800a090 	.word	0x0800a090

08001638 <hasElapsed>:
 *    uint32_t startTime : the reference start time (from HAL_GetTick())
 *    uint32_t duration  : how many milliseconds to wait
 * RETURNS :
 *    1 if time has elapsed, 0 otherwise
 */
uint8_t hasElapsed(uint32_t startTime, uint32_t duration) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	return (HAL_GetTick() - startTime >= duration);
 8001642:	f001 f9d5 	bl	80029f0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	bf94      	ite	ls
 8001652:	2301      	movls	r3, #1
 8001654:	2300      	movhi	r3, #0
 8001656:	b2db      	uxtb	r3, r3
} // end of func
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <runOledTest>:
 * FUNCTION : runOledTest
 * DESCRIPTION : Display a fixed string on the OLED
 * PARAMETERS : void
 * RETURNS : void
*/
void runOledTest (void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
	// Short description of the test
	printf("=== OLED Display Test ===\n\r");
 8001666:	480a      	ldr	r0, [pc, #40]	@ (8001690 <runOledTest+0x30>)
 8001668:	f005 f822 	bl	80066b0 <iprintf>
	printf("This test displays a fixed message on the OLED screen.\n\r");
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <runOledTest+0x34>)
 800166e:	f005 f81f 	bl	80066b0 <iprintf>

	const char *testString = {"Monica's OLED!"}; // the string
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <runOledTest+0x38>)
 8001674:	607b      	str	r3, [r7, #4]
	ssd1331_display_string(0, 0, testString, FONT_1206, WHITE); // don't need to think about string buffer here
 8001676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	230c      	movs	r3, #12
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	2100      	movs	r1, #0
 8001682:	2000      	movs	r0, #0
 8001684:	f000 fdc4 	bl	8002210 <ssd1331_display_string>
} // end of func
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	0800a0a8 	.word	0x0800a0a8
 8001694:	0800a0c4 	.word	0x0800a0c4
 8001698:	0800a100 	.word	0x0800a100

0800169c <runAdcTest>:
 *    and that the ADC is functioning. Values will be printed continuously.
 *    Type 'q' to quit the test and return to the main menu.
 * PARAMETERS : void
 * RETURNS : void
 */
void runAdcTest (void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
	// Short description of the test:
	printf("=== ADC Input Test ===\n\r");
 80016a2:	482c      	ldr	r0, [pc, #176]	@ (8001754 <runAdcTest+0xb8>)
 80016a4:	f005 f804 	bl	80066b0 <iprintf>
	printf("This test reads analog input from a potentiometer via ADC1.\n\r");
 80016a8:	482b      	ldr	r0, [pc, #172]	@ (8001758 <runAdcTest+0xbc>)
 80016aa:	f005 f801 	bl	80066b0 <iprintf>
	printf("Ensure the ADC source is connected to one of the ADC pins.\n\r");
 80016ae:	482b      	ldr	r0, [pc, #172]	@ (800175c <runAdcTest+0xc0>)
 80016b0:	f004 fffe 	bl	80066b0 <iprintf>
	printf("Type 'Y' to continue or any other key to cancel...\n\r");
 80016b4:	482a      	ldr	r0, [pc, #168]	@ (8001760 <runAdcTest+0xc4>)
 80016b6:	f004 fffb 	bl	80066b0 <iprintf>

	// Confirmation prompt:
	char confirm = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
	while (confirm == 0) {
 80016be:	e003      	b.n	80016c8 <runAdcTest+0x2c>
		confirm = GetCharFromUART2(); // wait for user input via VCP
 80016c0:	f001 f8dc 	bl	800287c <GetCharFromUART2>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	while (confirm == 0) {
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f8      	beq.n	80016c0 <runAdcTest+0x24>
	}

	if (confirm != 'Y' && confirm != 'y') {
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b59      	cmp	r3, #89	@ 0x59
 80016d2:	d006      	beq.n	80016e2 <runAdcTest+0x46>
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b79      	cmp	r3, #121	@ 0x79
 80016d8:	d003      	beq.n	80016e2 <runAdcTest+0x46>
		printf("Test aborted. Returning to main menu...\n\r");
 80016da:	4822      	ldr	r0, [pc, #136]	@ (8001764 <runAdcTest+0xc8>)
 80016dc:	f004 ffe8 	bl	80066b0 <iprintf>
		return;
 80016e0:	e034      	b.n	800174c <runAdcTest+0xb0>
	}

	uint32_t startTime = HAL_GetTick(); // non-blocking timer for read loop
 80016e2:	f001 f985 	bl	80029f0 <HAL_GetTick>
 80016e6:	60b8      	str	r0, [r7, #8]
	// Begin ADC read loop:
	printf("ADC test started. Type 'q' to quit.\n\r");
 80016e8:	481f      	ldr	r0, [pc, #124]	@ (8001768 <runAdcTest+0xcc>)
 80016ea:	f004 ffe1 	bl	80066b0 <iprintf>
	while (1) {
		char exitChar = GetCharFromUART2(); // allow exit via VCP
 80016ee:	f001 f8c5 	bl	800287c <GetCharFromUART2>
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
		if (exitChar == 'q' || exitChar == 'Q') {
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b71      	cmp	r3, #113	@ 0x71
 80016fa:	d002      	beq.n	8001702 <runAdcTest+0x66>
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b51      	cmp	r3, #81	@ 0x51
 8001700:	d104      	bne.n	800170c <runAdcTest+0x70>
			printf("Quitting ADC test. Returning to main menu...\n\r");
 8001702:	481a      	ldr	r0, [pc, #104]	@ (800176c <runAdcTest+0xd0>)
 8001704:	f004 ffd4 	bl	80066b0 <iprintf>
			break;
 8001708:	bf00      	nop
			HAL_ADC_Stop(&hadc1);
		} // end of outer if

	} // end of inner while()

	return;
 800170a:	e01f      	b.n	800174c <runAdcTest+0xb0>
		if (hasElapsed(startTime, 200)) { // non-blocking HAL_Delay equivalent
 800170c:	21c8      	movs	r1, #200	@ 0xc8
 800170e:	68b8      	ldr	r0, [r7, #8]
 8001710:	f7ff ff92 	bl	8001638 <hasElapsed>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0e9      	beq.n	80016ee <runAdcTest+0x52>
			startTime = HAL_GetTick(); // reset timer
 800171a:	f001 f969 	bl	80029f0 <HAL_GetTick>
 800171e:	60b8      	str	r0, [r7, #8]
			HAL_ADC_Start(&hadc1);
 8001720:	4813      	ldr	r0, [pc, #76]	@ (8001770 <runAdcTest+0xd4>)
 8001722:	f001 f9b5 	bl	8002a90 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) { // polling, not interrupt
 8001726:	210a      	movs	r1, #10
 8001728:	4811      	ldr	r0, [pc, #68]	@ (8001770 <runAdcTest+0xd4>)
 800172a:	f001 fa98 	bl	8002c5e <HAL_ADC_PollForConversion>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <runAdcTest+0xa8>
				uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001734:	480e      	ldr	r0, [pc, #56]	@ (8001770 <runAdcTest+0xd4>)
 8001736:	f001 fceb 	bl	8003110 <HAL_ADC_GetValue>
 800173a:	6038      	str	r0, [r7, #0]
				printf("ADC Value: %lu\n\r", adcValue);
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <runAdcTest+0xd8>)
 8001740:	f004 ffb6 	bl	80066b0 <iprintf>
			HAL_ADC_Stop(&hadc1);
 8001744:	480a      	ldr	r0, [pc, #40]	@ (8001770 <runAdcTest+0xd4>)
 8001746:	f001 fa57 	bl	8002bf8 <HAL_ADC_Stop>
	while (1) {
 800174a:	e7d0      	b.n	80016ee <runAdcTest+0x52>
} // end of func
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0800a110 	.word	0x0800a110
 8001758:	0800a12c 	.word	0x0800a12c
 800175c:	0800a16c 	.word	0x0800a16c
 8001760:	0800a1ac 	.word	0x0800a1ac
 8001764:	0800a1e4 	.word	0x0800a1e4
 8001768:	0800a210 	.word	0x0800a210
 800176c:	0800a238 	.word	0x0800a238
 8001770:	200001f8 	.word	0x200001f8
 8001774:	0800a268 	.word	0x0800a268

08001778 <HAL_ADC_ConvCpltCallback>:
 * DESCRIPTION :
 *    Read ADC interrupt value and update them to global vars
 * PARAMETERS : ADC_HandleTypeDef *hadc (ADC typedef)
 * RETURNS : void
 */
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d108      	bne.n	800179c <HAL_ADC_ConvCpltCallback+0x24>
		latestAdcValue = HAL_ADC_GetValue(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f001 fcc0 	bl	8003110 <HAL_ADC_GetValue>
 8001790:	4603      	mov	r3, r0
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <HAL_ADC_ConvCpltCallback+0x30>)
 8001794:	6013      	str	r3, [r2, #0]
		adcUpdated = 1;
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_ADC_ConvCpltCallback+0x34>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
	}
} // end of func
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40012000 	.word	0x40012000
 80017a8:	20000250 	.word	0x20000250
 80017ac:	20000254 	.word	0x20000254

080017b0 <testAdcInterrupt>:
 * DESCRIPTION: Simple test to verify ADC1 interrupt is working.
 *              Prints new ADC values when updated via interrupt.
 * PARAMETERS: void
 * RETURNS: void
 */
void testAdcInterrupt (void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	// Start ADC in interrupt mode
	HAL_ADC_Start_IT(&hadc1);
 80017b4:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <testAdcInterrupt+0x28>)
 80017b6:	f001 fadd 	bl	8002d74 <HAL_ADC_Start_IT>

	while (1) {
		if (adcUpdated) {
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <testAdcInterrupt+0x2c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0fa      	beq.n	80017ba <testAdcInterrupt+0xa>
			adcUpdated = 0; // reset flag
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <testAdcInterrupt+0x2c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			printf("ADC Interrupt Value: %lu\n\r", latestAdcValue);
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <testAdcInterrupt+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <testAdcInterrupt+0x34>)
 80017d2:	f004 ff6d 	bl	80066b0 <iprintf>
		if (adcUpdated) {
 80017d6:	e7f0      	b.n	80017ba <testAdcInterrupt+0xa>
 80017d8:	200001f8 	.word	0x200001f8
 80017dc:	20000254 	.word	0x20000254
 80017e0:	20000250 	.word	0x20000250
 80017e4:	0800a27c 	.word	0x0800a27c

080017e8 <runDhtTest>:
 *    Read analog input from DHT11 and display the value on the terminal & OLED.
 *    Type 'q' to quit the test and return to the main menu.
 * PARAMETERS : void
 * RETURNS : void
 */
void runDhtTest (void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af02      	add	r7, sp, #8
	printf("=== DHT11 Sensor Test ===\n\r");
 80017ee:	484a      	ldr	r0, [pc, #296]	@ (8001918 <runDhtTest+0x130>)
 80017f0:	f004 ff5e 	bl	80066b0 <iprintf>
	printf("This test reads temperature and humidity from the DHT11 sensor.\n\r");
 80017f4:	4849      	ldr	r0, [pc, #292]	@ (800191c <runDhtTest+0x134>)
 80017f6:	f004 ff5b 	bl	80066b0 <iprintf>
	printf("Type 'q' to quit.\n\r");
 80017fa:	4849      	ldr	r0, [pc, #292]	@ (8001920 <runDhtTest+0x138>)
 80017fc:	f004 ff58 	bl	80066b0 <iprintf>

	char tempStr[20] = {0}; // format output to readable text (OLED prefers string) & init 1st byte to \0
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
	char humStr[20] = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

	uint32_t startTime = HAL_GetTick(); // non-blocking timer
 800181e:	f001 f8e7 	bl	80029f0 <HAL_GetTick>
 8001822:	62f8      	str	r0, [r7, #44]	@ 0x2c

	while (1) {
		char exitChar = GetCharFromUART2();
 8001824:	f001 f82a 	bl	800287c <GetCharFromUART2>
 8001828:	4603      	mov	r3, r0
 800182a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (exitChar == 'q' || exitChar == 'Q') {
 800182e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001832:	2b71      	cmp	r3, #113	@ 0x71
 8001834:	d003      	beq.n	800183e <runDhtTest+0x56>
 8001836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800183a:	2b51      	cmp	r3, #81	@ 0x51
 800183c:	d103      	bne.n	8001846 <runDhtTest+0x5e>
			printf("Quitting DHT11 test. Returning to main menu...\n\r");
 800183e:	4839      	ldr	r0, [pc, #228]	@ (8001924 <runDhtTest+0x13c>)
 8001840:	f004 ff36 	bl	80066b0 <iprintf>
			break;
 8001844:	e064      	b.n	8001910 <runDhtTest+0x128>
		}
		if ( hasElapsed(startTime, 1100) ) { // non-blocking delay. IMPORTANT: DHT11 can't handle delays lower than 1000 ms...
 8001846:	f240 414c 	movw	r1, #1100	@ 0x44c
 800184a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800184c:	f7ff fef4 	bl	8001638 <hasElapsed>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0e6      	beq.n	8001824 <runDhtTest+0x3c>
			startTime = HAL_GetTick(); // reset timer
 8001856:	f001 f8cb 	bl	80029f0 <HAL_GetTick>
 800185a:	62f8      	str	r0, [r7, #44]	@ 0x2c
			// Read & update values to some vars:
			DHT_GetData(&DHT11_Data);
 800185c:	4832      	ldr	r0, [pc, #200]	@ (8001928 <runDhtTest+0x140>)
 800185e:	f7ff fd0f 	bl	8001280 <DHT_GetData>
			Temperature = DHT11_Data.Temperature;
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <runDhtTest+0x140>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a31      	ldr	r2, [pc, #196]	@ (800192c <runDhtTest+0x144>)
 8001868:	6013      	str	r3, [r2, #0]
			Humidity = DHT11_Data.Humidity;
 800186a:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <runDhtTest+0x140>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a30      	ldr	r2, [pc, #192]	@ (8001930 <runDhtTest+0x148>)
 8001870:	6013      	str	r3, [r2, #0]
			snprintf(tempStr, sizeof(tempStr), "Temp: %d C", (int)Temperature); // cast to int instead of (uint16_t) for simplicity
 8001872:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <runDhtTest+0x144>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187c:	f107 0014 	add.w	r0, r7, #20
 8001880:	ee17 3a90 	vmov	r3, s15
 8001884:	4a2b      	ldr	r2, [pc, #172]	@ (8001934 <runDhtTest+0x14c>)
 8001886:	2114      	movs	r1, #20
 8001888:	f004 ff24 	bl	80066d4 <sniprintf>
			snprintf(humStr, sizeof(humStr), "Humidity: %d %%", (int)Humidity); // cast to int instead of (uint16_t) for simplicity
 800188c:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <runDhtTest+0x148>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001896:	4638      	mov	r0, r7
 8001898:	ee17 3a90 	vmov	r3, s15
 800189c:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <runDhtTest+0x150>)
 800189e:	2114      	movs	r1, #20
 80018a0:	f004 ff18 	bl	80066d4 <sniprintf>

			printf("T: %s, H: %s\n\r", tempStr, humStr);
 80018a4:	463a      	mov	r2, r7
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4823      	ldr	r0, [pc, #140]	@ (800193c <runDhtTest+0x154>)
 80018ae:	f004 feff 	bl	80066b0 <iprintf>

			// Clear top half of screen by drawing a black rectangle:
			ssd1331_fill_rect(0, 0, 96, 32, BLACK); // clear top half of screen
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2320      	movs	r3, #32
 80018b8:	2260      	movs	r2, #96	@ 0x60
 80018ba:	2100      	movs	r1, #0
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 fbf3 	bl	80020a8 <ssd1331_fill_rect>
			ssd1331_display_string(0, 0, tempStr, FONT_1206, WHITE);
 80018c2:	f107 0214 	add.w	r2, r7, #20
 80018c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	230c      	movs	r3, #12
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 fc9d 	bl	8002210 <ssd1331_display_string>
			ssd1331_display_string(0, 16, humStr, FONT_1206, WHITE);
 80018d6:	463a      	mov	r2, r7
 80018d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	230c      	movs	r3, #12
 80018e0:	2110      	movs	r1, #16
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 fc94 	bl	8002210 <ssd1331_display_string>

			// Display values on OLED:
			ssd1331_display_string(0, 0, tempStr, FONT_1206, WHITE);
 80018e8:	f107 0214 	add.w	r2, r7, #20
 80018ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	230c      	movs	r3, #12
 80018f4:	2100      	movs	r1, #0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 fc8a 	bl	8002210 <ssd1331_display_string>
			ssd1331_display_string(0, 16, humStr, FONT_1206, WHITE);
 80018fc:	463a      	mov	r2, r7
 80018fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	230c      	movs	r3, #12
 8001906:	2110      	movs	r1, #16
 8001908:	2000      	movs	r0, #0
 800190a:	f000 fc81 	bl	8002210 <ssd1331_display_string>
	while (1) {
 800190e:	e789      	b.n	8001824 <runDhtTest+0x3c>
		} // end of if

	} // end of while()

	return;
 8001910:	bf00      	nop
} // end of func
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	0800a298 	.word	0x0800a298
 800191c:	0800a2b4 	.word	0x0800a2b4
 8001920:	0800a2f8 	.word	0x0800a2f8
 8001924:	0800a30c 	.word	0x0800a30c
 8001928:	20000240 	.word	0x20000240
 800192c:	20000248 	.word	0x20000248
 8001930:	2000024c 	.word	0x2000024c
 8001934:	0800a340 	.word	0x0800a340
 8001938:	0800a34c 	.word	0x0800a34c
 800193c:	0800a35c 	.word	0x0800a35c

08001940 <readSensors>:
 * FUNCTION: readSensors
 * DESCRIPTION: Reads humidity and light level from sensors at synchronized intervals
 * PARAMETERS: float* humidity, uint32_t* lightLevel
 * RETURNS: int8_t - 0 if success, -1 if sensor error
 */
int8_t readSensors (float* humidity, uint32_t* lightLevel) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	uint32_t now = HAL_GetTick();
 800194a:	f001 f851 	bl	80029f0 <HAL_GetTick>
 800194e:	60f8      	str	r0, [r7, #12]

	// Read DHT11 if interval has passed:
	if ( hasElapsed(latestDhtReadtime, DHT_READ_INTERVAL) ) {
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <readSensors+0x9c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe6d 	bl	8001638 <hasElapsed>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01c      	beq.n	800199e <readSensors+0x5e>
		latestDhtReadtime = now;
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <readSensors+0x9c>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6013      	str	r3, [r2, #0]
		DHT_GetData(&DHT11_Data); // get data
 800196a:	481d      	ldr	r0, [pc, #116]	@ (80019e0 <readSensors+0xa0>)
 800196c:	f7ff fc88 	bl	8001280 <DHT_GetData>

		// Handle sensor errors/garbage values:
		if (DHT11_Data.Temperature == 0 && DHT11_Data.Humidity == 0) {
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <readSensors+0xa0>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d10a      	bne.n	8001996 <readSensors+0x56>
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <readSensors+0xa0>)
 8001982:	edd3 7a01 	vldr	s15, [r3, #4]
 8001986:	eef5 7a40 	vcmp.f32	s15, #0.0
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d102      	bne.n	8001996 <readSensors+0x56>
			return -1; // sensor error
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	e01d      	b.n	80019d2 <readSensors+0x92>
		}
		// Read value:
		*humidity = DHT11_Data.Humidity; // we're only getting humidity data for this, not temperatures
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <readSensors+0xa0>)
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	601a      	str	r2, [r3, #0]
	}

	// Read ADC value if updated via interrupt and interval has passed:
	if ( adcUpdated && hasElapsed(latestAdcReadtime, ADC_READ_INTERVAL) ) {
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <readSensors+0xa4>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <readSensors+0x90>
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <readSensors+0xa8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe41 	bl	8001638 <hasElapsed>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <readSensors+0x90>
		latestAdcReadtime = now;
 80019bc:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <readSensors+0xa8>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6013      	str	r3, [r2, #0]
		adcUpdated = 0; // reset flag
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <readSensors+0xa4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
		*lightLevel = latestAdcValue;
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <readSensors+0xac>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	601a      	str	r2, [r3, #0]
	}

	return 0;
 80019d0:	2300      	movs	r3, #0
} // end of func
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000258 	.word	0x20000258
 80019e0:	20000240 	.word	0x20000240
 80019e4:	20000254 	.word	0x20000254
 80019e8:	2000025c 	.word	0x2000025c
 80019ec:	20000250 	.word	0x20000250

080019f0 <evaluateMoldRisk>:
 * FUNCTION: evaluateMoldRisk
 * DESCRIPTION: Checks if mold risk is present based on humidity and light level
 * PARAMETERS: float humidity, uint32_t lightLevel
 * RETURNS: int8_t - 1 if mold risk detected, 0 if not (normal values)
 */
int8_t evaluateMoldRisk (float humidity, uint32_t lightLevel) {
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80019fa:	6038      	str	r0, [r7, #0]
	int8_t riskFound = ( humidity >= HUMIDITY_HIGH && lightLevel <= SOLAR_HIGH );
 80019fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a00:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001a30 <evaluateMoldRisk+0x40>
 8001a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	db06      	blt.n	8001a1c <evaluateMoldRisk+0x2c>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d801      	bhi.n	8001a1c <evaluateMoldRisk+0x2c>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <evaluateMoldRisk+0x2e>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
		/* NOTE 1: using int instead of uint here to potentially return errors in the future
		 * NOTE 2: still assuming humidity's a float in case we switch sensor model */
	return riskFound;
 8001a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
} // end of func
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	42820000 	.word	0x42820000

08001a34 <showMoldWarning>:
 * FUNCTION: showMoldWarning
 * DESCRIPTION: Displays mold risk warning on OLED
 * PARAMETERS: void
 * RETURNS: void
 */
void showMoldWarning (void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af02      	add	r7, sp, #8
	ssd1331_fill_rect(0, 32, 96, 32, RED); // clear bottom half with red
 8001a3a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2320      	movs	r3, #32
 8001a42:	2260      	movs	r2, #96	@ 0x60
 8001a44:	2120      	movs	r1, #32
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 fb2e 	bl	80020a8 <ssd1331_fill_rect>
	ssd1331_display_string(0, 32, "MOLD RISK!", FONT_1206, WHITE); // white text
 8001a4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	230c      	movs	r3, #12
 8001a54:	4a03      	ldr	r2, [pc, #12]	@ (8001a64 <showMoldWarning+0x30>)
 8001a56:	2120      	movs	r1, #32
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 fbd9 	bl	8002210 <ssd1331_display_string>
    return;
 8001a5e:	bf00      	nop
} // end of func
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0800a36c 	.word	0x0800a36c

08001a68 <evaluateAndDisplayRisk>:
 * FUNCTION: evaluateAndDisplayRisk
 * DESCRIPTION: Evaluates mold risk and displays warning if needed
 * PARAMETERS: float humidity, uint32_t lightLevel
 * RETURNS: void
 */
void evaluateAndDisplayRisk (float humidity, uint32_t lightLevel) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a72:	6038      	str	r0, [r7, #0]
	if (evaluateMoldRisk(humidity, lightLevel)) {
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a7a:	f7ff ffb9 	bl	80019f0 <evaluateMoldRisk>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <evaluateAndDisplayRisk+0x22>
		showMoldWarning();
 8001a84:	f7ff ffd6 	bl	8001a34 <showMoldWarning>
	} else {
		// Clear bottom half of screen if no risk
		ssd1331_fill_rect(0, 32, 96, 32, BLACK);
		ssd1331_display_string(0, 32, "Status: OK", FONT_1206, WHITE);
	}
	return;
 8001a88:	e011      	b.n	8001aae <evaluateAndDisplayRisk+0x46>
		ssd1331_fill_rect(0, 32, 96, 32, BLACK);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2320      	movs	r3, #32
 8001a90:	2260      	movs	r2, #96	@ 0x60
 8001a92:	2120      	movs	r1, #32
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 fb07 	bl	80020a8 <ssd1331_fill_rect>
		ssd1331_display_string(0, 32, "Status: OK", FONT_1206, WHITE);
 8001a9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <evaluateAndDisplayRisk+0x4c>)
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 fbb2 	bl	8002210 <ssd1331_display_string>
	return;
 8001aac:	bf00      	nop
} // end of func
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800a378 	.word	0x0800a378

08001ab8 <runMoldRiskTest>:
 * DESCRIPTION: Runs mold risk evaluation loop
 * 	NOTE:for now I'm implementing this way, but will be updated with circular buffer implementation
 * PARAMETERS: void
 * RETURNS: void
 */
void runMoldRiskTest (void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b090      	sub	sp, #64	@ 0x40
 8001abc:	af02      	add	r7, sp, #8
	printf("=== Mold Risk Evaluation ===\n\r");
 8001abe:	484a      	ldr	r0, [pc, #296]	@ (8001be8 <runMoldRiskTest+0x130>)
 8001ac0:	f004 fdf6 	bl	80066b0 <iprintf>
	printf("Press 'q' to quit.\n\r");
 8001ac4:	4849      	ldr	r0, [pc, #292]	@ (8001bec <runMoldRiskTest+0x134>)
 8001ac6:	f004 fdf3 	bl	80066b0 <iprintf>

	// Define vars again:
	char humStr[20] = {0};
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
	char lightStr[20] = {0};
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
	float humidity = 0;
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
	uint32_t lightLevel = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	603b      	str	r3, [r7, #0]
	uint32_t startTime = HAL_GetTick();
 8001af4:	f000 ff7c 	bl	80029f0 <HAL_GetTick>
 8001af8:	6378      	str	r0, [r7, #52]	@ 0x34

	// Main eval loop:
	while (1) {
		// Prompt to escape to main menu:
		char exitChar = GetCharFromUART2();
 8001afa:	f000 febf 	bl	800287c <GetCharFromUART2>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		if (exitChar == 'q' || exitChar == 'Q') {
 8001b04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b08:	2b71      	cmp	r3, #113	@ 0x71
 8001b0a:	d003      	beq.n	8001b14 <runMoldRiskTest+0x5c>
 8001b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b10:	2b51      	cmp	r3, #81	@ 0x51
 8001b12:	d103      	bne.n	8001b1c <runMoldRiskTest+0x64>
			printf("Exiting mold risk test.\n\r");
 8001b14:	4836      	ldr	r0, [pc, #216]	@ (8001bf0 <runMoldRiskTest+0x138>)
 8001b16:	f004 fdcb 	bl	80066b0 <iprintf>
			break;
 8001b1a:	e061      	b.n	8001be0 <runMoldRiskTest+0x128>
		}

		// non-blocking delay:
		if ( hasElapsed(startTime, 1000) ) { // check every 1 second
 8001b1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b22:	f7ff fd89 	bl	8001638 <hasElapsed>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0e6      	beq.n	8001afa <runMoldRiskTest+0x42>
			startTime = HAL_GetTick(); // reset timer
 8001b2c:	f000 ff60 	bl	80029f0 <HAL_GetTick>
 8001b30:	6378      	str	r0, [r7, #52]	@ 0x34

			// Check if sensor outputs make sense:
			if (readSensors(&humidity, &lightLevel) == -1) {
 8001b32:	463a      	mov	r2, r7
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff01 	bl	8001940 <readSensors>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d10c      	bne.n	8001b60 <runMoldRiskTest+0xa8>
				printf("ERROR: DHT sensor not responding.\n\r");
 8001b46:	482b      	ldr	r0, [pc, #172]	@ (8001bf4 <runMoldRiskTest+0x13c>)
 8001b48:	f004 fdb2 	bl	80066b0 <iprintf>
				ssd1331_display_string(0, 0, "DHT ERROR!", FONT_1206, RED);
 8001b4c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	230c      	movs	r3, #12
 8001b54:	4a28      	ldr	r2, [pc, #160]	@ (8001bf8 <runMoldRiskTest+0x140>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 fb59 	bl	8002210 <ssd1331_display_string>
				continue;
 8001b5e:	e03e      	b.n	8001bde <runMoldRiskTest+0x126>
			}

			// Show results on OLED:
			snprintf(humStr, sizeof(humStr), "Humidity: %d %%", (int)humidity);
 8001b60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b68:	f107 001c 	add.w	r0, r7, #28
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <runMoldRiskTest+0x144>)
 8001b72:	2114      	movs	r1, #20
 8001b74:	f004 fdae 	bl	80066d4 <sniprintf>
			snprintf(lightStr, sizeof(lightStr), "Light: %lu", lightLevel);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f107 0008 	add.w	r0, r7, #8
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <runMoldRiskTest+0x148>)
 8001b80:	2114      	movs	r1, #20
 8001b82:	f004 fda7 	bl	80066d4 <sniprintf>

			ssd1331_fill_rect(0, 0, 96, 32, BLACK); // clear top half
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	2260      	movs	r2, #96	@ 0x60
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 fa89 	bl	80020a8 <ssd1331_fill_rect>
			ssd1331_display_string(0, 0, humStr, FONT_1206, WHITE);
 8001b96:	f107 021c 	add.w	r2, r7, #28
 8001b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f000 fb33 	bl	8002210 <ssd1331_display_string>
			ssd1331_display_string(0, 16, lightStr, FONT_1206, WHITE);
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	2110      	movs	r1, #16
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 fb29 	bl	8002210 <ssd1331_display_string>

			// Print results on Terminal:
			printf("H: %s %%, L: %s\n\r", humStr, lightStr);
 8001bbe:	f107 0208 	add.w	r2, r7, #8
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480e      	ldr	r0, [pc, #56]	@ (8001c04 <runMoldRiskTest+0x14c>)
 8001bca:	f004 fd71 	bl	80066b0 <iprintf>

			evaluateAndDisplayRisk(humidity, lightLevel);
 8001bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	f7ff ff45 	bl	8001a68 <evaluateAndDisplayRisk>
	while (1) {
 8001bde:	e78c      	b.n	8001afa <runMoldRiskTest+0x42>
		} // end of hasElapsed() if loop

	} // end of inner while(1)
	return;
 8001be0:	bf00      	nop
} // end of func
 8001be2:	3738      	adds	r7, #56	@ 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0800a384 	.word	0x0800a384
 8001bec:	0800a3a4 	.word	0x0800a3a4
 8001bf0:	0800a3bc 	.word	0x0800a3bc
 8001bf4:	0800a3d8 	.word	0x0800a3d8
 8001bf8:	0800a3fc 	.word	0x0800a3fc
 8001bfc:	0800a34c 	.word	0x0800a34c
 8001c00:	0800a408 	.word	0x0800a408
 8001c04:	0800a414 	.word	0x0800a414

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0e:	f000 fe89 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c12:	f000 f8bd 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c16:	f7ff fc4b 	bl	80014b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c1a:	f000 fdbd 	bl	8002798 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001c1e:	f7ff fb8d 	bl	800133c <MX_ADC1_Init>
  MX_SPI2_Init();
 8001c22:	f000 f953 	bl	8001ecc <MX_SPI2_Init>
  MX_TIM4_Init();
 8001c26:	f000 fd47 	bl	80026b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\rGroup 3's Demo:\n\r===\n\r");
 8001c2a:	4855      	ldr	r0, [pc, #340]	@ (8001d80 <main+0x178>)
 8001c2c:	f004 fd40 	bl	80066b0 <iprintf>

  ssd1331_init(); // Init OLED
 8001c30:	f000 fb5c 	bl	80022ec <ssd1331_init>
  HAL_ADC_Start_IT(&hadc1); // Start ADC interrupt
 8001c34:	4853      	ldr	r0, [pc, #332]	@ (8001d84 <main+0x17c>)
 8001c36:	f001 f89d 	bl	8002d74 <HAL_ADC_Start_IT>

  // Declare vars:
  uint8_t showMenu = 1; // flag that when set will output the menu prompt
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  runDhtTest();
	  // If menu hasn't been printed:
	  if(showMenu != 0)	{	// meaning menu flag isn't 0
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <main+0x44>
		  printMenu();
 8001c44:	f7ff fcd0 	bl	80015e8 <printMenu>
		  showMenu = 0;		// reset flag
 8001c48:	2300      	movs	r3, #0
 8001c4a:	71fb      	strb	r3, [r7, #7]
	  	  }

	  // Show user input:
	  char userInput = GetCharFromUART2(); // using VCP here to avoid module failure
 8001c4c:	f000 fe16 	bl	800287c <GetCharFromUART2>
 8001c50:	4603      	mov	r3, r0
 8001c52:	71bb      	strb	r3, [r7, #6]
										  /* this declaration needs to be here to restrict
										   * its scope only to this loop */
	  if (userInput != 0) {
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <main+0x5c>
		  printf("You entered: %c\n\r", userInput);
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	484a      	ldr	r0, [pc, #296]	@ (8001d88 <main+0x180>)
 8001c60:	f004 fd26 	bl	80066b0 <iprintf>
	  }

	  // Handle the menu input:
	  switch (userInput) {
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	2b35      	cmp	r3, #53	@ 0x35
 8001c68:	f200 8082 	bhi.w	8001d70 <main+0x168>
 8001c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <main+0x6c>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001d7d 	.word	0x08001d7d
 8001c78:	08001d71 	.word	0x08001d71
 8001c7c:	08001d71 	.word	0x08001d71
 8001c80:	08001d71 	.word	0x08001d71
 8001c84:	08001d71 	.word	0x08001d71
 8001c88:	08001d71 	.word	0x08001d71
 8001c8c:	08001d71 	.word	0x08001d71
 8001c90:	08001d71 	.word	0x08001d71
 8001c94:	08001d71 	.word	0x08001d71
 8001c98:	08001d71 	.word	0x08001d71
 8001c9c:	08001d71 	.word	0x08001d71
 8001ca0:	08001d71 	.word	0x08001d71
 8001ca4:	08001d71 	.word	0x08001d71
 8001ca8:	08001d71 	.word	0x08001d71
 8001cac:	08001d71 	.word	0x08001d71
 8001cb0:	08001d71 	.word	0x08001d71
 8001cb4:	08001d71 	.word	0x08001d71
 8001cb8:	08001d71 	.word	0x08001d71
 8001cbc:	08001d71 	.word	0x08001d71
 8001cc0:	08001d71 	.word	0x08001d71
 8001cc4:	08001d71 	.word	0x08001d71
 8001cc8:	08001d71 	.word	0x08001d71
 8001ccc:	08001d71 	.word	0x08001d71
 8001cd0:	08001d71 	.word	0x08001d71
 8001cd4:	08001d71 	.word	0x08001d71
 8001cd8:	08001d71 	.word	0x08001d71
 8001cdc:	08001d71 	.word	0x08001d71
 8001ce0:	08001d71 	.word	0x08001d71
 8001ce4:	08001d71 	.word	0x08001d71
 8001ce8:	08001d71 	.word	0x08001d71
 8001cec:	08001d71 	.word	0x08001d71
 8001cf0:	08001d71 	.word	0x08001d71
 8001cf4:	08001d71 	.word	0x08001d71
 8001cf8:	08001d71 	.word	0x08001d71
 8001cfc:	08001d71 	.word	0x08001d71
 8001d00:	08001d71 	.word	0x08001d71
 8001d04:	08001d71 	.word	0x08001d71
 8001d08:	08001d71 	.word	0x08001d71
 8001d0c:	08001d71 	.word	0x08001d71
 8001d10:	08001d71 	.word	0x08001d71
 8001d14:	08001d71 	.word	0x08001d71
 8001d18:	08001d71 	.word	0x08001d71
 8001d1c:	08001d71 	.word	0x08001d71
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d71 	.word	0x08001d71
 8001d28:	08001d71 	.word	0x08001d71
 8001d2c:	08001d71 	.word	0x08001d71
 8001d30:	08001d71 	.word	0x08001d71
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d53 	.word	0x08001d53
 8001d3c:	08001d59 	.word	0x08001d59
 8001d40:	08001d5f 	.word	0x08001d5f
 8001d44:	08001d65 	.word	0x08001d65
 8001d48:	08001d6b 	.word	0x08001d6b
	  	  case 0: // (note this is 0 not '0') Nothing received from GetCharFromUART2()
	  		  break;

	  	  case '0': // show menu again
	  		  showMenu = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8001d50:	e015      	b.n	8001d7e <main+0x176>

	  	  case '1': // test DHT11 measurements
	  		  runDhtTest();
 8001d52:	f7ff fd49 	bl	80017e8 <runDhtTest>
	  		  break;
 8001d56:	e012      	b.n	8001d7e <main+0x176>

	  	  case '2': // test OLED
	  		  runOledTest();
 8001d58:	f7ff fc82 	bl	8001660 <runOledTest>
	  		  break;
 8001d5c:	e00f      	b.n	8001d7e <main+0x176>

	  	  case '3': // test ADC
	  		  runAdcTest();
 8001d5e:	f7ff fc9d 	bl	800169c <runAdcTest>
	  		  break;
 8001d62:	e00c      	b.n	8001d7e <main+0x176>

	  	  case '4': // test ADC interrupt
	  		  testAdcInterrupt();
 8001d64:	f7ff fd24 	bl	80017b0 <testAdcInterrupt>
			  break;
 8001d68:	e009      	b.n	8001d7e <main+0x176>

	  	  case'5': // integrated testing:
	  		  runMoldRiskTest();
 8001d6a:	f7ff fea5 	bl	8001ab8 <runMoldRiskTest>
	  		  break;
 8001d6e:	e006      	b.n	8001d7e <main+0x176>

	  	  default:
	  		  printf("ERROR: invalid menu option!\n\rShowing menu again...\n\r");
 8001d70:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <main+0x184>)
 8001d72:	f004 fc9d 	bl	80066b0 <iprintf>
	  		  showMenu = 1; // show menu again
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8001d7a:	e000      	b.n	8001d7e <main+0x176>
	  		  break;
 8001d7c:	bf00      	nop
  {
 8001d7e:	e75e      	b.n	8001c3e <main+0x36>
 8001d80:	0800a428 	.word	0x0800a428
 8001d84:	200001f8 	.word	0x200001f8
 8001d88:	0800a444 	.word	0x0800a444
 8001d8c:	0800a458 	.word	0x0800a458

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b094      	sub	sp, #80	@ 0x50
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	2230      	movs	r2, #48	@ 0x30
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fd33 	bl	800680a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <SystemClock_Config+0xc8>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a26      	ldr	r2, [pc, #152]	@ (8001e58 <SystemClock_Config+0xc8>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <SystemClock_Config+0xc8>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <SystemClock_Config+0xcc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a20      	ldr	r2, [pc, #128]	@ (8001e5c <SystemClock_Config+0xcc>)
 8001dda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <SystemClock_Config+0xcc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df0:	2301      	movs	r3, #1
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df4:	2310      	movs	r3, #16
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e00:	2308      	movs	r3, #8
 8001e02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e04:	2364      	movs	r3, #100	@ 0x64
 8001e06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fe9d 	bl	8003b54 <HAL_RCC_OscConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e20:	f000 f84e 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e24:	230f      	movs	r3, #15
 8001e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2103      	movs	r1, #3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 f8ff 	bl	8004044 <HAL_RCC_ClockConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e4c:	f000 f838 	bl	8001ec0 <Error_Handler>
  }
}
 8001e50:	bf00      	nop
 8001e52:	3750      	adds	r7, #80	@ 0x50
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e68:	1d39      	adds	r1, r7, #4
 8001e6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <__io_putchar+0x20>)
 8001e72:	f003 f8a5 	bl	8004fc0 <HAL_UART_Transmit>
  return ch;
 8001e76:	687b      	ldr	r3, [r7, #4]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000304 	.word	0x20000304

08001e84 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  // Clear the Overrun flag just before receiving the first character
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <__io_getchar+0x38>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <__io_getchar+0x38>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 5);
 8001ea4:	1df9      	adds	r1, r7, #7
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <__io_getchar+0x38>)
 8001eac:	f003 f913 	bl	80050d6 <HAL_UART_Receive>
  return ch;
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000304 	.word	0x20000304

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <Error_Handler+0x8>

08001ecc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001ed2:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <MX_SPI2_Init+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001ed8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001edc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001f00:	2210      	movs	r2, #16
 8001f02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f10:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001f18:	220a      	movs	r2, #10
 8001f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	@ (8001f30 <MX_SPI2_Init+0x64>)
 8001f1e:	f002 fab1 	bl	8004484 <HAL_SPI_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f28:	f7ff ffca 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000260 	.word	0x20000260
 8001f34:	40003800 	.word	0x40003800

08001f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <HAL_SPI_MspInit+0x84>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12b      	bne.n	8001fb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001f92:	2388      	movs	r3, #136	@ 0x88
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001fae:	f001 fc1b 	bl	80037e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	@ 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40003800 	.word	0x40003800
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020800 	.word	0x40020800

08001fc8 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001fd8:	79bb      	ldrb	r3, [r7, #6]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4811      	ldr	r0, [pc, #68]	@ (8002028 <ssd1331_write_byte+0x60>)
 8001fe4:	f001 fd9c 	bl	8003b20 <HAL_GPIO_WritePin>
 8001fe8:	e004      	b.n	8001ff4 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001fea:	2200      	movs	r2, #0
 8001fec:	2102      	movs	r1, #2
 8001fee:	480e      	ldr	r0, [pc, #56]	@ (8002028 <ssd1331_write_byte+0x60>)
 8001ff0:	f001 fd96 	bl	8003b20 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	480b      	ldr	r0, [pc, #44]	@ (8002028 <ssd1331_write_byte+0x60>)
 8001ffa:	f001 fd91 	bl	8003b20 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001ffe:	1df9      	adds	r1, r7, #7
 8002000:	2364      	movs	r3, #100	@ 0x64
 8002002:	2201      	movs	r2, #1
 8002004:	4809      	ldr	r0, [pc, #36]	@ (800202c <ssd1331_write_byte+0x64>)
 8002006:	f002 fac6 	bl	8004596 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	4806      	ldr	r0, [pc, #24]	@ (8002028 <ssd1331_write_byte+0x60>)
 8002010:	f001 fd86 	bl	8003b20 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8002014:	2201      	movs	r2, #1
 8002016:	2102      	movs	r1, #2
 8002018:	4803      	ldr	r0, [pc, #12]	@ (8002028 <ssd1331_write_byte+0x60>)
 800201a:	f001 fd81 	bl	8003b20 <HAL_GPIO_WritePin>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020400 	.word	0x40020400
 800202c:	20000260 	.word	0x20000260

08002030 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b5f      	cmp	r3, #95	@ 0x5f
 8002046:	d82b      	bhi.n	80020a0 <ssd1331_draw_point+0x70>
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	2b3f      	cmp	r3, #63	@ 0x3f
 800204c:	d828      	bhi.n	80020a0 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 800204e:	2100      	movs	r1, #0
 8002050:	2015      	movs	r0, #21
 8002052:	f7ff ffb9 	bl	8001fc8 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ffb4 	bl	8001fc8 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8002060:	2100      	movs	r1, #0
 8002062:	205f      	movs	r0, #95	@ 0x5f
 8002064:	f7ff ffb0 	bl	8001fc8 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8002068:	2100      	movs	r1, #0
 800206a:	2075      	movs	r0, #117	@ 0x75
 800206c:	f7ff ffac 	bl	8001fc8 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ffa7 	bl	8001fc8 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 800207a:	2100      	movs	r1, #0
 800207c:	203f      	movs	r0, #63	@ 0x3f
 800207e:	f7ff ffa3 	bl	8001fc8 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff9b 	bl	8001fc8 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2101      	movs	r1, #1
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff95 	bl	8001fc8 <ssd1331_write_byte>
 800209e:	e000      	b.n	80020a2 <ssd1331_draw_point+0x72>
		return;
 80020a0:	bf00      	nop
}
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <ssd1331_fill_rect>:
	ssd1331_draw_v_line(chXpos, chYpos, chHeight, hwColor);
	ssd1331_draw_v_line(chXpos + chWidth, chYpos, chHeight + 1, hwColor);
}

void ssd1331_fill_rect(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint8_t chHeight, uint16_t hwColor)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4604      	mov	r4, r0
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4623      	mov	r3, r4
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	4603      	mov	r3, r0
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	460b      	mov	r3, r1
 80020c0:	717b      	strb	r3, [r7, #5]
 80020c2:	4613      	mov	r3, r2
 80020c4:	713b      	strb	r3, [r7, #4]
	uint16_t i, j;

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b5f      	cmp	r3, #95	@ 0x5f
 80020ca:	d827      	bhi.n	800211c <ssd1331_fill_rect+0x74>
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80020d0:	d824      	bhi.n	800211c <ssd1331_fill_rect+0x74>
		return;
	}

	for(i = 0; i < chHeight; i ++){
 80020d2:	2300      	movs	r3, #0
 80020d4:	81fb      	strh	r3, [r7, #14]
 80020d6:	e01b      	b.n	8002110 <ssd1331_fill_rect+0x68>
		for(j = 0; j < chWidth; j ++){
 80020d8:	2300      	movs	r3, #0
 80020da:	81bb      	strh	r3, [r7, #12]
 80020dc:	e010      	b.n	8002100 <ssd1331_fill_rect+0x58>
			ssd1331_draw_point(chXpos + j, chYpos + i, hwColor);
 80020de:	89bb      	ldrh	r3, [r7, #12]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2d8      	uxtb	r0, r3
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	4413      	add	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	8c3a      	ldrh	r2, [r7, #32]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7ff ff9b 	bl	8002030 <ssd1331_draw_point>
		for(j = 0; j < chWidth; j ++){
 80020fa:	89bb      	ldrh	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	81bb      	strh	r3, [r7, #12]
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	b29b      	uxth	r3, r3
 8002104:	89ba      	ldrh	r2, [r7, #12]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3e9      	bcc.n	80020de <ssd1331_fill_rect+0x36>
	for(i = 0; i < chHeight; i ++){
 800210a:	89fb      	ldrh	r3, [r7, #14]
 800210c:	3301      	adds	r3, #1
 800210e:	81fb      	strh	r3, [r7, #14]
 8002110:	793b      	ldrb	r3, [r7, #4]
 8002112:	b29b      	uxth	r3, r3
 8002114:	89fa      	ldrh	r2, [r7, #14]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3de      	bcc.n	80020d8 <ssd1331_fill_rect+0x30>
 800211a:	e000      	b.n	800211e <ssd1331_fill_rect+0x76>
		return;
 800211c:	bf00      	nop
		}
	}
}
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}

08002124 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4623      	mov	r3, r4
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	4603      	mov	r3, r0
 8002138:	71bb      	strb	r3, [r7, #6]
 800213a:	460b      	mov	r3, r1
 800213c:	717b      	strb	r3, [r7, #5]
 800213e:	4613      	mov	r3, r2
 8002140:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b5f      	cmp	r3, #95	@ 0x5f
 800214e:	d857      	bhi.n	8002200 <ssd1331_display_char+0xdc>
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	2b3f      	cmp	r3, #63	@ 0x3f
 8002154:	d854      	bhi.n	8002200 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	e04c      	b.n	80021f6 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 800215c:	793b      	ldrb	r3, [r7, #4]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d10d      	bne.n	800217e <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8002162:	797b      	ldrb	r3, [r7, #5]
 8002164:	f1a3 0220 	sub.w	r2, r3, #32
 8002168:	7bf9      	ldrb	r1, [r7, #15]
 800216a:	4827      	ldr	r0, [pc, #156]	@ (8002208 <ssd1331_display_char+0xe4>)
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4403      	add	r3, r0
 8002176:	440b      	add	r3, r1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	737b      	strb	r3, [r7, #13]
 800217c:	e00c      	b.n	8002198 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 800217e:	793b      	ldrb	r3, [r7, #4]
 8002180:	2b10      	cmp	r3, #16
 8002182:	d109      	bne.n	8002198 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	f1a3 0220 	sub.w	r2, r3, #32
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	491f      	ldr	r1, [pc, #124]	@ (800220c <ssd1331_display_char+0xe8>)
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	440a      	add	r2, r1
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8002198:	2300      	movs	r3, #0
 800219a:	73bb      	strb	r3, [r7, #14]
 800219c:	e025      	b.n	80021ea <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 800219e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da06      	bge.n	80021b4 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 80021a6:	8c3a      	ldrh	r2, [r7, #32]
 80021a8:	79b9      	ldrb	r1, [r7, #6]
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff3f 	bl	8002030 <ssd1331_draw_point>
 80021b2:	e005      	b.n	80021c0 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 80021b4:	79b9      	ldrb	r1, [r7, #6]
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2200      	movs	r2, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff38 	bl	8002030 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	3301      	adds	r3, #1
 80021ca:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 80021cc:	79ba      	ldrb	r2, [r7, #6]
 80021ce:	7b3b      	ldrb	r3, [r7, #12]
 80021d0:	1ad2      	subs	r2, r2, r3
 80021d2:	793b      	ldrb	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d105      	bne.n	80021e4 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 80021d8:	7b3b      	ldrb	r3, [r7, #12]
 80021da:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	3301      	adds	r3, #1
 80021e0:	71fb      	strb	r3, [r7, #7]
				break;
 80021e2:	e005      	b.n	80021f0 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	3301      	adds	r3, #1
 80021e8:	73bb      	strb	r3, [r7, #14]
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	2b07      	cmp	r3, #7
 80021ee:	d9d6      	bls.n	800219e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	793b      	ldrb	r3, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3ae      	bcc.n	800215c <ssd1331_display_char+0x38>
 80021fe:	e000      	b.n	8002202 <ssd1331_display_char+0xde>
		return;
 8002200:	bf00      	nop
			}
		}
    }
}
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	0800a4ac 	.word	0x0800a4ac
 800220c:	0800a920 	.word	0x0800a920

08002210 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b085      	sub	sp, #20
 8002214:	af02      	add	r7, sp, #8
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b5f      	cmp	r3, #95	@ 0x5f
 800222a:	d836      	bhi.n	800229a <ssd1331_display_string+0x8a>
 800222c:	79bb      	ldrb	r3, [r7, #6]
 800222e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002230:	d833      	bhi.n	800229a <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8002232:	e02d      	b.n	8002290 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8002234:	79fa      	ldrb	r2, [r7, #7]
 8002236:	797b      	ldrb	r3, [r7, #5]
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f1c3 0360 	rsb	r3, r3, #96	@ 0x60
 8002240:	429a      	cmp	r2, r3
 8002242:	dd12      	ble.n	800226a <ssd1331_display_string+0x5a>
			chXpos = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8002248:	79ba      	ldrb	r2, [r7, #6]
 800224a:	797b      	ldrb	r3, [r7, #5]
 800224c:	4413      	add	r3, r2
 800224e:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8002250:	79ba      	ldrb	r2, [r7, #6]
 8002252:	797b      	ldrb	r3, [r7, #5]
 8002254:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002258:	429a      	cmp	r2, r3
 800225a:	dd06      	ble.n	800226a <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f000 f81c 	bl	80022a2 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	797c      	ldrb	r4, [r7, #5]
 8002270:	79b9      	ldrb	r1, [r7, #6]
 8002272:	79f8      	ldrb	r0, [r7, #7]
 8002274:	8b3b      	ldrh	r3, [r7, #24]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4623      	mov	r3, r4
 800227a:	f7ff ff53 	bl	8002124 <ssd1331_display_char>
        chXpos += chSize / 2;
 800227e:	797b      	ldrb	r3, [r7, #5]
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4413      	add	r3, r2
 8002288:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1cd      	bne.n	8002234 <ssd1331_display_string+0x24>
 8002298:	e000      	b.n	800229c <ssd1331_display_string+0x8c>
		return;
 800229a:	bf00      	nop
    }
}
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}

080022a2 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 80022ac:	2300      	movs	r3, #0
 80022ae:	81fb      	strh	r3, [r7, #14]
 80022b0:	e013      	b.n	80022da <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 80022b2:	2300      	movs	r3, #0
 80022b4:	81bb      	strh	r3, [r7, #12]
 80022b6:	e00a      	b.n	80022ce <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80022b8:	89bb      	ldrh	r3, [r7, #12]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	89fa      	ldrh	r2, [r7, #14]
 80022be:	b2d1      	uxtb	r1, r2
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff feb4 	bl	8002030 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 80022c8:	89bb      	ldrh	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	81bb      	strh	r3, [r7, #12]
 80022ce:	89bb      	ldrh	r3, [r7, #12]
 80022d0:	2b5f      	cmp	r3, #95	@ 0x5f
 80022d2:	d9f1      	bls.n	80022b8 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 80022d4:	89fb      	ldrh	r3, [r7, #14]
 80022d6:	3301      	adds	r3, #1
 80022d8:	81fb      	strh	r3, [r7, #14]
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80022de:	d9e8      	bls.n	80022b2 <ssd1331_clear_screen+0x10>
		}
	}
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <ssd1331_init>:


void ssd1331_init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 80022f0:	2201      	movs	r2, #1
 80022f2:	2101      	movs	r1, #1
 80022f4:	4852      	ldr	r0, [pc, #328]	@ (8002440 <ssd1331_init+0x154>)
 80022f6:	f001 fc13 	bl	8003b20 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 80022fa:	2201      	movs	r2, #1
 80022fc:	2104      	movs	r1, #4
 80022fe:	4850      	ldr	r0, [pc, #320]	@ (8002440 <ssd1331_init+0x154>)
 8002300:	f001 fc0e 	bl	8003b20 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8002304:	2100      	movs	r1, #0
 8002306:	20ae      	movs	r0, #174	@ 0xae
 8002308:	f7ff fe5e 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 800230c:	2100      	movs	r1, #0
 800230e:	2081      	movs	r0, #129	@ 0x81
 8002310:	f7ff fe5a 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8002314:	2100      	movs	r1, #0
 8002316:	20ff      	movs	r0, #255	@ 0xff
 8002318:	f7ff fe56 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 800231c:	2100      	movs	r1, #0
 800231e:	2082      	movs	r0, #130	@ 0x82
 8002320:	f7ff fe52 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8002324:	2100      	movs	r1, #0
 8002326:	20ff      	movs	r0, #255	@ 0xff
 8002328:	f7ff fe4e 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 800232c:	2100      	movs	r1, #0
 800232e:	2083      	movs	r0, #131	@ 0x83
 8002330:	f7ff fe4a 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8002334:	2100      	movs	r1, #0
 8002336:	20ff      	movs	r0, #255	@ 0xff
 8002338:	f7ff fe46 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 800233c:	2100      	movs	r1, #0
 800233e:	2087      	movs	r0, #135	@ 0x87
 8002340:	f7ff fe42 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8002344:	2100      	movs	r1, #0
 8002346:	2006      	movs	r0, #6
 8002348:	f7ff fe3e 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 800234c:	2100      	movs	r1, #0
 800234e:	208a      	movs	r0, #138	@ 0x8a
 8002350:	f7ff fe3a 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8002354:	2100      	movs	r1, #0
 8002356:	2064      	movs	r0, #100	@ 0x64
 8002358:	f7ff fe36 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 800235c:	2100      	movs	r1, #0
 800235e:	208b      	movs	r0, #139	@ 0x8b
 8002360:	f7ff fe32 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8002364:	2100      	movs	r1, #0
 8002366:	2078      	movs	r0, #120	@ 0x78
 8002368:	f7ff fe2e 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 800236c:	2100      	movs	r1, #0
 800236e:	208c      	movs	r0, #140	@ 0x8c
 8002370:	f7ff fe2a 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8002374:	2100      	movs	r1, #0
 8002376:	2064      	movs	r0, #100	@ 0x64
 8002378:	f7ff fe26 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 800237c:	2100      	movs	r1, #0
 800237e:	20a0      	movs	r0, #160	@ 0xa0
 8002380:	f7ff fe22 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x76, SSD1331_CMD);                     //0x72
 8002384:	2100      	movs	r1, #0
 8002386:	2076      	movs	r0, #118	@ 0x76
 8002388:	f7ff fe1e 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 800238c:	2100      	movs	r1, #0
 800238e:	20a1      	movs	r0, #161	@ 0xa1
 8002390:	f7ff fe1a 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8002394:	2100      	movs	r1, #0
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff fe16 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 800239c:	2100      	movs	r1, #0
 800239e:	20a2      	movs	r0, #162	@ 0xa2
 80023a0:	f7ff fe12 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fe0e 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80023ac:	2100      	movs	r1, #0
 80023ae:	20a4      	movs	r0, #164	@ 0xa4
 80023b0:	f7ff fe0a 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80023b4:	2100      	movs	r1, #0
 80023b6:	20a8      	movs	r0, #168	@ 0xa8
 80023b8:	f7ff fe06 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 80023bc:	2100      	movs	r1, #0
 80023be:	203f      	movs	r0, #63	@ 0x3f
 80023c0:	f7ff fe02 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80023c4:	2100      	movs	r1, #0
 80023c6:	20ad      	movs	r0, #173	@ 0xad
 80023c8:	f7ff fdfe 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 80023cc:	2100      	movs	r1, #0
 80023ce:	208e      	movs	r0, #142	@ 0x8e
 80023d0:	f7ff fdfa 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 80023d4:	2100      	movs	r1, #0
 80023d6:	20b0      	movs	r0, #176	@ 0xb0
 80023d8:	f7ff fdf6 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 80023dc:	2100      	movs	r1, #0
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fdf2 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 80023e4:	2100      	movs	r1, #0
 80023e6:	20b1      	movs	r0, #177	@ 0xb1
 80023e8:	f7ff fdee 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 80023ec:	2100      	movs	r1, #0
 80023ee:	2031      	movs	r0, #49	@ 0x31
 80023f0:	f7ff fdea 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 80023f4:	2100      	movs	r1, #0
 80023f6:	20b3      	movs	r0, #179	@ 0xb3
 80023f8:	f7ff fde6 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 80023fc:	2100      	movs	r1, #0
 80023fe:	20f0      	movs	r0, #240	@ 0xf0
 8002400:	f7ff fde2 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8002404:	2100      	movs	r1, #0
 8002406:	20bb      	movs	r0, #187	@ 0xbb
 8002408:	f7ff fdde 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 800240c:	2100      	movs	r1, #0
 800240e:	203a      	movs	r0, #58	@ 0x3a
 8002410:	f7ff fdda 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8002414:	2100      	movs	r1, #0
 8002416:	20be      	movs	r0, #190	@ 0xbe
 8002418:	f7ff fdd6 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 800241c:	2100      	movs	r1, #0
 800241e:	203e      	movs	r0, #62	@ 0x3e
 8002420:	f7ff fdd2 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8002424:	2100      	movs	r1, #0
 8002426:	202e      	movs	r0, #46	@ 0x2e
 8002428:	f7ff fdce 	bl	8001fc8 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 800242c:	2100      	movs	r1, #0
 800242e:	20af      	movs	r0, #175	@ 0xaf
 8002430:	f7ff fdca 	bl	8001fc8 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff ff34 	bl	80022a2 <ssd1331_clear_screen>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40020400 	.word	0x40020400

08002444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_MspInit+0x4c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	4a0f      	ldr	r2, [pc, #60]	@ (8002490 <HAL_MspInit+0x4c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002458:	6453      	str	r3, [r2, #68]	@ 0x44
 800245a:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <HAL_MspInit+0x4c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002482:	2007      	movs	r0, #7
 8002484:	f001 f96e 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <NMI_Handler+0x4>

0800249c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <MemManage_Handler+0x4>

080024ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <BusFault_Handler+0x4>

080024b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <UsageFault_Handler+0x4>

080024bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ea:	f000 fa6d 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <ADC_IRQHandler+0x10>)
 80024fa:	f000 fcf9 	bl	8002ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200001f8 	.word	0x200001f8

08002508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_kill>:

int _kill(int pid, int sig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002522:	f004 f9c5 	bl	80068b0 <__errno>
 8002526:	4603      	mov	r3, r0
 8002528:	2216      	movs	r2, #22
 800252a:	601a      	str	r2, [r3, #0]
  return -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_exit>:

void _exit (int status)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffe7 	bl	8002518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <_exit+0x12>

0800254e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e00a      	b.n	8002576 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002560:	f7ff fc90 	bl	8001e84 <__io_getchar>
 8002564:	4601      	mov	r1, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbf0      	blt.n	8002560 <_read+0x12>
  }

  return len;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e009      	b.n	80025ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	60ba      	str	r2, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fc5c 	bl	8001e60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbf1      	blt.n	800259a <_write+0x12>
  }
  return len;
 80025b6:	687b      	ldr	r3, [r7, #4]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_close>:

int _close(int file)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e8:	605a      	str	r2, [r3, #4]
  return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_isatty>:

int _isatty(int file)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002600:	2301      	movs	r3, #1
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f004 f92a 	bl	80068b0 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20020000 	.word	0x20020000
 8002688:	00000400 	.word	0x00000400
 800268c:	200002b8 	.word	0x200002b8
 8002690:	200004a0 	.word	0x200004a0

08002694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	463b      	mov	r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <MX_TIM4_Init+0x94>)
 80026d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002750 <MX_TIM4_Init+0x98>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80026da:	4b1c      	ldr	r3, [pc, #112]	@ (800274c <MX_TIM4_Init+0x94>)
 80026dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <MX_TIM4_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026e8:	4b18      	ldr	r3, [pc, #96]	@ (800274c <MX_TIM4_Init+0x94>)
 80026ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <MX_TIM4_Init+0x94>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <MX_TIM4_Init+0x94>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026fc:	4813      	ldr	r0, [pc, #76]	@ (800274c <MX_TIM4_Init+0x94>)
 80026fe:	f002 f96b 	bl	80049d8 <HAL_TIM_Base_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002708:	f7ff fbda 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <MX_TIM4_Init+0x94>)
 800271a:	f002 f9ac 	bl	8004a76 <HAL_TIM_ConfigClockSource>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002724:	f7ff fbcc 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002730:	463b      	mov	r3, r7
 8002732:	4619      	mov	r1, r3
 8002734:	4805      	ldr	r0, [pc, #20]	@ (800274c <MX_TIM4_Init+0x94>)
 8002736:	f002 fb85 	bl	8004e44 <HAL_TIMEx_MasterConfigSynchronization>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002740:	f7ff fbbe 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200002bc 	.word	0x200002bc
 8002750:	40000800 	.word	0x40000800

08002754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_TIM_Base_MspInit+0x3c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10d      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_TIM_Base_MspInit+0x40>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a09      	ldr	r2, [pc, #36]	@ (8002794 <HAL_TIM_Base_MspInit+0x40>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <HAL_TIM_Base_MspInit+0x40>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40000800 	.word	0x40000800
 8002794:	40023800 	.word	0x40023800

08002798 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <MX_USART2_UART_Init+0x50>)
 80027a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_USART2_UART_Init+0x4c>)
 80027d0:	f002 fba6 	bl	8004f20 <HAL_UART_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027da:	f7ff fb71 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000304 	.word	0x20000304
 80027e8:	40004400 	.word	0x40004400

080027ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	@ 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <HAL_UART_MspInit+0x84>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12b      	bne.n	8002866 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HAL_UART_MspInit+0x88>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_UART_MspInit+0x88>)
 8002818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281c:	6413      	str	r3, [r2, #64]	@ 0x40
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_UART_MspInit+0x88>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_UART_MspInit+0x88>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_UART_MspInit+0x88>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_UART_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002846:	230c      	movs	r3, #12
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002856:	2307      	movs	r3, #7
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	@ (8002878 <HAL_UART_MspInit+0x8c>)
 8002862:	f000 ffc1 	bl	80037e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	@ 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40004400 	.word	0x40004400
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000

0800287c <GetCharFromUART2>:
// PARAMETERS    :
//   none
// RETURNS       :
//  character received
char GetCharFromUART2 ( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b09a      	sub	sp, #104	@ 0x68
 8002880:	af00      	add	r7, sp, #0
  char	RxBuffer[LENGTH_OF_INPUT_ARRAY] = {0};
 8002882:	463b      	mov	r3, r7
 8002884:	2264      	movs	r2, #100	@ 0x64
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f003 ffbe 	bl	800680a <memset>

  HAL_StatusTypeDef UartStatus = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  UartStatus = HAL_UART_Receive(&huart2, (uint8_t *)RxBuffer, 1, 1);
 8002894:	4639      	mov	r1, r7
 8002896:	2301      	movs	r3, #1
 8002898:	2201      	movs	r2, #1
 800289a:	480b      	ldr	r0, [pc, #44]	@ (80028c8 <GetCharFromUART2+0x4c>)
 800289c:	f002 fc1b 	bl	80050d6 <HAL_UART_Receive>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67


  // check if Receive got a character
  if( !((UartStatus == HAL_TIMEOUT) || (UartStatus == HAL_OK)) )
 80028a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d006      	beq.n	80028bc <GetCharFromUART2+0x40>
 80028ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <GetCharFromUART2+0x40>
  {
    printf("ERROR in GetCharFromUART2\n\r");  // nothing received or error so signal that via a print
 80028b6:	4805      	ldr	r0, [pc, #20]	@ (80028cc <GetCharFromUART2+0x50>)
 80028b8:	f003 fefa 	bl	80066b0 <iprintf>
  }

  return *RxBuffer;
 80028bc:	783b      	ldrb	r3, [r7, #0]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3768      	adds	r7, #104	@ 0x68
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000304 	.word	0x20000304
 80028cc:	0800a490 	.word	0x0800a490

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d4:	f7ff fede 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f003 ffdd 	bl	80068bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7ff f981 	bl	8001c08 <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002914:	0800b364 	.word	0x0800b364
  ldr r2, =_sbss
 8002918:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800291c:	2000049c 	.word	0x2000049c

08002920 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <DMA1_Stream0_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 ff09 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fd74 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 ff21 	bl	80037ce <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 fee9 	bl	800377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000008 	.word	0x20000008
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000008 	.word	0x20000008
 80029ec:	2000034c 	.word	0x2000034c

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000034c 	.word	0x2000034c

08002a08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e033      	b.n	8002a86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe fcf6 	bl	8001418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a4e:	f023 0302 	bic.w	r3, r3, #2
 8002a52:	f043 0202 	orr.w	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fcac 	bl	80033b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a76:	e001      	b.n	8002a7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_Start+0x1a>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e097      	b.n	8002bda <HAL_ADC_Start+0x14a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d018      	beq.n	8002af2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad0:	4b45      	ldr	r3, [pc, #276]	@ (8002be8 <HAL_ADC_Start+0x158>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a45      	ldr	r2, [pc, #276]	@ (8002bec <HAL_ADC_Start+0x15c>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0c9a      	lsrs	r2, r3, #18
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ae4:	e002      	b.n	8002aec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f9      	bne.n	8002ae6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d15f      	bne.n	8002bc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3e:	d106      	bne.n	8002b4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f023 0206 	bic.w	r2, r3, #6
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b4c:	e002      	b.n	8002b54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b5c:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_ADC_Start+0x160>)
 8002b5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b68:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d129      	bne.n	8002bd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	e020      	b.n	8002bd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <HAL_ADC_Start+0x164>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_ADC_Start+0x148>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d114      	bne.n	8002bd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f043 0210 	orr.w	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000
 8002bec:	431bde83 	.word	0x431bde83
 8002bf0:	40012300 	.word	0x40012300
 8002bf4:	40012000 	.word	0x40012000

08002bf8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_Stop+0x16>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e021      	b.n	8002c52 <HAL_ADC_Stop+0x5a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d113      	bne.n	8002ca4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e063      	b.n	8002d6c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca4:	f7ff fea4 	bl	80029f0 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002caa:	e021      	b.n	8002cf0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_ADC_PollForConversion+0x6c>
 8002cba:	f7ff fe99 	bl	80029f0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d212      	bcs.n	8002cf0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f043 0204 	orr.w	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e03d      	b.n	8002d6c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d1d6      	bne.n	8002cac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0212 	mvn.w	r2, #18
 8002d06:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d123      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11f      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d111      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Start_IT+0x1a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0a1      	b.n	8002ed2 <HAL_ADC_Start_IT+0x15e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d018      	beq.n	8002dd6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002db4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_ADC_Start_IT+0x16c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee4 <HAL_ADC_Start_IT+0x170>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9a      	lsrs	r2, r3, #18
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002dc8:	e002      	b.n	8002dd0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f9      	bne.n	8002dca <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d169      	bne.n	8002eb8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	f023 0206 	bic.w	r2, r3, #6
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e30:	e002      	b.n	8002e38 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e40:	4b29      	ldr	r3, [pc, #164]	@ (8002ee8 <HAL_ADC_Start_IT+0x174>)
 8002e42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e5c:	f043 0320 	orr.w	r3, r3, #32
 8002e60:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10f      	bne.n	8002e8e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d129      	bne.n	8002ed0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	e020      	b.n	8002ed0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <HAL_ADC_Start_IT+0x178>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_ADC_Start_IT+0x15c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d114      	bne.n	8002ed0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f043 0210 	orr.w	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	431bde83 	.word	0x431bde83
 8002ee8:	40012300 	.word	0x40012300
 8002eec:	40012000 	.word	0x40012000

08002ef0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d049      	beq.n	8002fba <HAL_ADC_IRQHandler+0xca>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d046      	beq.n	8002fba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d12b      	bne.n	8002faa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d127      	bne.n	8002faa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d119      	bne.n	8002faa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0220 	bic.w	r2, r2, #32
 8002f84:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fbe4 	bl	8001778 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0212 	mvn.w	r2, #18
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d057      	beq.n	8003080 <HAL_ADC_IRQHandler+0x190>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d054      	beq.n	8003080 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d139      	bne.n	8003070 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003014:	2b00      	cmp	r3, #0
 8003016:	d12b      	bne.n	8003070 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003022:	2b00      	cmp	r3, #0
 8003024:	d124      	bne.n	8003070 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11d      	bne.n	8003070 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003038:	2b00      	cmp	r3, #0
 800303a:	d119      	bne.n	8003070 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800304a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa9d 	bl	80035b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 020c 	mvn.w	r2, #12
 800307e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d017      	beq.n	80030c6 <HAL_ADC_IRQHandler+0x1d6>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d014      	beq.n	80030c6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d10d      	bne.n	80030c6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f837 	bl	800312a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0201 	mvn.w	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030d4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_ADC_IRQHandler+0x218>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f06f 0220 	mvn.w	r2, #32
 80030f6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f820 	bl	800313e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0220 	mvn.w	r2, #32
 8003106:	601a      	str	r2, [r3, #0]
  }
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x1c>
 800316c:	2302      	movs	r3, #2
 800316e:	e113      	b.n	8003398 <HAL_ADC_ConfigChannel+0x244>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b09      	cmp	r3, #9
 800317e:	d925      	bls.n	80031cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	3b1e      	subs	r3, #30
 8003196:	2207      	movs	r2, #7
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43da      	mvns	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	400a      	ands	r2, r1
 80031a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68d9      	ldr	r1, [r3, #12]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4618      	mov	r0, r3
 80031b8:	4603      	mov	r3, r0
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4403      	add	r3, r0
 80031be:	3b1e      	subs	r3, #30
 80031c0:	409a      	lsls	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e022      	b.n	8003212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6919      	ldr	r1, [r3, #16]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	2207      	movs	r2, #7
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	400a      	ands	r2, r1
 80031ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6919      	ldr	r1, [r3, #16]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	4603      	mov	r3, r0
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4403      	add	r3, r0
 8003208:	409a      	lsls	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b06      	cmp	r3, #6
 8003218:	d824      	bhi.n	8003264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	3b05      	subs	r3, #5
 800322c:	221f      	movs	r2, #31
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	400a      	ands	r2, r1
 800323a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b05      	subs	r3, #5
 8003256:	fa00 f203 	lsl.w	r2, r0, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34
 8003262:	e04c      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	d824      	bhi.n	80032b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	3b23      	subs	r3, #35	@ 0x23
 800327e:	221f      	movs	r2, #31
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43da      	mvns	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	400a      	ands	r2, r1
 800328c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	4618      	mov	r0, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	3b23      	subs	r3, #35	@ 0x23
 80032a8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b4:	e023      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	3b41      	subs	r3, #65	@ 0x41
 80032c8:	221f      	movs	r2, #31
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	400a      	ands	r2, r1
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4618      	mov	r0, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3b41      	subs	r3, #65	@ 0x41
 80032f2:	fa00 f203 	lsl.w	r2, r0, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032fe:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <HAL_ADC_ConfigChannel+0x250>)
 8003300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a28      	ldr	r2, [pc, #160]	@ (80033a8 <HAL_ADC_ConfigChannel+0x254>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10f      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1d8>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b12      	cmp	r3, #18
 8003312:	d10b      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <HAL_ADC_ConfigChannel+0x254>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d12b      	bne.n	800338e <HAL_ADC_ConfigChannel+0x23a>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_ADC_ConfigChannel+0x258>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x1f4>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b11      	cmp	r3, #17
 8003346:	d122      	bne.n	800338e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a11      	ldr	r2, [pc, #68]	@ (80033ac <HAL_ADC_ConfigChannel+0x258>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d111      	bne.n	800338e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800336a:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_ADC_ConfigChannel+0x25c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a11      	ldr	r2, [pc, #68]	@ (80033b4 <HAL_ADC_ConfigChannel+0x260>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9a      	lsrs	r2, r3, #18
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003380:	e002      	b.n	8003388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3b01      	subs	r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f9      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012300 	.word	0x40012300
 80033a8:	40012000 	.word	0x40012000
 80033ac:	10000012 	.word	0x10000012
 80033b0:	20000000 	.word	0x20000000
 80033b4:	431bde83 	.word	0x431bde83

080033b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033c0:	4b79      	ldr	r3, [pc, #484]	@ (80035a8 <ADC_Init+0x1f0>)
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	021a      	lsls	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6899      	ldr	r1, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344a:	4a58      	ldr	r2, [pc, #352]	@ (80035ac <ADC_Init+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800345e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	e00f      	b.n	80034b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0202 	bic.w	r2, r2, #2
 80034c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	005a      	lsls	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	3b01      	subs	r3, #1
 8003510:	035a      	lsls	r2, r3, #13
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	e007      	b.n	800352c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	3b01      	subs	r3, #1
 8003548:	051a      	lsls	r2, r3, #20
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800356e:	025a      	lsls	r2, r3, #9
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	029a      	lsls	r2, r3, #10
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40012300 	.word	0x40012300
 80035ac:	0f000001 	.word	0x0f000001

080035b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	@ (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff29 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff3e 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff8e 	bl	80036b8 <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5d 	bl	8003664 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff31 	bl	8003628 <__NVIC_EnableIRQ>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffa2 	bl	8003720 <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e159      	b.n	8003ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 8148 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d005      	beq.n	800383a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	2b02      	cmp	r3, #2
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d017      	beq.n	80038d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d123      	bne.n	800392c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	220f      	movs	r2, #15
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a2 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800397c:	6453      	str	r3, [r2, #68]	@ 0x44
 800397e:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_GPIO_Init+0x2ec>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a49      	ldr	r2, [pc, #292]	@ (8003ad8 <HAL_GPIO_Init+0x2f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x202>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	@ (8003adc <HAL_GPIO_Init+0x2f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x1fe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a47      	ldr	r2, [pc, #284]	@ (8003ae0 <HAL_GPIO_Init+0x2f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x1fa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a46      	ldr	r2, [pc, #280]	@ (8003ae4 <HAL_GPIO_Init+0x2fc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x1f6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a45      	ldr	r2, [pc, #276]	@ (8003ae8 <HAL_GPIO_Init+0x300>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x1f2>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039da:	2307      	movs	r3, #7
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	@ (8003ad4 <HAL_GPIO_Init+0x2ec>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b38      	ldr	r3, [pc, #224]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a24      	ldr	r2, [pc, #144]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a0f      	ldr	r2, [pc, #60]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f aea2 	bls.w	8003804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b30:	787b      	ldrb	r3, [r7, #1]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b3c:	e003      	b.n	8003b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	041a      	lsls	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	619a      	str	r2, [r3, #24]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e267      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d075      	beq.n	8003c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b72:	4b88      	ldr	r3, [pc, #544]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4b85      	ldr	r3, [pc, #532]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d112      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b82      	ldr	r3, [pc, #520]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	4b7e      	ldr	r3, [pc, #504]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05b      	beq.n	8003c5c <HAL_RCC_OscConfig+0x108>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d157      	bne.n	8003c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e242      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x74>
 8003bba:	4b76      	ldr	r3, [pc, #472]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e01d      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x98>
 8003bd2:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b6d      	ldr	r3, [pc, #436]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bec:	4b69      	ldr	r3, [pc, #420]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a68      	ldr	r2, [pc, #416]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b66      	ldr	r3, [pc, #408]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a65      	ldr	r2, [pc, #404]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fef0 	bl	80029f0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe feec 	bl	80029f0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	@ 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e207      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b5b      	ldr	r3, [pc, #364]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0xc0>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe fedc 	bl	80029f0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe fed8 	bl	80029f0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	@ 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1f3      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4e:	4b51      	ldr	r3, [pc, #324]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0xe8>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b47      	ldr	r3, [pc, #284]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b44      	ldr	r3, [pc, #272]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	4b41      	ldr	r3, [pc, #260]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1c7      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4937      	ldr	r1, [pc, #220]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fe91 	bl	80029f0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fe8d 	bl	80029f0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1a8      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b28      	ldr	r3, [pc, #160]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4925      	ldr	r1, [pc, #148]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fe70 	bl	80029f0 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fe fe6c 	bl	80029f0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e187      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d036      	beq.n	8003dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fe50 	bl	80029f0 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fe fe4c 	bl	80029f0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e167      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x200>
 8003d72:	e01b      	b.n	8003dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fe39 	bl	80029f0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e00e      	b.n	8003da0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe fe35 	bl	80029f0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d907      	bls.n	8003da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e150      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470000 	.word	0x42470000
 8003d9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b88      	ldr	r3, [pc, #544]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b81      	ldr	r3, [pc, #516]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b7a      	ldr	r3, [pc, #488]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b77      	ldr	r3, [pc, #476]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b74      	ldr	r3, [pc, #464]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fe fdf5 	bl	80029f0 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fe fdf1 	bl	80029f0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e10c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2ea>
 8003e30:	4b64      	ldr	r3, [pc, #400]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a63      	ldr	r2, [pc, #396]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x30c>
 8003e46:	4b5f      	ldr	r3, [pc, #380]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e52:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e60:	4b58      	ldr	r3, [pc, #352]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	4a57      	ldr	r2, [pc, #348]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6c:	4b55      	ldr	r3, [pc, #340]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	4a54      	ldr	r2, [pc, #336]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fe fdb6 	bl	80029f0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fe fdb2 	bl	80029f0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0cb      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	4b49      	ldr	r3, [pc, #292]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ee      	beq.n	8003e88 <HAL_RCC_OscConfig+0x334>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eac:	f7fe fda0 	bl	80029f0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fd9c 	bl	80029f0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0b5      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ee      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4b39      	ldr	r3, [pc, #228]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	4a38      	ldr	r2, [pc, #224]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a1 	beq.w	8004034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef2:	4b34      	ldr	r3, [pc, #208]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d05c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d141      	bne.n	8003f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fd70 	bl	80029f0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe fd6c 	bl	80029f0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e087      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b27      	ldr	r3, [pc, #156]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	491b      	ldr	r1, [pc, #108]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe fd45 	bl	80029f0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe fd41 	bl	80029f0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e05c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7c:	4b11      	ldr	r3, [pc, #68]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x416>
 8003f88:	e054      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fd2e 	bl	80029f0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe fd2a 	bl	80029f0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e045      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x444>
 8003fb6:	e03d      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e038      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x4ec>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d028      	beq.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d121      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11a      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800

08004044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0cc      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b68      	ldr	r3, [pc, #416]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d90c      	bls.n	8004080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b65      	ldr	r3, [pc, #404]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b63      	ldr	r3, [pc, #396]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004098:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a58      	ldr	r2, [pc, #352]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b0:	4b53      	ldr	r3, [pc, #332]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a52      	ldr	r2, [pc, #328]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b50      	ldr	r3, [pc, #320]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d044      	beq.n	8004164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d119      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	4b3f      	ldr	r3, [pc, #252]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e067      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4934      	ldr	r1, [pc, #208]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004134:	f7fe fc5c 	bl	80029f0 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fe fc58 	bl	80029f0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b2b      	ldr	r3, [pc, #172]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004164:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20c      	bcs.n	800418c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b22      	ldr	r3, [pc, #136]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fbbc 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023c00 	.word	0x40023c00
 8004200:	40023800 	.word	0x40023800
 8004204:	0800af10 	.word	0x0800af10
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b094      	sub	sp, #80	@ 0x50
 8004216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004228:	4b79      	ldr	r3, [pc, #484]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d00d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x40>
 8004234:	2b08      	cmp	r3, #8
 8004236:	f200 80e1 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x3a>
 8004242:	e0db      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b73      	ldr	r3, [pc, #460]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 8004246:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004248:	e0db      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800424a:	4b73      	ldr	r3, [pc, #460]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x208>)
 800424c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424e:	e0d8      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004250:	4b6f      	ldr	r3, [pc, #444]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004258:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425a:	4b6d      	ldr	r3, [pc, #436]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d063      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b6a      	ldr	r3, [pc, #424]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004270:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
 800427e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	0159      	lsls	r1, r3, #5
 8004290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004294:	0150      	lsls	r0, r2, #5
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4621      	mov	r1, r4
 800429c:	1a51      	subs	r1, r2, r1
 800429e:	6139      	str	r1, [r7, #16]
 80042a0:	4629      	mov	r1, r5
 80042a2:	eb63 0301 	sbc.w	r3, r3, r1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b4:	4659      	mov	r1, fp
 80042b6:	018b      	lsls	r3, r1, #6
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042be:	4651      	mov	r1, sl
 80042c0:	018a      	lsls	r2, r1, #6
 80042c2:	4651      	mov	r1, sl
 80042c4:	ebb2 0801 	subs.w	r8, r2, r1
 80042c8:	4659      	mov	r1, fp
 80042ca:	eb63 0901 	sbc.w	r9, r3, r1
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e2:	4690      	mov	r8, r2
 80042e4:	4699      	mov	r9, r3
 80042e6:	4623      	mov	r3, r4
 80042e8:	eb18 0303 	adds.w	r3, r8, r3
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	462b      	mov	r3, r5
 80042f0:	eb49 0303 	adc.w	r3, r9, r3
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004302:	4629      	mov	r1, r5
 8004304:	024b      	lsls	r3, r1, #9
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800430c:	4621      	mov	r1, r4
 800430e:	024a      	lsls	r2, r1, #9
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004316:	2200      	movs	r2, #0
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004320:	f7fc fcba 	bl	8000c98 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800432c:	e058      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b38      	ldr	r3, [pc, #224]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	4618      	mov	r0, r3
 8004338:	4611      	mov	r1, r2
 800433a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
 8004344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	f04f 0000 	mov.w	r0, #0
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	0159      	lsls	r1, r3, #5
 8004356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435a:	0150      	lsls	r0, r2, #5
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4641      	mov	r1, r8
 8004362:	ebb2 0a01 	subs.w	sl, r2, r1
 8004366:	4649      	mov	r1, r9
 8004368:	eb63 0b01 	sbc.w	fp, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800437c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004380:	ebb2 040a 	subs.w	r4, r2, sl
 8004384:	eb63 050b 	sbc.w	r5, r3, fp
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	00eb      	lsls	r3, r5, #3
 8004392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	4614      	mov	r4, r2
 800439a:	461d      	mov	r5, r3
 800439c:	4643      	mov	r3, r8
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	464b      	mov	r3, r9
 80043a4:	eb45 0303 	adc.w	r3, r5, r3
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b6:	4629      	mov	r1, r5
 80043b8:	028b      	lsls	r3, r1, #10
 80043ba:	4621      	mov	r1, r4
 80043bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c0:	4621      	mov	r1, r4
 80043c2:	028a      	lsls	r2, r1, #10
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ca:	2200      	movs	r2, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	f7fc fc60 	bl	8000c98 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4613      	mov	r3, r2
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004404:	4618      	mov	r0, r3
 8004406:	3750      	adds	r7, #80	@ 0x50
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	007a1200 	.word	0x007a1200

0800441c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <HAL_RCC_GetHCLKFreq+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000000 	.word	0x20000000

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff0 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	@ (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	0800af20 	.word	0x0800af20

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff ffdc 	bl	800441c <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	@ (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	@ (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	0800af20 	.word	0x0800af20

08004484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e07b      	b.n	800458e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d108      	bne.n	80044b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a6:	d009      	beq.n	80044bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	61da      	str	r2, [r3, #28]
 80044ae:	e005      	b.n	80044bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fd2e 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004540:	ea42 0103 	orr.w	r1, r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	f003 0104 	and.w	r1, r3, #4
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	f003 0210 	and.w	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800457c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a6:	f7fe fa23 	bl	80029f0 <HAL_GetTick>
 80045aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
 80045be:	e12a      	b.n	8004816 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Transmit+0x36>
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e122      	b.n	8004816 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_SPI_Transmit+0x48>
 80045da:	2302      	movs	r3, #2
 80045dc:	e11b      	b.n	8004816 <HAL_SPI_Transmit+0x280>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2203      	movs	r2, #3
 80045ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462c:	d10f      	bne.n	800464e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800463c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800464c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d007      	beq.n	800466c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004674:	d152      	bne.n	800471c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Transmit+0xee>
 800467e:	8b7b      	ldrh	r3, [r7, #26]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d145      	bne.n	8004710 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	881a      	ldrh	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046a8:	e032      	b.n	8004710 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d112      	bne.n	80046de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	881a      	ldrh	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c8:	1c9a      	adds	r2, r3, #2
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046dc:	e018      	b.n	8004710 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046de:	f7fe f987 	bl	80029f0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d803      	bhi.n	80046f6 <HAL_SPI_Transmit+0x160>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d102      	bne.n	80046fc <HAL_SPI_Transmit+0x166>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e082      	b.n	8004816 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1c7      	bne.n	80046aa <HAL_SPI_Transmit+0x114>
 800471a:	e053      	b.n	80047c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_SPI_Transmit+0x194>
 8004724:	8b7b      	ldrh	r3, [r7, #26]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d147      	bne.n	80047ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004750:	e033      	b.n	80047ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d113      	bne.n	8004788 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	7812      	ldrb	r2, [r2, #0]
 800476c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004786:	e018      	b.n	80047ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004788:	f7fe f932 	bl	80029f0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d803      	bhi.n	80047a0 <HAL_SPI_Transmit+0x20a>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d102      	bne.n	80047a6 <HAL_SPI_Transmit+0x210>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e02d      	b.n	8004816 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1c6      	bne.n	8004752 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f8b1 	bl	8004930 <SPI_EndRxTxTransaction>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004814:	2300      	movs	r3, #0
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004830:	f7fe f8de 	bl	80029f0 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4413      	add	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004840:	f7fe f8d6 	bl	80029f0 <HAL_GetTick>
 8004844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004846:	4b39      	ldr	r3, [pc, #228]	@ (800492c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	015b      	lsls	r3, r3, #5
 800484c:	0d1b      	lsrs	r3, r3, #20
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004856:	e055      	b.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d051      	beq.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004860:	f7fe f8c6 	bl	80029f0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	429a      	cmp	r2, r3
 800486e:	d902      	bls.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d13d      	bne.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800488e:	d111      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004898:	d004      	beq.n	80048a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a2:	d107      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048bc:	d10f      	bne.n	80048de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e018      	b.n	8004924 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e002      	b.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	3b01      	subs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	429a      	cmp	r2, r3
 8004920:	d19a      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000000 	.word	0x20000000

08004930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2201      	movs	r2, #1
 8004944:	2102      	movs	r1, #2
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff ff6a 	bl	8004820 <SPI_WaitFlagStateUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e032      	b.n	80049c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004962:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <SPI_EndRxTxTransaction+0xa0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1b      	ldr	r2, [pc, #108]	@ (80049d4 <SPI_EndRxTxTransaction+0xa4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0d5b      	lsrs	r3, r3, #21
 800496e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004980:	d112      	bne.n	80049a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	2180      	movs	r1, #128	@ 0x80
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ff47 	bl	8004820 <SPI_WaitFlagStateUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d016      	beq.n	80049c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e00f      	b.n	80049c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049be:	2b80      	cmp	r3, #128	@ 0x80
 80049c0:	d0f2      	beq.n	80049a8 <SPI_EndRxTxTransaction+0x78>
 80049c2:	e000      	b.n	80049c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80049c4:	bf00      	nop
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000000 	.word	0x20000000
 80049d4:	165e9f81 	.word	0x165e9f81

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e041      	b.n	8004a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fd fea8 	bl	8002754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 f8f4 	bl	8004c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_ConfigClockSource+0x1c>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0b4      	b.n	8004bfc <HAL_TIM_ConfigClockSource+0x186>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ab0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ab8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aca:	d03e      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xd4>
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad0:	f200 8087 	bhi.w	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad8:	f000 8086 	beq.w	8004be8 <HAL_TIM_ConfigClockSource+0x172>
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	d87f      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae2:	2b70      	cmp	r3, #112	@ 0x70
 8004ae4:	d01a      	beq.n	8004b1c <HAL_TIM_ConfigClockSource+0xa6>
 8004ae6:	2b70      	cmp	r3, #112	@ 0x70
 8004ae8:	d87b      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004aea:	2b60      	cmp	r3, #96	@ 0x60
 8004aec:	d050      	beq.n	8004b90 <HAL_TIM_ConfigClockSource+0x11a>
 8004aee:	2b60      	cmp	r3, #96	@ 0x60
 8004af0:	d877      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004af2:	2b50      	cmp	r3, #80	@ 0x50
 8004af4:	d03c      	beq.n	8004b70 <HAL_TIM_ConfigClockSource+0xfa>
 8004af6:	2b50      	cmp	r3, #80	@ 0x50
 8004af8:	d873      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d058      	beq.n	8004bb0 <HAL_TIM_ConfigClockSource+0x13a>
 8004afe:	2b40      	cmp	r3, #64	@ 0x40
 8004b00:	d86f      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	2b30      	cmp	r3, #48	@ 0x30
 8004b04:	d064      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004b06:	2b30      	cmp	r3, #48	@ 0x30
 8004b08:	d86b      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d060      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d867      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d05c      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d05a      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1a:	e062      	b.n	8004be2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b2c:	f000 f96a 	bl	8004e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
      break;
 8004b48:	e04f      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b5a:	f000 f953 	bl	8004e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b6c:	609a      	str	r2, [r3, #8]
      break;
 8004b6e:	e03c      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f000 f8c7 	bl	8004d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2150      	movs	r1, #80	@ 0x50
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f920 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b8e:	e02c      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f000 f8e6 	bl	8004d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2160      	movs	r1, #96	@ 0x60
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f910 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004bae:	e01c      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f000 f8a7 	bl	8004d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2140      	movs	r1, #64	@ 0x40
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f900 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004bce:	e00c      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f000 f8f7 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004be0:	e003      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      break;
 8004be6:	e000      	b.n	8004bea <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004be8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a37      	ldr	r2, [pc, #220]	@ (8004cf4 <TIM_Base_SetConfig+0xf0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00f      	beq.n	8004c3c <TIM_Base_SetConfig+0x38>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c22:	d00b      	beq.n	8004c3c <TIM_Base_SetConfig+0x38>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a34      	ldr	r2, [pc, #208]	@ (8004cf8 <TIM_Base_SetConfig+0xf4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_Base_SetConfig+0x38>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	@ (8004cfc <TIM_Base_SetConfig+0xf8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0x38>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a32      	ldr	r2, [pc, #200]	@ (8004d00 <TIM_Base_SetConfig+0xfc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d108      	bne.n	8004c4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a28      	ldr	r2, [pc, #160]	@ (8004cf4 <TIM_Base_SetConfig+0xf0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01b      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5c:	d017      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a25      	ldr	r2, [pc, #148]	@ (8004cf8 <TIM_Base_SetConfig+0xf4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <TIM_Base_SetConfig+0xf8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <TIM_Base_SetConfig+0xfc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a22      	ldr	r2, [pc, #136]	@ (8004d04 <TIM_Base_SetConfig+0x100>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <TIM_Base_SetConfig+0x104>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_Base_SetConfig+0x8a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a20      	ldr	r2, [pc, #128]	@ (8004d0c <TIM_Base_SetConfig+0x108>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf4 <TIM_Base_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d103      	bne.n	8004cce <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f043 0204 	orr.w	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800

08004d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 030a 	bic.w	r3, r3, #10
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f023 0210 	bic.w	r2, r3, #16
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f043 0307 	orr.w	r3, r3, #7
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	021a      	lsls	r2, r3, #8
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e050      	b.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea8:	d013      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a18      	ldr	r2, [pc, #96]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	@ (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10c      	bne.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40014000 	.word	0x40014000

08004f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e042      	b.n	8004fb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fd fc50 	bl	80027ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	@ 0x24
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa09 	bl	800537c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	@ 0x28
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d175      	bne.n	80050cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_UART_Transmit+0x2c>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e06e      	b.n	80050ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2221      	movs	r2, #33	@ 0x21
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffe:	f7fd fcf7 	bl	80029f0 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005018:	d108      	bne.n	800502c <HAL_UART_Transmit+0x6c>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e003      	b.n	8005034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005034:	e02e      	b.n	8005094 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	2180      	movs	r1, #128	@ 0x80
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f8df 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e03a      	b.n	80050ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3302      	adds	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e007      	b.n	8005086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1cb      	bne.n	8005036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2140      	movs	r1, #64	@ 0x40
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f8ab 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e006      	b.n	80050ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08a      	sub	sp, #40	@ 0x28
 80050da:	af02      	add	r7, sp, #8
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	f040 8081 	bne.w	80051fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Receive+0x2e>
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e079      	b.n	80051fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2222      	movs	r2, #34	@ 0x22
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800511c:	f7fd fc68 	bl	80029f0 <HAL_GetTick>
 8005120:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005136:	d108      	bne.n	800514a <HAL_UART_Receive+0x74>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e003      	b.n	8005152 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005152:	e047      	b.n	80051e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	2120      	movs	r1, #32
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f850 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e042      	b.n	80051fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10c      	bne.n	8005196 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005188:	b29a      	uxth	r2, r3
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	3302      	adds	r3, #2
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e01f      	b.n	80051d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519e:	d007      	beq.n	80051b0 <HAL_UART_Receive+0xda>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <HAL_UART_Receive+0xe8>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e008      	b.n	80051d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1b2      	bne.n	8005154 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005214:	e03b      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d037      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fd fbe7 	bl	80029f0 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <UART_WaitOnFlagUntilTimeout+0x30>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e03a      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d023      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b80      	cmp	r3, #128	@ 0x80
 800524a:	d020      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x8a>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	d01d      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d116      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f81d 	bl	80052b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2208      	movs	r2, #8
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e00f      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d0b4      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b095      	sub	sp, #84	@ 0x54
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052de:	643a      	str	r2, [r7, #64]	@ 0x40
 80052e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e5      	bne.n	80052be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	61fb      	str	r3, [r7, #28]
   return(result);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e5      	bne.n	80052f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	2b01      	cmp	r3, #1
 800532c:	d119      	bne.n	8005362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	60bb      	str	r3, [r7, #8]
   return(result);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0310 	bic.w	r3, r3, #16
 8005344:	647b      	str	r3, [r7, #68]	@ 0x44
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800534e:	61ba      	str	r2, [r7, #24]
 8005350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6979      	ldr	r1, [r7, #20]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	613b      	str	r3, [r7, #16]
   return(result);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005370:	bf00      	nop
 8005372:	3754      	adds	r7, #84	@ 0x54
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800537c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005380:	b0c0      	sub	sp, #256	@ 0x100
 8005382:	af00      	add	r7, sp, #0
 8005384:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	68d9      	ldr	r1, [r3, #12]
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	ea40 0301 	orr.w	r3, r0, r1
 80053a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053d4:	f021 010c 	bic.w	r1, r1, #12
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053e2:	430b      	orrs	r3, r1
 80053e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	6999      	ldr	r1, [r3, #24]
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	ea40 0301 	orr.w	r3, r0, r1
 8005402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b8f      	ldr	r3, [pc, #572]	@ (8005648 <UART_SetConfig+0x2cc>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d005      	beq.n	800541c <UART_SetConfig+0xa0>
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b8d      	ldr	r3, [pc, #564]	@ (800564c <UART_SetConfig+0x2d0>)
 8005418:	429a      	cmp	r2, r3
 800541a:	d104      	bne.n	8005426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7ff f81e 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 8005420:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005424:	e003      	b.n	800542e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005426:	f7ff f805 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 800542a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005438:	f040 810c 	bne.w	8005654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800543c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005446:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800544a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	1891      	adds	r1, r2, r2
 8005454:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005456:	415b      	adcs	r3, r3
 8005458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800545a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800545e:	4621      	mov	r1, r4
 8005460:	eb12 0801 	adds.w	r8, r2, r1
 8005464:	4629      	mov	r1, r5
 8005466:	eb43 0901 	adc.w	r9, r3, r1
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800547a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800547e:	4690      	mov	r8, r2
 8005480:	4699      	mov	r9, r3
 8005482:	4623      	mov	r3, r4
 8005484:	eb18 0303 	adds.w	r3, r8, r3
 8005488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800548c:	462b      	mov	r3, r5
 800548e:	eb49 0303 	adc.w	r3, r9, r3
 8005492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054aa:	460b      	mov	r3, r1
 80054ac:	18db      	adds	r3, r3, r3
 80054ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b0:	4613      	mov	r3, r2
 80054b2:	eb42 0303 	adc.w	r3, r2, r3
 80054b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80054b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054c0:	f7fb fbea 	bl	8000c98 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4b61      	ldr	r3, [pc, #388]	@ (8005650 <UART_SetConfig+0x2d4>)
 80054ca:	fba3 2302 	umull	r2, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	011c      	lsls	r4, r3, #4
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054ec:	415b      	adcs	r3, r3
 80054ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054f4:	4641      	mov	r1, r8
 80054f6:	eb12 0a01 	adds.w	sl, r2, r1
 80054fa:	4649      	mov	r1, r9
 80054fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800550c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005514:	4692      	mov	sl, r2
 8005516:	469b      	mov	fp, r3
 8005518:	4643      	mov	r3, r8
 800551a:	eb1a 0303 	adds.w	r3, sl, r3
 800551e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005522:	464b      	mov	r3, r9
 8005524:	eb4b 0303 	adc.w	r3, fp, r3
 8005528:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005538:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800553c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005540:	460b      	mov	r3, r1
 8005542:	18db      	adds	r3, r3, r3
 8005544:	643b      	str	r3, [r7, #64]	@ 0x40
 8005546:	4613      	mov	r3, r2
 8005548:	eb42 0303 	adc.w	r3, r2, r3
 800554c:	647b      	str	r3, [r7, #68]	@ 0x44
 800554e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005556:	f7fb fb9f 	bl	8000c98 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4611      	mov	r1, r2
 8005560:	4b3b      	ldr	r3, [pc, #236]	@ (8005650 <UART_SetConfig+0x2d4>)
 8005562:	fba3 2301 	umull	r2, r3, r3, r1
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	2264      	movs	r2, #100	@ 0x64
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	1acb      	subs	r3, r1, r3
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005576:	4b36      	ldr	r3, [pc, #216]	@ (8005650 <UART_SetConfig+0x2d4>)
 8005578:	fba3 2302 	umull	r2, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005584:	441c      	add	r4, r3
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005590:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055a0:	415b      	adcs	r3, r3
 80055a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055a8:	4641      	mov	r1, r8
 80055aa:	1851      	adds	r1, r2, r1
 80055ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80055ae:	4649      	mov	r1, r9
 80055b0:	414b      	adcs	r3, r1
 80055b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055c0:	4659      	mov	r1, fp
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ca:	4651      	mov	r1, sl
 80055cc:	00ca      	lsls	r2, r1, #3
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4642      	mov	r2, r8
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055dc:	464b      	mov	r3, r9
 80055de:	460a      	mov	r2, r1
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055fc:	460b      	mov	r3, r1
 80055fe:	18db      	adds	r3, r3, r3
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005602:	4613      	mov	r3, r2
 8005604:	eb42 0303 	adc.w	r3, r2, r3
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800560e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005612:	f7fb fb41 	bl	8000c98 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <UART_SetConfig+0x2d4>)
 800561c:	fba3 1302 	umull	r1, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2164      	movs	r1, #100	@ 0x64
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	3332      	adds	r3, #50	@ 0x32
 800562e:	4a08      	ldr	r2, [pc, #32]	@ (8005650 <UART_SetConfig+0x2d4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 0207 	and.w	r2, r3, #7
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4422      	add	r2, r4
 8005642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005644:	e106      	b.n	8005854 <UART_SetConfig+0x4d8>
 8005646:	bf00      	nop
 8005648:	40011000 	.word	0x40011000
 800564c:	40011400 	.word	0x40011400
 8005650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800565e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005666:	4642      	mov	r2, r8
 8005668:	464b      	mov	r3, r9
 800566a:	1891      	adds	r1, r2, r2
 800566c:	6239      	str	r1, [r7, #32]
 800566e:	415b      	adcs	r3, r3
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
 8005672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005676:	4641      	mov	r1, r8
 8005678:	1854      	adds	r4, r2, r1
 800567a:	4649      	mov	r1, r9
 800567c:	eb43 0501 	adc.w	r5, r3, r1
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	00eb      	lsls	r3, r5, #3
 800568a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568e:	00e2      	lsls	r2, r4, #3
 8005690:	4614      	mov	r4, r2
 8005692:	461d      	mov	r5, r3
 8005694:	4643      	mov	r3, r8
 8005696:	18e3      	adds	r3, r4, r3
 8005698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800569c:	464b      	mov	r3, r9
 800569e:	eb45 0303 	adc.w	r3, r5, r3
 80056a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056c2:	4629      	mov	r1, r5
 80056c4:	008b      	lsls	r3, r1, #2
 80056c6:	4621      	mov	r1, r4
 80056c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056cc:	4621      	mov	r1, r4
 80056ce:	008a      	lsls	r2, r1, #2
 80056d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056d4:	f7fb fae0 	bl	8000c98 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b60      	ldr	r3, [pc, #384]	@ (8005860 <UART_SetConfig+0x4e4>)
 80056de:	fba3 2302 	umull	r2, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	011c      	lsls	r4, r3, #4
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	61b9      	str	r1, [r7, #24]
 8005700:	415b      	adcs	r3, r3
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005708:	4641      	mov	r1, r8
 800570a:	1851      	adds	r1, r2, r1
 800570c:	6139      	str	r1, [r7, #16]
 800570e:	4649      	mov	r1, r9
 8005710:	414b      	adcs	r3, r1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005720:	4659      	mov	r1, fp
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4651      	mov	r1, sl
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4642      	mov	r2, r8
 8005736:	189b      	adds	r3, r3, r2
 8005738:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005752:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005760:	4649      	mov	r1, r9
 8005762:	008b      	lsls	r3, r1, #2
 8005764:	4641      	mov	r1, r8
 8005766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800576a:	4641      	mov	r1, r8
 800576c:	008a      	lsls	r2, r1, #2
 800576e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005772:	f7fb fa91 	bl	8000c98 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4611      	mov	r1, r2
 800577c:	4b38      	ldr	r3, [pc, #224]	@ (8005860 <UART_SetConfig+0x4e4>)
 800577e:	fba3 2301 	umull	r2, r3, r3, r1
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	2264      	movs	r2, #100	@ 0x64
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	1acb      	subs	r3, r1, r3
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	3332      	adds	r3, #50	@ 0x32
 8005790:	4a33      	ldr	r2, [pc, #204]	@ (8005860 <UART_SetConfig+0x4e4>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800579c:	441c      	add	r4, r3
 800579e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a2:	2200      	movs	r2, #0
 80057a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80057a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	415b      	adcs	r3, r3
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057bc:	4641      	mov	r1, r8
 80057be:	1851      	adds	r1, r2, r1
 80057c0:	6039      	str	r1, [r7, #0]
 80057c2:	4649      	mov	r1, r9
 80057c4:	414b      	adcs	r3, r1
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057d4:	4659      	mov	r1, fp
 80057d6:	00cb      	lsls	r3, r1, #3
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057de:	4651      	mov	r1, sl
 80057e0:	00ca      	lsls	r2, r1, #3
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	4642      	mov	r2, r8
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ee:	464b      	mov	r3, r9
 80057f0:	460a      	mov	r2, r1
 80057f2:	eb42 0303 	adc.w	r3, r2, r3
 80057f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	663b      	str	r3, [r7, #96]	@ 0x60
 8005802:	667a      	str	r2, [r7, #100]	@ 0x64
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005810:	4649      	mov	r1, r9
 8005812:	008b      	lsls	r3, r1, #2
 8005814:	4641      	mov	r1, r8
 8005816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581a:	4641      	mov	r1, r8
 800581c:	008a      	lsls	r2, r1, #2
 800581e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005822:	f7fb fa39 	bl	8000c98 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <UART_SetConfig+0x4e4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	@ 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	3332      	adds	r3, #50	@ 0x32
 800583e:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <UART_SetConfig+0x4e4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 020f 	and.w	r2, r3, #15
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4422      	add	r2, r4
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005860:	51eb851f 	.word	0x51eb851f

08005864 <__cvt>:
 8005864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	ec57 6b10 	vmov	r6, r7, d0
 800586c:	2f00      	cmp	r7, #0
 800586e:	460c      	mov	r4, r1
 8005870:	4619      	mov	r1, r3
 8005872:	463b      	mov	r3, r7
 8005874:	bfbb      	ittet	lt
 8005876:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800587a:	461f      	movlt	r7, r3
 800587c:	2300      	movge	r3, #0
 800587e:	232d      	movlt	r3, #45	@ 0x2d
 8005880:	700b      	strb	r3, [r1, #0]
 8005882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005884:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005888:	4691      	mov	r9, r2
 800588a:	f023 0820 	bic.w	r8, r3, #32
 800588e:	bfbc      	itt	lt
 8005890:	4632      	movlt	r2, r6
 8005892:	4616      	movlt	r6, r2
 8005894:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005898:	d005      	beq.n	80058a6 <__cvt+0x42>
 800589a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800589e:	d100      	bne.n	80058a2 <__cvt+0x3e>
 80058a0:	3401      	adds	r4, #1
 80058a2:	2102      	movs	r1, #2
 80058a4:	e000      	b.n	80058a8 <__cvt+0x44>
 80058a6:	2103      	movs	r1, #3
 80058a8:	ab03      	add	r3, sp, #12
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	ab02      	add	r3, sp, #8
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	ec47 6b10 	vmov	d0, r6, r7
 80058b4:	4653      	mov	r3, sl
 80058b6:	4622      	mov	r2, r4
 80058b8:	f001 f8b6 	bl	8006a28 <_dtoa_r>
 80058bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80058c0:	4605      	mov	r5, r0
 80058c2:	d119      	bne.n	80058f8 <__cvt+0x94>
 80058c4:	f019 0f01 	tst.w	r9, #1
 80058c8:	d00e      	beq.n	80058e8 <__cvt+0x84>
 80058ca:	eb00 0904 	add.w	r9, r0, r4
 80058ce:	2200      	movs	r2, #0
 80058d0:	2300      	movs	r3, #0
 80058d2:	4630      	mov	r0, r6
 80058d4:	4639      	mov	r1, r7
 80058d6:	f7fb f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80058da:	b108      	cbz	r0, 80058e0 <__cvt+0x7c>
 80058dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80058e0:	2230      	movs	r2, #48	@ 0x30
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	454b      	cmp	r3, r9
 80058e6:	d31e      	bcc.n	8005926 <__cvt+0xc2>
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058ec:	1b5b      	subs	r3, r3, r5
 80058ee:	4628      	mov	r0, r5
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	b004      	add	sp, #16
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058fc:	eb00 0904 	add.w	r9, r0, r4
 8005900:	d1e5      	bne.n	80058ce <__cvt+0x6a>
 8005902:	7803      	ldrb	r3, [r0, #0]
 8005904:	2b30      	cmp	r3, #48	@ 0x30
 8005906:	d10a      	bne.n	800591e <__cvt+0xba>
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	4630      	mov	r0, r6
 800590e:	4639      	mov	r1, r7
 8005910:	f7fb f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005914:	b918      	cbnz	r0, 800591e <__cvt+0xba>
 8005916:	f1c4 0401 	rsb	r4, r4, #1
 800591a:	f8ca 4000 	str.w	r4, [sl]
 800591e:	f8da 3000 	ldr.w	r3, [sl]
 8005922:	4499      	add	r9, r3
 8005924:	e7d3      	b.n	80058ce <__cvt+0x6a>
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	9103      	str	r1, [sp, #12]
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e7d9      	b.n	80058e2 <__cvt+0x7e>

0800592e <__exponent>:
 800592e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005930:	2900      	cmp	r1, #0
 8005932:	bfba      	itte	lt
 8005934:	4249      	neglt	r1, r1
 8005936:	232d      	movlt	r3, #45	@ 0x2d
 8005938:	232b      	movge	r3, #43	@ 0x2b
 800593a:	2909      	cmp	r1, #9
 800593c:	7002      	strb	r2, [r0, #0]
 800593e:	7043      	strb	r3, [r0, #1]
 8005940:	dd29      	ble.n	8005996 <__exponent+0x68>
 8005942:	f10d 0307 	add.w	r3, sp, #7
 8005946:	461d      	mov	r5, r3
 8005948:	270a      	movs	r7, #10
 800594a:	461a      	mov	r2, r3
 800594c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005950:	fb07 1416 	mls	r4, r7, r6, r1
 8005954:	3430      	adds	r4, #48	@ 0x30
 8005956:	f802 4c01 	strb.w	r4, [r2, #-1]
 800595a:	460c      	mov	r4, r1
 800595c:	2c63      	cmp	r4, #99	@ 0x63
 800595e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005962:	4631      	mov	r1, r6
 8005964:	dcf1      	bgt.n	800594a <__exponent+0x1c>
 8005966:	3130      	adds	r1, #48	@ 0x30
 8005968:	1e94      	subs	r4, r2, #2
 800596a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800596e:	1c41      	adds	r1, r0, #1
 8005970:	4623      	mov	r3, r4
 8005972:	42ab      	cmp	r3, r5
 8005974:	d30a      	bcc.n	800598c <__exponent+0x5e>
 8005976:	f10d 0309 	add.w	r3, sp, #9
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	42ac      	cmp	r4, r5
 800597e:	bf88      	it	hi
 8005980:	2300      	movhi	r3, #0
 8005982:	3302      	adds	r3, #2
 8005984:	4403      	add	r3, r0
 8005986:	1a18      	subs	r0, r3, r0
 8005988:	b003      	add	sp, #12
 800598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005990:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005994:	e7ed      	b.n	8005972 <__exponent+0x44>
 8005996:	2330      	movs	r3, #48	@ 0x30
 8005998:	3130      	adds	r1, #48	@ 0x30
 800599a:	7083      	strb	r3, [r0, #2]
 800599c:	70c1      	strb	r1, [r0, #3]
 800599e:	1d03      	adds	r3, r0, #4
 80059a0:	e7f1      	b.n	8005986 <__exponent+0x58>
	...

080059a4 <_printf_float>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	b08d      	sub	sp, #52	@ 0x34
 80059aa:	460c      	mov	r4, r1
 80059ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80059b0:	4616      	mov	r6, r2
 80059b2:	461f      	mov	r7, r3
 80059b4:	4605      	mov	r5, r0
 80059b6:	f000 ff31 	bl	800681c <_localeconv_r>
 80059ba:	6803      	ldr	r3, [r0, #0]
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fa fc5e 	bl	8000280 <strlen>
 80059c4:	2300      	movs	r3, #0
 80059c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80059c8:	f8d8 3000 	ldr.w	r3, [r8]
 80059cc:	9005      	str	r0, [sp, #20]
 80059ce:	3307      	adds	r3, #7
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	f103 0208 	add.w	r2, r3, #8
 80059d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80059dc:	f8d4 b000 	ldr.w	fp, [r4]
 80059e0:	f8c8 2000 	str.w	r2, [r8]
 80059e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059ec:	9307      	str	r3, [sp, #28]
 80059ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80059f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059fa:	4b9c      	ldr	r3, [pc, #624]	@ (8005c6c <_printf_float+0x2c8>)
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005a00:	f7fb f89c 	bl	8000b3c <__aeabi_dcmpun>
 8005a04:	bb70      	cbnz	r0, 8005a64 <_printf_float+0xc0>
 8005a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0a:	4b98      	ldr	r3, [pc, #608]	@ (8005c6c <_printf_float+0x2c8>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	f7fb f876 	bl	8000b00 <__aeabi_dcmple>
 8005a14:	bb30      	cbnz	r0, 8005a64 <_printf_float+0xc0>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fb f865 	bl	8000aec <__aeabi_dcmplt>
 8005a22:	b110      	cbz	r0, 8005a2a <_printf_float+0x86>
 8005a24:	232d      	movs	r3, #45	@ 0x2d
 8005a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a2a:	4a91      	ldr	r2, [pc, #580]	@ (8005c70 <_printf_float+0x2cc>)
 8005a2c:	4b91      	ldr	r3, [pc, #580]	@ (8005c74 <_printf_float+0x2d0>)
 8005a2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a32:	bf8c      	ite	hi
 8005a34:	4690      	movhi	r8, r2
 8005a36:	4698      	movls	r8, r3
 8005a38:	2303      	movs	r3, #3
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	f02b 0304 	bic.w	r3, fp, #4
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	f04f 0900 	mov.w	r9, #0
 8005a46:	9700      	str	r7, [sp, #0]
 8005a48:	4633      	mov	r3, r6
 8005a4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f9d2 	bl	8005df8 <_printf_common>
 8005a54:	3001      	adds	r0, #1
 8005a56:	f040 808d 	bne.w	8005b74 <_printf_float+0x1d0>
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	b00d      	add	sp, #52	@ 0x34
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	4640      	mov	r0, r8
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	f7fb f866 	bl	8000b3c <__aeabi_dcmpun>
 8005a70:	b140      	cbz	r0, 8005a84 <_printf_float+0xe0>
 8005a72:	464b      	mov	r3, r9
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bfbc      	itt	lt
 8005a78:	232d      	movlt	r3, #45	@ 0x2d
 8005a7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c78 <_printf_float+0x2d4>)
 8005a80:	4b7e      	ldr	r3, [pc, #504]	@ (8005c7c <_printf_float+0x2d8>)
 8005a82:	e7d4      	b.n	8005a2e <_printf_float+0x8a>
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a8a:	9206      	str	r2, [sp, #24]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	d13b      	bne.n	8005b08 <_printf_float+0x164>
 8005a90:	2306      	movs	r3, #6
 8005a92:	6063      	str	r3, [r4, #4]
 8005a94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005aa0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005aa4:	ab09      	add	r3, sp, #36	@ 0x24
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	6861      	ldr	r1, [r4, #4]
 8005aaa:	ec49 8b10 	vmov	d0, r8, r9
 8005aae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f7ff fed6 	bl	8005864 <__cvt>
 8005ab8:	9b06      	ldr	r3, [sp, #24]
 8005aba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005abc:	2b47      	cmp	r3, #71	@ 0x47
 8005abe:	4680      	mov	r8, r0
 8005ac0:	d129      	bne.n	8005b16 <_printf_float+0x172>
 8005ac2:	1cc8      	adds	r0, r1, #3
 8005ac4:	db02      	blt.n	8005acc <_printf_float+0x128>
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	dd41      	ble.n	8005b50 <_printf_float+0x1ac>
 8005acc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ad0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ad4:	3901      	subs	r1, #1
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005adc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ade:	f7ff ff26 	bl	800592e <__exponent>
 8005ae2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ae4:	1813      	adds	r3, r2, r0
 8005ae6:	2a01      	cmp	r2, #1
 8005ae8:	4681      	mov	r9, r0
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	dc02      	bgt.n	8005af4 <_printf_float+0x150>
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	07d2      	lsls	r2, r2, #31
 8005af2:	d501      	bpl.n	8005af8 <_printf_float+0x154>
 8005af4:	3301      	adds	r3, #1
 8005af6:	6123      	str	r3, [r4, #16]
 8005af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0a2      	beq.n	8005a46 <_printf_float+0xa2>
 8005b00:	232d      	movs	r3, #45	@ 0x2d
 8005b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b06:	e79e      	b.n	8005a46 <_printf_float+0xa2>
 8005b08:	9a06      	ldr	r2, [sp, #24]
 8005b0a:	2a47      	cmp	r2, #71	@ 0x47
 8005b0c:	d1c2      	bne.n	8005a94 <_printf_float+0xf0>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1c0      	bne.n	8005a94 <_printf_float+0xf0>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e7bd      	b.n	8005a92 <_printf_float+0xee>
 8005b16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b1a:	d9db      	bls.n	8005ad4 <_printf_float+0x130>
 8005b1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b20:	d118      	bne.n	8005b54 <_printf_float+0x1b0>
 8005b22:	2900      	cmp	r1, #0
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	dd0b      	ble.n	8005b40 <_printf_float+0x19c>
 8005b28:	6121      	str	r1, [r4, #16]
 8005b2a:	b913      	cbnz	r3, 8005b32 <_printf_float+0x18e>
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	07d0      	lsls	r0, r2, #31
 8005b30:	d502      	bpl.n	8005b38 <_printf_float+0x194>
 8005b32:	3301      	adds	r3, #1
 8005b34:	440b      	add	r3, r1
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	e7db      	b.n	8005af8 <_printf_float+0x154>
 8005b40:	b913      	cbnz	r3, 8005b48 <_printf_float+0x1a4>
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	07d2      	lsls	r2, r2, #31
 8005b46:	d501      	bpl.n	8005b4c <_printf_float+0x1a8>
 8005b48:	3302      	adds	r3, #2
 8005b4a:	e7f4      	b.n	8005b36 <_printf_float+0x192>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e7f2      	b.n	8005b36 <_printf_float+0x192>
 8005b50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b56:	4299      	cmp	r1, r3
 8005b58:	db05      	blt.n	8005b66 <_printf_float+0x1c2>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	6121      	str	r1, [r4, #16]
 8005b5e:	07d8      	lsls	r0, r3, #31
 8005b60:	d5ea      	bpl.n	8005b38 <_printf_float+0x194>
 8005b62:	1c4b      	adds	r3, r1, #1
 8005b64:	e7e7      	b.n	8005b36 <_printf_float+0x192>
 8005b66:	2900      	cmp	r1, #0
 8005b68:	bfd4      	ite	le
 8005b6a:	f1c1 0202 	rsble	r2, r1, #2
 8005b6e:	2201      	movgt	r2, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	e7e0      	b.n	8005b36 <_printf_float+0x192>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	055a      	lsls	r2, r3, #21
 8005b78:	d407      	bmi.n	8005b8a <_printf_float+0x1e6>
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	d12b      	bne.n	8005be0 <_printf_float+0x23c>
 8005b88:	e767      	b.n	8005a5a <_printf_float+0xb6>
 8005b8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b8e:	f240 80dd 	bls.w	8005d4c <_printf_float+0x3a8>
 8005b92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f7fa ff9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d033      	beq.n	8005c0a <_printf_float+0x266>
 8005ba2:	4a37      	ldr	r2, [pc, #220]	@ (8005c80 <_printf_float+0x2dc>)
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	f43f af54 	beq.w	8005a5a <_printf_float+0xb6>
 8005bb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005bb6:	4543      	cmp	r3, r8
 8005bb8:	db02      	blt.n	8005bc0 <_printf_float+0x21c>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	07d8      	lsls	r0, r3, #31
 8005bbe:	d50f      	bpl.n	8005be0 <_printf_float+0x23c>
 8005bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af45 	beq.w	8005a5a <_printf_float+0xb6>
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bd8:	f104 0a1a 	add.w	sl, r4, #26
 8005bdc:	45c8      	cmp	r8, r9
 8005bde:	dc09      	bgt.n	8005bf4 <_printf_float+0x250>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	079b      	lsls	r3, r3, #30
 8005be4:	f100 8103 	bmi.w	8005dee <_printf_float+0x44a>
 8005be8:	68e0      	ldr	r0, [r4, #12]
 8005bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bec:	4298      	cmp	r0, r3
 8005bee:	bfb8      	it	lt
 8005bf0:	4618      	movlt	r0, r3
 8005bf2:	e734      	b.n	8005a5e <_printf_float+0xba>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4652      	mov	r2, sl
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af2b 	beq.w	8005a5a <_printf_float+0xb6>
 8005c04:	f109 0901 	add.w	r9, r9, #1
 8005c08:	e7e8      	b.n	8005bdc <_printf_float+0x238>
 8005c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc39      	bgt.n	8005c84 <_printf_float+0x2e0>
 8005c10:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <_printf_float+0x2dc>)
 8005c12:	2301      	movs	r3, #1
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f af1d 	beq.w	8005a5a <_printf_float+0xb6>
 8005c20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005c24:	ea59 0303 	orrs.w	r3, r9, r3
 8005c28:	d102      	bne.n	8005c30 <_printf_float+0x28c>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	07d9      	lsls	r1, r3, #31
 8005c2e:	d5d7      	bpl.n	8005be0 <_printf_float+0x23c>
 8005c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f af0d 	beq.w	8005a5a <_printf_float+0xb6>
 8005c40:	f04f 0a00 	mov.w	sl, #0
 8005c44:	f104 0b1a 	add.w	fp, r4, #26
 8005c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4a:	425b      	negs	r3, r3
 8005c4c:	4553      	cmp	r3, sl
 8005c4e:	dc01      	bgt.n	8005c54 <_printf_float+0x2b0>
 8005c50:	464b      	mov	r3, r9
 8005c52:	e793      	b.n	8005b7c <_printf_float+0x1d8>
 8005c54:	2301      	movs	r3, #1
 8005c56:	465a      	mov	r2, fp
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f aefb 	beq.w	8005a5a <_printf_float+0xb6>
 8005c64:	f10a 0a01 	add.w	sl, sl, #1
 8005c68:	e7ee      	b.n	8005c48 <_printf_float+0x2a4>
 8005c6a:	bf00      	nop
 8005c6c:	7fefffff 	.word	0x7fefffff
 8005c70:	0800af2c 	.word	0x0800af2c
 8005c74:	0800af28 	.word	0x0800af28
 8005c78:	0800af34 	.word	0x0800af34
 8005c7c:	0800af30 	.word	0x0800af30
 8005c80:	0800af38 	.word	0x0800af38
 8005c84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c8a:	4553      	cmp	r3, sl
 8005c8c:	bfa8      	it	ge
 8005c8e:	4653      	movge	r3, sl
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	4699      	mov	r9, r3
 8005c94:	dc36      	bgt.n	8005d04 <_printf_float+0x360>
 8005c96:	f04f 0b00 	mov.w	fp, #0
 8005c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c9e:	f104 021a 	add.w	r2, r4, #26
 8005ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ca4:	9306      	str	r3, [sp, #24]
 8005ca6:	eba3 0309 	sub.w	r3, r3, r9
 8005caa:	455b      	cmp	r3, fp
 8005cac:	dc31      	bgt.n	8005d12 <_printf_float+0x36e>
 8005cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb0:	459a      	cmp	sl, r3
 8005cb2:	dc3a      	bgt.n	8005d2a <_printf_float+0x386>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	07da      	lsls	r2, r3, #31
 8005cb8:	d437      	bmi.n	8005d2a <_printf_float+0x386>
 8005cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cbc:	ebaa 0903 	sub.w	r9, sl, r3
 8005cc0:	9b06      	ldr	r3, [sp, #24]
 8005cc2:	ebaa 0303 	sub.w	r3, sl, r3
 8005cc6:	4599      	cmp	r9, r3
 8005cc8:	bfa8      	it	ge
 8005cca:	4699      	movge	r9, r3
 8005ccc:	f1b9 0f00 	cmp.w	r9, #0
 8005cd0:	dc33      	bgt.n	8005d3a <_printf_float+0x396>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cda:	f104 0b1a 	add.w	fp, r4, #26
 8005cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ce4:	eba3 0309 	sub.w	r3, r3, r9
 8005ce8:	4543      	cmp	r3, r8
 8005cea:	f77f af79 	ble.w	8005be0 <_printf_float+0x23c>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	465a      	mov	r2, fp
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f aeae 	beq.w	8005a5a <_printf_float+0xb6>
 8005cfe:	f108 0801 	add.w	r8, r8, #1
 8005d02:	e7ec      	b.n	8005cde <_printf_float+0x33a>
 8005d04:	4642      	mov	r2, r8
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d1c2      	bne.n	8005c96 <_printf_float+0x2f2>
 8005d10:	e6a3      	b.n	8005a5a <_printf_float+0xb6>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	9206      	str	r2, [sp, #24]
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f ae9c 	beq.w	8005a5a <_printf_float+0xb6>
 8005d22:	9a06      	ldr	r2, [sp, #24]
 8005d24:	f10b 0b01 	add.w	fp, fp, #1
 8005d28:	e7bb      	b.n	8005ca2 <_printf_float+0x2fe>
 8005d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	d1c0      	bne.n	8005cba <_printf_float+0x316>
 8005d38:	e68f      	b.n	8005a5a <_printf_float+0xb6>
 8005d3a:	9a06      	ldr	r2, [sp, #24]
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	4442      	add	r2, r8
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	d1c3      	bne.n	8005cd2 <_printf_float+0x32e>
 8005d4a:	e686      	b.n	8005a5a <_printf_float+0xb6>
 8005d4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d50:	f1ba 0f01 	cmp.w	sl, #1
 8005d54:	dc01      	bgt.n	8005d5a <_printf_float+0x3b6>
 8005d56:	07db      	lsls	r3, r3, #31
 8005d58:	d536      	bpl.n	8005dc8 <_printf_float+0x424>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f ae78 	beq.w	8005a5a <_printf_float+0xb6>
 8005d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f ae70 	beq.w	8005a5a <_printf_float+0xb6>
 8005d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d86:	f7fa fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8a:	b9c0      	cbnz	r0, 8005dbe <_printf_float+0x41a>
 8005d8c:	4653      	mov	r3, sl
 8005d8e:	f108 0201 	add.w	r2, r8, #1
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d10c      	bne.n	8005db6 <_printf_float+0x412>
 8005d9c:	e65d      	b.n	8005a5a <_printf_float+0xb6>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	465a      	mov	r2, fp
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	f43f ae56 	beq.w	8005a5a <_printf_float+0xb6>
 8005dae:	f108 0801 	add.w	r8, r8, #1
 8005db2:	45d0      	cmp	r8, sl
 8005db4:	dbf3      	blt.n	8005d9e <_printf_float+0x3fa>
 8005db6:	464b      	mov	r3, r9
 8005db8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005dbc:	e6df      	b.n	8005b7e <_printf_float+0x1da>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	f104 0b1a 	add.w	fp, r4, #26
 8005dc6:	e7f4      	b.n	8005db2 <_printf_float+0x40e>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4642      	mov	r2, r8
 8005dcc:	e7e1      	b.n	8005d92 <_printf_float+0x3ee>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	464a      	mov	r2, r9
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b8      	blx	r7
 8005dd8:	3001      	adds	r0, #1
 8005dda:	f43f ae3e 	beq.w	8005a5a <_printf_float+0xb6>
 8005dde:	f108 0801 	add.w	r8, r8, #1
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005de6:	1a5b      	subs	r3, r3, r1
 8005de8:	4543      	cmp	r3, r8
 8005dea:	dcf0      	bgt.n	8005dce <_printf_float+0x42a>
 8005dec:	e6fc      	b.n	8005be8 <_printf_float+0x244>
 8005dee:	f04f 0800 	mov.w	r8, #0
 8005df2:	f104 0919 	add.w	r9, r4, #25
 8005df6:	e7f4      	b.n	8005de2 <_printf_float+0x43e>

08005df8 <_printf_common>:
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	4698      	mov	r8, r3
 8005e00:	688a      	ldr	r2, [r1, #8]
 8005e02:	690b      	ldr	r3, [r1, #16]
 8005e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	bfb8      	it	lt
 8005e0c:	4613      	movlt	r3, r2
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e14:	4607      	mov	r7, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	b10a      	cbz	r2, 8005e1e <_printf_common+0x26>
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	6033      	str	r3, [r6, #0]
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	0699      	lsls	r1, r3, #26
 8005e22:	bf42      	ittt	mi
 8005e24:	6833      	ldrmi	r3, [r6, #0]
 8005e26:	3302      	addmi	r3, #2
 8005e28:	6033      	strmi	r3, [r6, #0]
 8005e2a:	6825      	ldr	r5, [r4, #0]
 8005e2c:	f015 0506 	ands.w	r5, r5, #6
 8005e30:	d106      	bne.n	8005e40 <_printf_common+0x48>
 8005e32:	f104 0a19 	add.w	sl, r4, #25
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	6832      	ldr	r2, [r6, #0]
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dc26      	bgt.n	8005e8e <_printf_common+0x96>
 8005e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	3b00      	subs	r3, #0
 8005e48:	bf18      	it	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	0692      	lsls	r2, r2, #26
 8005e4e:	d42b      	bmi.n	8005ea8 <_printf_common+0xb0>
 8005e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e54:	4641      	mov	r1, r8
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c8      	blx	r9
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d01e      	beq.n	8005e9c <_printf_common+0xa4>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	6922      	ldr	r2, [r4, #16]
 8005e62:	f003 0306 	and.w	r3, r3, #6
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	bf02      	ittt	eq
 8005e6a:	68e5      	ldreq	r5, [r4, #12]
 8005e6c:	6833      	ldreq	r3, [r6, #0]
 8005e6e:	1aed      	subeq	r5, r5, r3
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	bf0c      	ite	eq
 8005e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e78:	2500      	movne	r5, #0
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	bfc4      	itt	gt
 8005e7e:	1a9b      	subgt	r3, r3, r2
 8005e80:	18ed      	addgt	r5, r5, r3
 8005e82:	2600      	movs	r6, #0
 8005e84:	341a      	adds	r4, #26
 8005e86:	42b5      	cmp	r5, r6
 8005e88:	d11a      	bne.n	8005ec0 <_printf_common+0xc8>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e008      	b.n	8005ea0 <_printf_common+0xa8>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4652      	mov	r2, sl
 8005e92:	4641      	mov	r1, r8
 8005e94:	4638      	mov	r0, r7
 8005e96:	47c8      	blx	r9
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d103      	bne.n	8005ea4 <_printf_common+0xac>
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	e7c6      	b.n	8005e36 <_printf_common+0x3e>
 8005ea8:	18e1      	adds	r1, r4, r3
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	2030      	movs	r0, #48	@ 0x30
 8005eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eb2:	4422      	add	r2, r4
 8005eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	e7c7      	b.n	8005e50 <_printf_common+0x58>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c8      	blx	r9
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d0e6      	beq.n	8005e9c <_printf_common+0xa4>
 8005ece:	3601      	adds	r6, #1
 8005ed0:	e7d9      	b.n	8005e86 <_printf_common+0x8e>
	...

08005ed4 <_printf_i>:
 8005ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	7e0f      	ldrb	r7, [r1, #24]
 8005eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005edc:	2f78      	cmp	r7, #120	@ 0x78
 8005ede:	4691      	mov	r9, r2
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	469a      	mov	sl, r3
 8005ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eea:	d807      	bhi.n	8005efc <_printf_i+0x28>
 8005eec:	2f62      	cmp	r7, #98	@ 0x62
 8005eee:	d80a      	bhi.n	8005f06 <_printf_i+0x32>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	f000 80d1 	beq.w	8006098 <_printf_i+0x1c4>
 8005ef6:	2f58      	cmp	r7, #88	@ 0x58
 8005ef8:	f000 80b8 	beq.w	800606c <_printf_i+0x198>
 8005efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f04:	e03a      	b.n	8005f7c <_printf_i+0xa8>
 8005f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f0a:	2b15      	cmp	r3, #21
 8005f0c:	d8f6      	bhi.n	8005efc <_printf_i+0x28>
 8005f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f14 <_printf_i+0x40>)
 8005f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005efd 	.word	0x08005efd
 8005f20:	08005efd 	.word	0x08005efd
 8005f24:	08005efd 	.word	0x08005efd
 8005f28:	08005efd 	.word	0x08005efd
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005efd 	.word	0x08005efd
 8005f34:	08005efd 	.word	0x08005efd
 8005f38:	08005efd 	.word	0x08005efd
 8005f3c:	08005efd 	.word	0x08005efd
 8005f40:	0800607f 	.word	0x0800607f
 8005f44:	08005fab 	.word	0x08005fab
 8005f48:	08006039 	.word	0x08006039
 8005f4c:	08005efd 	.word	0x08005efd
 8005f50:	08005efd 	.word	0x08005efd
 8005f54:	080060a1 	.word	0x080060a1
 8005f58:	08005efd 	.word	0x08005efd
 8005f5c:	08005fab 	.word	0x08005fab
 8005f60:	08005efd 	.word	0x08005efd
 8005f64:	08005efd 	.word	0x08005efd
 8005f68:	08006041 	.word	0x08006041
 8005f6c:	6833      	ldr	r3, [r6, #0]
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6032      	str	r2, [r6, #0]
 8005f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e09c      	b.n	80060ba <_printf_i+0x1e6>
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1d19      	adds	r1, r3, #4
 8005f86:	6031      	str	r1, [r6, #0]
 8005f88:	0606      	lsls	r6, r0, #24
 8005f8a:	d501      	bpl.n	8005f90 <_printf_i+0xbc>
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	e003      	b.n	8005f98 <_printf_i+0xc4>
 8005f90:	0645      	lsls	r5, r0, #25
 8005f92:	d5fb      	bpl.n	8005f8c <_printf_i+0xb8>
 8005f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	da03      	bge.n	8005fa4 <_printf_i+0xd0>
 8005f9c:	232d      	movs	r3, #45	@ 0x2d
 8005f9e:	426d      	negs	r5, r5
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa4:	4858      	ldr	r0, [pc, #352]	@ (8006108 <_printf_i+0x234>)
 8005fa6:	230a      	movs	r3, #10
 8005fa8:	e011      	b.n	8005fce <_printf_i+0xfa>
 8005faa:	6821      	ldr	r1, [r4, #0]
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	0608      	lsls	r0, r1, #24
 8005fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fb4:	d402      	bmi.n	8005fbc <_printf_i+0xe8>
 8005fb6:	0649      	lsls	r1, r1, #25
 8005fb8:	bf48      	it	mi
 8005fba:	b2ad      	uxthmi	r5, r5
 8005fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fbe:	4852      	ldr	r0, [pc, #328]	@ (8006108 <_printf_i+0x234>)
 8005fc0:	6033      	str	r3, [r6, #0]
 8005fc2:	bf14      	ite	ne
 8005fc4:	230a      	movne	r3, #10
 8005fc6:	2308      	moveq	r3, #8
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fce:	6866      	ldr	r6, [r4, #4]
 8005fd0:	60a6      	str	r6, [r4, #8]
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	db05      	blt.n	8005fe2 <_printf_i+0x10e>
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	432e      	orrs	r6, r5
 8005fda:	f021 0104 	bic.w	r1, r1, #4
 8005fde:	6021      	str	r1, [r4, #0]
 8005fe0:	d04b      	beq.n	800607a <_printf_i+0x1a6>
 8005fe2:	4616      	mov	r6, r2
 8005fe4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fe8:	fb03 5711 	mls	r7, r3, r1, r5
 8005fec:	5dc7      	ldrb	r7, [r0, r7]
 8005fee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ff2:	462f      	mov	r7, r5
 8005ff4:	42bb      	cmp	r3, r7
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	d9f4      	bls.n	8005fe4 <_printf_i+0x110>
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d10b      	bne.n	8006016 <_printf_i+0x142>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	07df      	lsls	r7, r3, #31
 8006002:	d508      	bpl.n	8006016 <_printf_i+0x142>
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	6861      	ldr	r1, [r4, #4]
 8006008:	4299      	cmp	r1, r3
 800600a:	bfde      	ittt	le
 800600c:	2330      	movle	r3, #48	@ 0x30
 800600e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006012:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006016:	1b92      	subs	r2, r2, r6
 8006018:	6122      	str	r2, [r4, #16]
 800601a:	f8cd a000 	str.w	sl, [sp]
 800601e:	464b      	mov	r3, r9
 8006020:	aa03      	add	r2, sp, #12
 8006022:	4621      	mov	r1, r4
 8006024:	4640      	mov	r0, r8
 8006026:	f7ff fee7 	bl	8005df8 <_printf_common>
 800602a:	3001      	adds	r0, #1
 800602c:	d14a      	bne.n	80060c4 <_printf_i+0x1f0>
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	b004      	add	sp, #16
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	f043 0320 	orr.w	r3, r3, #32
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	4832      	ldr	r0, [pc, #200]	@ (800610c <_printf_i+0x238>)
 8006042:	2778      	movs	r7, #120	@ 0x78
 8006044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	6831      	ldr	r1, [r6, #0]
 800604c:	061f      	lsls	r7, r3, #24
 800604e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006052:	d402      	bmi.n	800605a <_printf_i+0x186>
 8006054:	065f      	lsls	r7, r3, #25
 8006056:	bf48      	it	mi
 8006058:	b2ad      	uxthmi	r5, r5
 800605a:	6031      	str	r1, [r6, #0]
 800605c:	07d9      	lsls	r1, r3, #31
 800605e:	bf44      	itt	mi
 8006060:	f043 0320 	orrmi.w	r3, r3, #32
 8006064:	6023      	strmi	r3, [r4, #0]
 8006066:	b11d      	cbz	r5, 8006070 <_printf_i+0x19c>
 8006068:	2310      	movs	r3, #16
 800606a:	e7ad      	b.n	8005fc8 <_printf_i+0xf4>
 800606c:	4826      	ldr	r0, [pc, #152]	@ (8006108 <_printf_i+0x234>)
 800606e:	e7e9      	b.n	8006044 <_printf_i+0x170>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	f023 0320 	bic.w	r3, r3, #32
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	e7f6      	b.n	8006068 <_printf_i+0x194>
 800607a:	4616      	mov	r6, r2
 800607c:	e7bd      	b.n	8005ffa <_printf_i+0x126>
 800607e:	6833      	ldr	r3, [r6, #0]
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	6961      	ldr	r1, [r4, #20]
 8006084:	1d18      	adds	r0, r3, #4
 8006086:	6030      	str	r0, [r6, #0]
 8006088:	062e      	lsls	r6, r5, #24
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	d501      	bpl.n	8006092 <_printf_i+0x1be>
 800608e:	6019      	str	r1, [r3, #0]
 8006090:	e002      	b.n	8006098 <_printf_i+0x1c4>
 8006092:	0668      	lsls	r0, r5, #25
 8006094:	d5fb      	bpl.n	800608e <_printf_i+0x1ba>
 8006096:	8019      	strh	r1, [r3, #0]
 8006098:	2300      	movs	r3, #0
 800609a:	6123      	str	r3, [r4, #16]
 800609c:	4616      	mov	r6, r2
 800609e:	e7bc      	b.n	800601a <_printf_i+0x146>
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	1d1a      	adds	r2, r3, #4
 80060a4:	6032      	str	r2, [r6, #0]
 80060a6:	681e      	ldr	r6, [r3, #0]
 80060a8:	6862      	ldr	r2, [r4, #4]
 80060aa:	2100      	movs	r1, #0
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7fa f897 	bl	80001e0 <memchr>
 80060b2:	b108      	cbz	r0, 80060b8 <_printf_i+0x1e4>
 80060b4:	1b80      	subs	r0, r0, r6
 80060b6:	6060      	str	r0, [r4, #4]
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2300      	movs	r3, #0
 80060be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c2:	e7aa      	b.n	800601a <_printf_i+0x146>
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	4632      	mov	r2, r6
 80060c8:	4649      	mov	r1, r9
 80060ca:	4640      	mov	r0, r8
 80060cc:	47d0      	blx	sl
 80060ce:	3001      	adds	r0, #1
 80060d0:	d0ad      	beq.n	800602e <_printf_i+0x15a>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	079b      	lsls	r3, r3, #30
 80060d6:	d413      	bmi.n	8006100 <_printf_i+0x22c>
 80060d8:	68e0      	ldr	r0, [r4, #12]
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	4298      	cmp	r0, r3
 80060de:	bfb8      	it	lt
 80060e0:	4618      	movlt	r0, r3
 80060e2:	e7a6      	b.n	8006032 <_printf_i+0x15e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4632      	mov	r2, r6
 80060e8:	4649      	mov	r1, r9
 80060ea:	4640      	mov	r0, r8
 80060ec:	47d0      	blx	sl
 80060ee:	3001      	adds	r0, #1
 80060f0:	d09d      	beq.n	800602e <_printf_i+0x15a>
 80060f2:	3501      	adds	r5, #1
 80060f4:	68e3      	ldr	r3, [r4, #12]
 80060f6:	9903      	ldr	r1, [sp, #12]
 80060f8:	1a5b      	subs	r3, r3, r1
 80060fa:	42ab      	cmp	r3, r5
 80060fc:	dcf2      	bgt.n	80060e4 <_printf_i+0x210>
 80060fe:	e7eb      	b.n	80060d8 <_printf_i+0x204>
 8006100:	2500      	movs	r5, #0
 8006102:	f104 0619 	add.w	r6, r4, #25
 8006106:	e7f5      	b.n	80060f4 <_printf_i+0x220>
 8006108:	0800af3a 	.word	0x0800af3a
 800610c:	0800af4b 	.word	0x0800af4b

08006110 <_scanf_float>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	b087      	sub	sp, #28
 8006116:	4691      	mov	r9, r2
 8006118:	9303      	str	r3, [sp, #12]
 800611a:	688b      	ldr	r3, [r1, #8]
 800611c:	1e5a      	subs	r2, r3, #1
 800611e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006122:	bf81      	itttt	hi
 8006124:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006128:	eb03 0b05 	addhi.w	fp, r3, r5
 800612c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006130:	608b      	strhi	r3, [r1, #8]
 8006132:	680b      	ldr	r3, [r1, #0]
 8006134:	460a      	mov	r2, r1
 8006136:	f04f 0500 	mov.w	r5, #0
 800613a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800613e:	f842 3b1c 	str.w	r3, [r2], #28
 8006142:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006146:	4680      	mov	r8, r0
 8006148:	460c      	mov	r4, r1
 800614a:	bf98      	it	ls
 800614c:	f04f 0b00 	movls.w	fp, #0
 8006150:	9201      	str	r2, [sp, #4]
 8006152:	4616      	mov	r6, r2
 8006154:	46aa      	mov	sl, r5
 8006156:	462f      	mov	r7, r5
 8006158:	9502      	str	r5, [sp, #8]
 800615a:	68a2      	ldr	r2, [r4, #8]
 800615c:	b15a      	cbz	r2, 8006176 <_scanf_float+0x66>
 800615e:	f8d9 3000 	ldr.w	r3, [r9]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b4e      	cmp	r3, #78	@ 0x4e
 8006166:	d863      	bhi.n	8006230 <_scanf_float+0x120>
 8006168:	2b40      	cmp	r3, #64	@ 0x40
 800616a:	d83b      	bhi.n	80061e4 <_scanf_float+0xd4>
 800616c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006170:	b2c8      	uxtb	r0, r1
 8006172:	280e      	cmp	r0, #14
 8006174:	d939      	bls.n	80061ea <_scanf_float+0xda>
 8006176:	b11f      	cbz	r7, 8006180 <_scanf_float+0x70>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006184:	f1ba 0f01 	cmp.w	sl, #1
 8006188:	f200 8114 	bhi.w	80063b4 <_scanf_float+0x2a4>
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	429e      	cmp	r6, r3
 8006190:	f200 8105 	bhi.w	800639e <_scanf_float+0x28e>
 8006194:	2001      	movs	r0, #1
 8006196:	b007      	add	sp, #28
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80061a0:	2a0d      	cmp	r2, #13
 80061a2:	d8e8      	bhi.n	8006176 <_scanf_float+0x66>
 80061a4:	a101      	add	r1, pc, #4	@ (adr r1, 80061ac <_scanf_float+0x9c>)
 80061a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080062f5 	.word	0x080062f5
 80061b0:	08006177 	.word	0x08006177
 80061b4:	08006177 	.word	0x08006177
 80061b8:	08006177 	.word	0x08006177
 80061bc:	08006351 	.word	0x08006351
 80061c0:	0800632b 	.word	0x0800632b
 80061c4:	08006177 	.word	0x08006177
 80061c8:	08006177 	.word	0x08006177
 80061cc:	08006303 	.word	0x08006303
 80061d0:	08006177 	.word	0x08006177
 80061d4:	08006177 	.word	0x08006177
 80061d8:	08006177 	.word	0x08006177
 80061dc:	08006177 	.word	0x08006177
 80061e0:	080062bf 	.word	0x080062bf
 80061e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80061e8:	e7da      	b.n	80061a0 <_scanf_float+0x90>
 80061ea:	290e      	cmp	r1, #14
 80061ec:	d8c3      	bhi.n	8006176 <_scanf_float+0x66>
 80061ee:	a001      	add	r0, pc, #4	@ (adr r0, 80061f4 <_scanf_float+0xe4>)
 80061f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061f4:	080062af 	.word	0x080062af
 80061f8:	08006177 	.word	0x08006177
 80061fc:	080062af 	.word	0x080062af
 8006200:	0800633f 	.word	0x0800633f
 8006204:	08006177 	.word	0x08006177
 8006208:	08006251 	.word	0x08006251
 800620c:	08006295 	.word	0x08006295
 8006210:	08006295 	.word	0x08006295
 8006214:	08006295 	.word	0x08006295
 8006218:	08006295 	.word	0x08006295
 800621c:	08006295 	.word	0x08006295
 8006220:	08006295 	.word	0x08006295
 8006224:	08006295 	.word	0x08006295
 8006228:	08006295 	.word	0x08006295
 800622c:	08006295 	.word	0x08006295
 8006230:	2b6e      	cmp	r3, #110	@ 0x6e
 8006232:	d809      	bhi.n	8006248 <_scanf_float+0x138>
 8006234:	2b60      	cmp	r3, #96	@ 0x60
 8006236:	d8b1      	bhi.n	800619c <_scanf_float+0x8c>
 8006238:	2b54      	cmp	r3, #84	@ 0x54
 800623a:	d07b      	beq.n	8006334 <_scanf_float+0x224>
 800623c:	2b59      	cmp	r3, #89	@ 0x59
 800623e:	d19a      	bne.n	8006176 <_scanf_float+0x66>
 8006240:	2d07      	cmp	r5, #7
 8006242:	d198      	bne.n	8006176 <_scanf_float+0x66>
 8006244:	2508      	movs	r5, #8
 8006246:	e02f      	b.n	80062a8 <_scanf_float+0x198>
 8006248:	2b74      	cmp	r3, #116	@ 0x74
 800624a:	d073      	beq.n	8006334 <_scanf_float+0x224>
 800624c:	2b79      	cmp	r3, #121	@ 0x79
 800624e:	e7f6      	b.n	800623e <_scanf_float+0x12e>
 8006250:	6821      	ldr	r1, [r4, #0]
 8006252:	05c8      	lsls	r0, r1, #23
 8006254:	d51e      	bpl.n	8006294 <_scanf_float+0x184>
 8006256:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800625a:	6021      	str	r1, [r4, #0]
 800625c:	3701      	adds	r7, #1
 800625e:	f1bb 0f00 	cmp.w	fp, #0
 8006262:	d003      	beq.n	800626c <_scanf_float+0x15c>
 8006264:	3201      	adds	r2, #1
 8006266:	f10b 3bff 	add.w	fp, fp, #4294967295
 800626a:	60a2      	str	r2, [r4, #8]
 800626c:	68a3      	ldr	r3, [r4, #8]
 800626e:	3b01      	subs	r3, #1
 8006270:	60a3      	str	r3, [r4, #8]
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	3301      	adds	r3, #1
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800627c:	3b01      	subs	r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	f8c9 3004 	str.w	r3, [r9, #4]
 8006284:	f340 8082 	ble.w	800638c <_scanf_float+0x27c>
 8006288:	f8d9 3000 	ldr.w	r3, [r9]
 800628c:	3301      	adds	r3, #1
 800628e:	f8c9 3000 	str.w	r3, [r9]
 8006292:	e762      	b.n	800615a <_scanf_float+0x4a>
 8006294:	eb1a 0105 	adds.w	r1, sl, r5
 8006298:	f47f af6d 	bne.w	8006176 <_scanf_float+0x66>
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80062a2:	6022      	str	r2, [r4, #0]
 80062a4:	460d      	mov	r5, r1
 80062a6:	468a      	mov	sl, r1
 80062a8:	f806 3b01 	strb.w	r3, [r6], #1
 80062ac:	e7de      	b.n	800626c <_scanf_float+0x15c>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	0610      	lsls	r0, r2, #24
 80062b2:	f57f af60 	bpl.w	8006176 <_scanf_float+0x66>
 80062b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062ba:	6022      	str	r2, [r4, #0]
 80062bc:	e7f4      	b.n	80062a8 <_scanf_float+0x198>
 80062be:	f1ba 0f00 	cmp.w	sl, #0
 80062c2:	d10c      	bne.n	80062de <_scanf_float+0x1ce>
 80062c4:	b977      	cbnz	r7, 80062e4 <_scanf_float+0x1d4>
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80062cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80062d0:	d108      	bne.n	80062e4 <_scanf_float+0x1d4>
 80062d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	f04f 0a01 	mov.w	sl, #1
 80062dc:	e7e4      	b.n	80062a8 <_scanf_float+0x198>
 80062de:	f1ba 0f02 	cmp.w	sl, #2
 80062e2:	d050      	beq.n	8006386 <_scanf_float+0x276>
 80062e4:	2d01      	cmp	r5, #1
 80062e6:	d002      	beq.n	80062ee <_scanf_float+0x1de>
 80062e8:	2d04      	cmp	r5, #4
 80062ea:	f47f af44 	bne.w	8006176 <_scanf_float+0x66>
 80062ee:	3501      	adds	r5, #1
 80062f0:	b2ed      	uxtb	r5, r5
 80062f2:	e7d9      	b.n	80062a8 <_scanf_float+0x198>
 80062f4:	f1ba 0f01 	cmp.w	sl, #1
 80062f8:	f47f af3d 	bne.w	8006176 <_scanf_float+0x66>
 80062fc:	f04f 0a02 	mov.w	sl, #2
 8006300:	e7d2      	b.n	80062a8 <_scanf_float+0x198>
 8006302:	b975      	cbnz	r5, 8006322 <_scanf_float+0x212>
 8006304:	2f00      	cmp	r7, #0
 8006306:	f47f af37 	bne.w	8006178 <_scanf_float+0x68>
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006310:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006314:	f040 8103 	bne.w	800651e <_scanf_float+0x40e>
 8006318:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	2501      	movs	r5, #1
 8006320:	e7c2      	b.n	80062a8 <_scanf_float+0x198>
 8006322:	2d03      	cmp	r5, #3
 8006324:	d0e3      	beq.n	80062ee <_scanf_float+0x1de>
 8006326:	2d05      	cmp	r5, #5
 8006328:	e7df      	b.n	80062ea <_scanf_float+0x1da>
 800632a:	2d02      	cmp	r5, #2
 800632c:	f47f af23 	bne.w	8006176 <_scanf_float+0x66>
 8006330:	2503      	movs	r5, #3
 8006332:	e7b9      	b.n	80062a8 <_scanf_float+0x198>
 8006334:	2d06      	cmp	r5, #6
 8006336:	f47f af1e 	bne.w	8006176 <_scanf_float+0x66>
 800633a:	2507      	movs	r5, #7
 800633c:	e7b4      	b.n	80062a8 <_scanf_float+0x198>
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	0591      	lsls	r1, r2, #22
 8006342:	f57f af18 	bpl.w	8006176 <_scanf_float+0x66>
 8006346:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800634a:	6022      	str	r2, [r4, #0]
 800634c:	9702      	str	r7, [sp, #8]
 800634e:	e7ab      	b.n	80062a8 <_scanf_float+0x198>
 8006350:	6822      	ldr	r2, [r4, #0]
 8006352:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006356:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800635a:	d005      	beq.n	8006368 <_scanf_float+0x258>
 800635c:	0550      	lsls	r0, r2, #21
 800635e:	f57f af0a 	bpl.w	8006176 <_scanf_float+0x66>
 8006362:	2f00      	cmp	r7, #0
 8006364:	f000 80db 	beq.w	800651e <_scanf_float+0x40e>
 8006368:	0591      	lsls	r1, r2, #22
 800636a:	bf58      	it	pl
 800636c:	9902      	ldrpl	r1, [sp, #8]
 800636e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006372:	bf58      	it	pl
 8006374:	1a79      	subpl	r1, r7, r1
 8006376:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800637a:	bf58      	it	pl
 800637c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006380:	6022      	str	r2, [r4, #0]
 8006382:	2700      	movs	r7, #0
 8006384:	e790      	b.n	80062a8 <_scanf_float+0x198>
 8006386:	f04f 0a03 	mov.w	sl, #3
 800638a:	e78d      	b.n	80062a8 <_scanf_float+0x198>
 800638c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006390:	4649      	mov	r1, r9
 8006392:	4640      	mov	r0, r8
 8006394:	4798      	blx	r3
 8006396:	2800      	cmp	r0, #0
 8006398:	f43f aedf 	beq.w	800615a <_scanf_float+0x4a>
 800639c:	e6eb      	b.n	8006176 <_scanf_float+0x66>
 800639e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063a6:	464a      	mov	r2, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	4798      	blx	r3
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	e6eb      	b.n	800618c <_scanf_float+0x7c>
 80063b4:	1e6b      	subs	r3, r5, #1
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d824      	bhi.n	8006404 <_scanf_float+0x2f4>
 80063ba:	2d02      	cmp	r5, #2
 80063bc:	d836      	bhi.n	800642c <_scanf_float+0x31c>
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	429e      	cmp	r6, r3
 80063c2:	f67f aee7 	bls.w	8006194 <_scanf_float+0x84>
 80063c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ce:	464a      	mov	r2, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	4798      	blx	r3
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	e7f0      	b.n	80063be <_scanf_float+0x2ae>
 80063dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80063e4:	464a      	mov	r2, r9
 80063e6:	4640      	mov	r0, r8
 80063e8:	4798      	blx	r3
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063f4:	fa5f fa8a 	uxtb.w	sl, sl
 80063f8:	f1ba 0f02 	cmp.w	sl, #2
 80063fc:	d1ee      	bne.n	80063dc <_scanf_float+0x2cc>
 80063fe:	3d03      	subs	r5, #3
 8006400:	b2ed      	uxtb	r5, r5
 8006402:	1b76      	subs	r6, r6, r5
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	05da      	lsls	r2, r3, #23
 8006408:	d530      	bpl.n	800646c <_scanf_float+0x35c>
 800640a:	055b      	lsls	r3, r3, #21
 800640c:	d511      	bpl.n	8006432 <_scanf_float+0x322>
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	429e      	cmp	r6, r3
 8006412:	f67f aebf 	bls.w	8006194 <_scanf_float+0x84>
 8006416:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800641a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800641e:	464a      	mov	r2, r9
 8006420:	4640      	mov	r0, r8
 8006422:	4798      	blx	r3
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	3b01      	subs	r3, #1
 8006428:	6123      	str	r3, [r4, #16]
 800642a:	e7f0      	b.n	800640e <_scanf_float+0x2fe>
 800642c:	46aa      	mov	sl, r5
 800642e:	46b3      	mov	fp, r6
 8006430:	e7de      	b.n	80063f0 <_scanf_float+0x2e0>
 8006432:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	2965      	cmp	r1, #101	@ 0x65
 800643a:	f103 33ff 	add.w	r3, r3, #4294967295
 800643e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	d00c      	beq.n	8006460 <_scanf_float+0x350>
 8006446:	2945      	cmp	r1, #69	@ 0x45
 8006448:	d00a      	beq.n	8006460 <_scanf_float+0x350>
 800644a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800644e:	464a      	mov	r2, r9
 8006450:	4640      	mov	r0, r8
 8006452:	4798      	blx	r3
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800645a:	3b01      	subs	r3, #1
 800645c:	1eb5      	subs	r5, r6, #2
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006464:	464a      	mov	r2, r9
 8006466:	4640      	mov	r0, r8
 8006468:	4798      	blx	r3
 800646a:	462e      	mov	r6, r5
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	f012 0210 	ands.w	r2, r2, #16
 8006472:	d001      	beq.n	8006478 <_scanf_float+0x368>
 8006474:	2000      	movs	r0, #0
 8006476:	e68e      	b.n	8006196 <_scanf_float+0x86>
 8006478:	7032      	strb	r2, [r6, #0]
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006484:	d125      	bne.n	80064d2 <_scanf_float+0x3c2>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	429f      	cmp	r7, r3
 800648a:	d00a      	beq.n	80064a2 <_scanf_float+0x392>
 800648c:	1bda      	subs	r2, r3, r7
 800648e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006492:	429e      	cmp	r6, r3
 8006494:	bf28      	it	cs
 8006496:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800649a:	4922      	ldr	r1, [pc, #136]	@ (8006524 <_scanf_float+0x414>)
 800649c:	4630      	mov	r0, r6
 800649e:	f000 f94f 	bl	8006740 <siprintf>
 80064a2:	9901      	ldr	r1, [sp, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	4640      	mov	r0, r8
 80064a8:	f002 fc3a 	bl	8008d20 <_strtod_r>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f011 0f02 	tst.w	r1, #2
 80064b6:	ec57 6b10 	vmov	r6, r7, d0
 80064ba:	f103 0204 	add.w	r2, r3, #4
 80064be:	d015      	beq.n	80064ec <_scanf_float+0x3dc>
 80064c0:	9903      	ldr	r1, [sp, #12]
 80064c2:	600a      	str	r2, [r1, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	e9c3 6700 	strd	r6, r7, [r3]
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60e3      	str	r3, [r4, #12]
 80064d0:	e7d0      	b.n	8006474 <_scanf_float+0x364>
 80064d2:	9b04      	ldr	r3, [sp, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0e4      	beq.n	80064a2 <_scanf_float+0x392>
 80064d8:	9905      	ldr	r1, [sp, #20]
 80064da:	230a      	movs	r3, #10
 80064dc:	3101      	adds	r1, #1
 80064de:	4640      	mov	r0, r8
 80064e0:	f002 fc9e 	bl	8008e20 <_strtol_r>
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	9e05      	ldr	r6, [sp, #20]
 80064e8:	1ac2      	subs	r2, r0, r3
 80064ea:	e7d0      	b.n	800648e <_scanf_float+0x37e>
 80064ec:	f011 0f04 	tst.w	r1, #4
 80064f0:	9903      	ldr	r1, [sp, #12]
 80064f2:	600a      	str	r2, [r1, #0]
 80064f4:	d1e6      	bne.n	80064c4 <_scanf_float+0x3b4>
 80064f6:	681d      	ldr	r5, [r3, #0]
 80064f8:	4632      	mov	r2, r6
 80064fa:	463b      	mov	r3, r7
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7fa fb1c 	bl	8000b3c <__aeabi_dcmpun>
 8006504:	b128      	cbz	r0, 8006512 <_scanf_float+0x402>
 8006506:	4808      	ldr	r0, [pc, #32]	@ (8006528 <_scanf_float+0x418>)
 8006508:	f000 fa00 	bl	800690c <nanf>
 800650c:	ed85 0a00 	vstr	s0, [r5]
 8006510:	e7db      	b.n	80064ca <_scanf_float+0x3ba>
 8006512:	4630      	mov	r0, r6
 8006514:	4639      	mov	r1, r7
 8006516:	f7fa fb6f 	bl	8000bf8 <__aeabi_d2f>
 800651a:	6028      	str	r0, [r5, #0]
 800651c:	e7d5      	b.n	80064ca <_scanf_float+0x3ba>
 800651e:	2700      	movs	r7, #0
 8006520:	e62e      	b.n	8006180 <_scanf_float+0x70>
 8006522:	bf00      	nop
 8006524:	0800af5c 	.word	0x0800af5c
 8006528:	0800b09d 	.word	0x0800b09d

0800652c <std>:
 800652c:	2300      	movs	r3, #0
 800652e:	b510      	push	{r4, lr}
 8006530:	4604      	mov	r4, r0
 8006532:	e9c0 3300 	strd	r3, r3, [r0]
 8006536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800653a:	6083      	str	r3, [r0, #8]
 800653c:	8181      	strh	r1, [r0, #12]
 800653e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006540:	81c2      	strh	r2, [r0, #14]
 8006542:	6183      	str	r3, [r0, #24]
 8006544:	4619      	mov	r1, r3
 8006546:	2208      	movs	r2, #8
 8006548:	305c      	adds	r0, #92	@ 0x5c
 800654a:	f000 f95e 	bl	800680a <memset>
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <std+0x58>)
 8006550:	6263      	str	r3, [r4, #36]	@ 0x24
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <std+0x5c>)
 8006554:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <std+0x60>)
 8006558:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <std+0x64>)
 800655c:	6323      	str	r3, [r4, #48]	@ 0x30
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <std+0x68>)
 8006560:	6224      	str	r4, [r4, #32]
 8006562:	429c      	cmp	r4, r3
 8006564:	d006      	beq.n	8006574 <std+0x48>
 8006566:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800656a:	4294      	cmp	r4, r2
 800656c:	d002      	beq.n	8006574 <std+0x48>
 800656e:	33d0      	adds	r3, #208	@ 0xd0
 8006570:	429c      	cmp	r4, r3
 8006572:	d105      	bne.n	8006580 <std+0x54>
 8006574:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800657c:	f000 b9c2 	b.w	8006904 <__retarget_lock_init_recursive>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	08006785 	.word	0x08006785
 8006588:	080067a7 	.word	0x080067a7
 800658c:	080067df 	.word	0x080067df
 8006590:	08006803 	.word	0x08006803
 8006594:	20000350 	.word	0x20000350

08006598 <stdio_exit_handler>:
 8006598:	4a02      	ldr	r2, [pc, #8]	@ (80065a4 <stdio_exit_handler+0xc>)
 800659a:	4903      	ldr	r1, [pc, #12]	@ (80065a8 <stdio_exit_handler+0x10>)
 800659c:	4803      	ldr	r0, [pc, #12]	@ (80065ac <stdio_exit_handler+0x14>)
 800659e:	f000 b869 	b.w	8006674 <_fwalk_sglue>
 80065a2:	bf00      	nop
 80065a4:	2000000c 	.word	0x2000000c
 80065a8:	08009461 	.word	0x08009461
 80065ac:	2000001c 	.word	0x2000001c

080065b0 <cleanup_stdio>:
 80065b0:	6841      	ldr	r1, [r0, #4]
 80065b2:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <cleanup_stdio+0x34>)
 80065b4:	4299      	cmp	r1, r3
 80065b6:	b510      	push	{r4, lr}
 80065b8:	4604      	mov	r4, r0
 80065ba:	d001      	beq.n	80065c0 <cleanup_stdio+0x10>
 80065bc:	f002 ff50 	bl	8009460 <_fflush_r>
 80065c0:	68a1      	ldr	r1, [r4, #8]
 80065c2:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <cleanup_stdio+0x38>)
 80065c4:	4299      	cmp	r1, r3
 80065c6:	d002      	beq.n	80065ce <cleanup_stdio+0x1e>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f002 ff49 	bl	8009460 <_fflush_r>
 80065ce:	68e1      	ldr	r1, [r4, #12]
 80065d0:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <cleanup_stdio+0x3c>)
 80065d2:	4299      	cmp	r1, r3
 80065d4:	d004      	beq.n	80065e0 <cleanup_stdio+0x30>
 80065d6:	4620      	mov	r0, r4
 80065d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065dc:	f002 bf40 	b.w	8009460 <_fflush_r>
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	20000350 	.word	0x20000350
 80065e8:	200003b8 	.word	0x200003b8
 80065ec:	20000420 	.word	0x20000420

080065f0 <global_stdio_init.part.0>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <global_stdio_init.part.0+0x30>)
 80065f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006624 <global_stdio_init.part.0+0x34>)
 80065f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006628 <global_stdio_init.part.0+0x38>)
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	4620      	mov	r0, r4
 80065fc:	2200      	movs	r2, #0
 80065fe:	2104      	movs	r1, #4
 8006600:	f7ff ff94 	bl	800652c <std>
 8006604:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006608:	2201      	movs	r2, #1
 800660a:	2109      	movs	r1, #9
 800660c:	f7ff ff8e 	bl	800652c <std>
 8006610:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006614:	2202      	movs	r2, #2
 8006616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661a:	2112      	movs	r1, #18
 800661c:	f7ff bf86 	b.w	800652c <std>
 8006620:	20000488 	.word	0x20000488
 8006624:	20000350 	.word	0x20000350
 8006628:	08006599 	.word	0x08006599

0800662c <__sfp_lock_acquire>:
 800662c:	4801      	ldr	r0, [pc, #4]	@ (8006634 <__sfp_lock_acquire+0x8>)
 800662e:	f000 b96a 	b.w	8006906 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000491 	.word	0x20000491

08006638 <__sfp_lock_release>:
 8006638:	4801      	ldr	r0, [pc, #4]	@ (8006640 <__sfp_lock_release+0x8>)
 800663a:	f000 b965 	b.w	8006908 <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000491 	.word	0x20000491

08006644 <__sinit>:
 8006644:	b510      	push	{r4, lr}
 8006646:	4604      	mov	r4, r0
 8006648:	f7ff fff0 	bl	800662c <__sfp_lock_acquire>
 800664c:	6a23      	ldr	r3, [r4, #32]
 800664e:	b11b      	cbz	r3, 8006658 <__sinit+0x14>
 8006650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006654:	f7ff bff0 	b.w	8006638 <__sfp_lock_release>
 8006658:	4b04      	ldr	r3, [pc, #16]	@ (800666c <__sinit+0x28>)
 800665a:	6223      	str	r3, [r4, #32]
 800665c:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <__sinit+0x2c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f5      	bne.n	8006650 <__sinit+0xc>
 8006664:	f7ff ffc4 	bl	80065f0 <global_stdio_init.part.0>
 8006668:	e7f2      	b.n	8006650 <__sinit+0xc>
 800666a:	bf00      	nop
 800666c:	080065b1 	.word	0x080065b1
 8006670:	20000488 	.word	0x20000488

08006674 <_fwalk_sglue>:
 8006674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006678:	4607      	mov	r7, r0
 800667a:	4688      	mov	r8, r1
 800667c:	4614      	mov	r4, r2
 800667e:	2600      	movs	r6, #0
 8006680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006684:	f1b9 0901 	subs.w	r9, r9, #1
 8006688:	d505      	bpl.n	8006696 <_fwalk_sglue+0x22>
 800668a:	6824      	ldr	r4, [r4, #0]
 800668c:	2c00      	cmp	r4, #0
 800668e:	d1f7      	bne.n	8006680 <_fwalk_sglue+0xc>
 8006690:	4630      	mov	r0, r6
 8006692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d907      	bls.n	80066ac <_fwalk_sglue+0x38>
 800669c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a0:	3301      	adds	r3, #1
 80066a2:	d003      	beq.n	80066ac <_fwalk_sglue+0x38>
 80066a4:	4629      	mov	r1, r5
 80066a6:	4638      	mov	r0, r7
 80066a8:	47c0      	blx	r8
 80066aa:	4306      	orrs	r6, r0
 80066ac:	3568      	adds	r5, #104	@ 0x68
 80066ae:	e7e9      	b.n	8006684 <_fwalk_sglue+0x10>

080066b0 <iprintf>:
 80066b0:	b40f      	push	{r0, r1, r2, r3}
 80066b2:	b507      	push	{r0, r1, r2, lr}
 80066b4:	4906      	ldr	r1, [pc, #24]	@ (80066d0 <iprintf+0x20>)
 80066b6:	ab04      	add	r3, sp, #16
 80066b8:	6808      	ldr	r0, [r1, #0]
 80066ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80066be:	6881      	ldr	r1, [r0, #8]
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	f002 fd31 	bl	8009128 <_vfiprintf_r>
 80066c6:	b003      	add	sp, #12
 80066c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066cc:	b004      	add	sp, #16
 80066ce:	4770      	bx	lr
 80066d0:	20000018 	.word	0x20000018

080066d4 <sniprintf>:
 80066d4:	b40c      	push	{r2, r3}
 80066d6:	b530      	push	{r4, r5, lr}
 80066d8:	4b18      	ldr	r3, [pc, #96]	@ (800673c <sniprintf+0x68>)
 80066da:	1e0c      	subs	r4, r1, #0
 80066dc:	681d      	ldr	r5, [r3, #0]
 80066de:	b09d      	sub	sp, #116	@ 0x74
 80066e0:	da08      	bge.n	80066f4 <sniprintf+0x20>
 80066e2:	238b      	movs	r3, #139	@ 0x8b
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	b01d      	add	sp, #116	@ 0x74
 80066ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066f0:	b002      	add	sp, #8
 80066f2:	4770      	bx	lr
 80066f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80066f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006702:	bf14      	ite	ne
 8006704:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006708:	4623      	moveq	r3, r4
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006712:	9002      	str	r0, [sp, #8]
 8006714:	9006      	str	r0, [sp, #24]
 8006716:	f8ad 3016 	strh.w	r3, [sp, #22]
 800671a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800671c:	ab21      	add	r3, sp, #132	@ 0x84
 800671e:	a902      	add	r1, sp, #8
 8006720:	4628      	mov	r0, r5
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	f002 fbda 	bl	8008edc <_svfiprintf_r>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	bfbc      	itt	lt
 800672c:	238b      	movlt	r3, #139	@ 0x8b
 800672e:	602b      	strlt	r3, [r5, #0]
 8006730:	2c00      	cmp	r4, #0
 8006732:	d0da      	beq.n	80066ea <sniprintf+0x16>
 8006734:	9b02      	ldr	r3, [sp, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e7d6      	b.n	80066ea <sniprintf+0x16>
 800673c:	20000018 	.word	0x20000018

08006740 <siprintf>:
 8006740:	b40e      	push	{r1, r2, r3}
 8006742:	b510      	push	{r4, lr}
 8006744:	b09d      	sub	sp, #116	@ 0x74
 8006746:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006748:	9002      	str	r0, [sp, #8]
 800674a:	9006      	str	r0, [sp, #24]
 800674c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006750:	480a      	ldr	r0, [pc, #40]	@ (800677c <siprintf+0x3c>)
 8006752:	9107      	str	r1, [sp, #28]
 8006754:	9104      	str	r1, [sp, #16]
 8006756:	490a      	ldr	r1, [pc, #40]	@ (8006780 <siprintf+0x40>)
 8006758:	f853 2b04 	ldr.w	r2, [r3], #4
 800675c:	9105      	str	r1, [sp, #20]
 800675e:	2400      	movs	r4, #0
 8006760:	a902      	add	r1, sp, #8
 8006762:	6800      	ldr	r0, [r0, #0]
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006768:	f002 fbb8 	bl	8008edc <_svfiprintf_r>
 800676c:	9b02      	ldr	r3, [sp, #8]
 800676e:	701c      	strb	r4, [r3, #0]
 8006770:	b01d      	add	sp, #116	@ 0x74
 8006772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006776:	b003      	add	sp, #12
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000018 	.word	0x20000018
 8006780:	ffff0208 	.word	0xffff0208

08006784 <__sread>:
 8006784:	b510      	push	{r4, lr}
 8006786:	460c      	mov	r4, r1
 8006788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678c:	f000 f86c 	bl	8006868 <_read_r>
 8006790:	2800      	cmp	r0, #0
 8006792:	bfab      	itete	ge
 8006794:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006796:	89a3      	ldrhlt	r3, [r4, #12]
 8006798:	181b      	addge	r3, r3, r0
 800679a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800679e:	bfac      	ite	ge
 80067a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067a2:	81a3      	strhlt	r3, [r4, #12]
 80067a4:	bd10      	pop	{r4, pc}

080067a6 <__swrite>:
 80067a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067aa:	461f      	mov	r7, r3
 80067ac:	898b      	ldrh	r3, [r1, #12]
 80067ae:	05db      	lsls	r3, r3, #23
 80067b0:	4605      	mov	r5, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	4616      	mov	r6, r2
 80067b6:	d505      	bpl.n	80067c4 <__swrite+0x1e>
 80067b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067bc:	2302      	movs	r3, #2
 80067be:	2200      	movs	r2, #0
 80067c0:	f000 f840 	bl	8006844 <_lseek_r>
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	4628      	mov	r0, r5
 80067d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067da:	f000 b857 	b.w	800688c <_write_r>

080067de <__sseek>:
 80067de:	b510      	push	{r4, lr}
 80067e0:	460c      	mov	r4, r1
 80067e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e6:	f000 f82d 	bl	8006844 <_lseek_r>
 80067ea:	1c43      	adds	r3, r0, #1
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	bf15      	itete	ne
 80067f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067fa:	81a3      	strheq	r3, [r4, #12]
 80067fc:	bf18      	it	ne
 80067fe:	81a3      	strhne	r3, [r4, #12]
 8006800:	bd10      	pop	{r4, pc}

08006802 <__sclose>:
 8006802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006806:	f000 b80d 	b.w	8006824 <_close_r>

0800680a <memset>:
 800680a:	4402      	add	r2, r0
 800680c:	4603      	mov	r3, r0
 800680e:	4293      	cmp	r3, r2
 8006810:	d100      	bne.n	8006814 <memset+0xa>
 8006812:	4770      	bx	lr
 8006814:	f803 1b01 	strb.w	r1, [r3], #1
 8006818:	e7f9      	b.n	800680e <memset+0x4>
	...

0800681c <_localeconv_r>:
 800681c:	4800      	ldr	r0, [pc, #0]	@ (8006820 <_localeconv_r+0x4>)
 800681e:	4770      	bx	lr
 8006820:	20000158 	.word	0x20000158

08006824 <_close_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	@ (8006840 <_close_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fb fec6 	bl	80025c0 <_close>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_close_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_close_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	2000048c 	.word	0x2000048c

08006844 <_lseek_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	@ (8006864 <_lseek_r+0x20>)
 8006848:	4604      	mov	r4, r0
 800684a:	4608      	mov	r0, r1
 800684c:	4611      	mov	r1, r2
 800684e:	2200      	movs	r2, #0
 8006850:	602a      	str	r2, [r5, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	f7fb fedb 	bl	800260e <_lseek>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_lseek_r+0x1e>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_lseek_r+0x1e>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	2000048c 	.word	0x2000048c

08006868 <_read_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d07      	ldr	r5, [pc, #28]	@ (8006888 <_read_r+0x20>)
 800686c:	4604      	mov	r4, r0
 800686e:	4608      	mov	r0, r1
 8006870:	4611      	mov	r1, r2
 8006872:	2200      	movs	r2, #0
 8006874:	602a      	str	r2, [r5, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	f7fb fe69 	bl	800254e <_read>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_read_r+0x1e>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_read_r+0x1e>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	2000048c 	.word	0x2000048c

0800688c <_write_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d07      	ldr	r5, [pc, #28]	@ (80068ac <_write_r+0x20>)
 8006890:	4604      	mov	r4, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	2200      	movs	r2, #0
 8006898:	602a      	str	r2, [r5, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	f7fb fe74 	bl	8002588 <_write>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_write_r+0x1e>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_write_r+0x1e>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	2000048c 	.word	0x2000048c

080068b0 <__errno>:
 80068b0:	4b01      	ldr	r3, [pc, #4]	@ (80068b8 <__errno+0x8>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000018 	.word	0x20000018

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4d0d      	ldr	r5, [pc, #52]	@ (80068f4 <__libc_init_array+0x38>)
 80068c0:	4c0d      	ldr	r4, [pc, #52]	@ (80068f8 <__libc_init_array+0x3c>)
 80068c2:	1b64      	subs	r4, r4, r5
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	2600      	movs	r6, #0
 80068c8:	42a6      	cmp	r6, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	4d0b      	ldr	r5, [pc, #44]	@ (80068fc <__libc_init_array+0x40>)
 80068ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006900 <__libc_init_array+0x44>)
 80068d0:	f003 fb78 	bl	8009fc4 <_init>
 80068d4:	1b64      	subs	r4, r4, r5
 80068d6:	10a4      	asrs	r4, r4, #2
 80068d8:	2600      	movs	r6, #0
 80068da:	42a6      	cmp	r6, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e4:	4798      	blx	r3
 80068e6:	3601      	adds	r6, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ee:	4798      	blx	r3
 80068f0:	3601      	adds	r6, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	0800b35c 	.word	0x0800b35c
 80068f8:	0800b35c 	.word	0x0800b35c
 80068fc:	0800b35c 	.word	0x0800b35c
 8006900:	0800b360 	.word	0x0800b360

08006904 <__retarget_lock_init_recursive>:
 8006904:	4770      	bx	lr

08006906 <__retarget_lock_acquire_recursive>:
 8006906:	4770      	bx	lr

08006908 <__retarget_lock_release_recursive>:
 8006908:	4770      	bx	lr
	...

0800690c <nanf>:
 800690c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006914 <nanf+0x8>
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	7fc00000 	.word	0x7fc00000

08006918 <quorem>:
 8006918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	6903      	ldr	r3, [r0, #16]
 800691e:	690c      	ldr	r4, [r1, #16]
 8006920:	42a3      	cmp	r3, r4
 8006922:	4607      	mov	r7, r0
 8006924:	db7e      	blt.n	8006a24 <quorem+0x10c>
 8006926:	3c01      	subs	r4, #1
 8006928:	f101 0814 	add.w	r8, r1, #20
 800692c:	00a3      	lsls	r3, r4, #2
 800692e:	f100 0514 	add.w	r5, r0, #20
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800693e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006942:	3301      	adds	r3, #1
 8006944:	429a      	cmp	r2, r3
 8006946:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800694a:	fbb2 f6f3 	udiv	r6, r2, r3
 800694e:	d32e      	bcc.n	80069ae <quorem+0x96>
 8006950:	f04f 0a00 	mov.w	sl, #0
 8006954:	46c4      	mov	ip, r8
 8006956:	46ae      	mov	lr, r5
 8006958:	46d3      	mov	fp, sl
 800695a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800695e:	b298      	uxth	r0, r3
 8006960:	fb06 a000 	mla	r0, r6, r0, sl
 8006964:	0c02      	lsrs	r2, r0, #16
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	fb06 2303 	mla	r3, r6, r3, r2
 800696c:	f8de 2000 	ldr.w	r2, [lr]
 8006970:	b280      	uxth	r0, r0
 8006972:	b292      	uxth	r2, r2
 8006974:	1a12      	subs	r2, r2, r0
 8006976:	445a      	add	r2, fp
 8006978:	f8de 0000 	ldr.w	r0, [lr]
 800697c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006980:	b29b      	uxth	r3, r3
 8006982:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006986:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800698a:	b292      	uxth	r2, r2
 800698c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006990:	45e1      	cmp	r9, ip
 8006992:	f84e 2b04 	str.w	r2, [lr], #4
 8006996:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800699a:	d2de      	bcs.n	800695a <quorem+0x42>
 800699c:	9b00      	ldr	r3, [sp, #0]
 800699e:	58eb      	ldr	r3, [r5, r3]
 80069a0:	b92b      	cbnz	r3, 80069ae <quorem+0x96>
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	429d      	cmp	r5, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	d32f      	bcc.n	8006a0c <quorem+0xf4>
 80069ac:	613c      	str	r4, [r7, #16]
 80069ae:	4638      	mov	r0, r7
 80069b0:	f001 f9c6 	bl	8007d40 <__mcmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	db25      	blt.n	8006a04 <quorem+0xec>
 80069b8:	4629      	mov	r1, r5
 80069ba:	2000      	movs	r0, #0
 80069bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80069c0:	f8d1 c000 	ldr.w	ip, [r1]
 80069c4:	fa1f fe82 	uxth.w	lr, r2
 80069c8:	fa1f f38c 	uxth.w	r3, ip
 80069cc:	eba3 030e 	sub.w	r3, r3, lr
 80069d0:	4403      	add	r3, r0
 80069d2:	0c12      	lsrs	r2, r2, #16
 80069d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e2:	45c1      	cmp	r9, r8
 80069e4:	f841 3b04 	str.w	r3, [r1], #4
 80069e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ec:	d2e6      	bcs.n	80069bc <quorem+0xa4>
 80069ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069f6:	b922      	cbnz	r2, 8006a02 <quorem+0xea>
 80069f8:	3b04      	subs	r3, #4
 80069fa:	429d      	cmp	r5, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	d30b      	bcc.n	8006a18 <quorem+0x100>
 8006a00:	613c      	str	r4, [r7, #16]
 8006a02:	3601      	adds	r6, #1
 8006a04:	4630      	mov	r0, r6
 8006a06:	b003      	add	sp, #12
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	d1cb      	bne.n	80069ac <quorem+0x94>
 8006a14:	3c01      	subs	r4, #1
 8006a16:	e7c6      	b.n	80069a6 <quorem+0x8e>
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d1ef      	bne.n	8006a00 <quorem+0xe8>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	e7ea      	b.n	80069fa <quorem+0xe2>
 8006a24:	2000      	movs	r0, #0
 8006a26:	e7ee      	b.n	8006a06 <quorem+0xee>

08006a28 <_dtoa_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	69c7      	ldr	r7, [r0, #28]
 8006a2e:	b097      	sub	sp, #92	@ 0x5c
 8006a30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a34:	ec55 4b10 	vmov	r4, r5, d0
 8006a38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006a3a:	9107      	str	r1, [sp, #28]
 8006a3c:	4681      	mov	r9, r0
 8006a3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a40:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a42:	b97f      	cbnz	r7, 8006a64 <_dtoa_r+0x3c>
 8006a44:	2010      	movs	r0, #16
 8006a46:	f000 fe09 	bl	800765c <malloc>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a50:	b920      	cbnz	r0, 8006a5c <_dtoa_r+0x34>
 8006a52:	4ba9      	ldr	r3, [pc, #676]	@ (8006cf8 <_dtoa_r+0x2d0>)
 8006a54:	21ef      	movs	r1, #239	@ 0xef
 8006a56:	48a9      	ldr	r0, [pc, #676]	@ (8006cfc <_dtoa_r+0x2d4>)
 8006a58:	f002 fe12 	bl	8009680 <__assert_func>
 8006a5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a60:	6007      	str	r7, [r0, #0]
 8006a62:	60c7      	str	r7, [r0, #12]
 8006a64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a68:	6819      	ldr	r1, [r3, #0]
 8006a6a:	b159      	cbz	r1, 8006a84 <_dtoa_r+0x5c>
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	604a      	str	r2, [r1, #4]
 8006a70:	2301      	movs	r3, #1
 8006a72:	4093      	lsls	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
 8006a76:	4648      	mov	r0, r9
 8006a78:	f000 fee6 	bl	8007848 <_Bfree>
 8006a7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	1e2b      	subs	r3, r5, #0
 8006a86:	bfb9      	ittee	lt
 8006a88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a8c:	9305      	strlt	r3, [sp, #20]
 8006a8e:	2300      	movge	r3, #0
 8006a90:	6033      	strge	r3, [r6, #0]
 8006a92:	9f05      	ldr	r7, [sp, #20]
 8006a94:	4b9a      	ldr	r3, [pc, #616]	@ (8006d00 <_dtoa_r+0x2d8>)
 8006a96:	bfbc      	itt	lt
 8006a98:	2201      	movlt	r2, #1
 8006a9a:	6032      	strlt	r2, [r6, #0]
 8006a9c:	43bb      	bics	r3, r7
 8006a9e:	d112      	bne.n	8006ac6 <_dtoa_r+0x9e>
 8006aa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006aa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006aac:	4323      	orrs	r3, r4
 8006aae:	f000 855a 	beq.w	8007566 <_dtoa_r+0xb3e>
 8006ab2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ab4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006d14 <_dtoa_r+0x2ec>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 855c 	beq.w	8007576 <_dtoa_r+0xb4e>
 8006abe:	f10a 0303 	add.w	r3, sl, #3
 8006ac2:	f000 bd56 	b.w	8007572 <_dtoa_r+0xb4a>
 8006ac6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006aca:	2200      	movs	r2, #0
 8006acc:	ec51 0b17 	vmov	r0, r1, d7
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ad6:	f7f9 ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ada:	4680      	mov	r8, r0
 8006adc:	b158      	cbz	r0, 8006af6 <_dtoa_r+0xce>
 8006ade:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ae6:	b113      	cbz	r3, 8006aee <_dtoa_r+0xc6>
 8006ae8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006aea:	4b86      	ldr	r3, [pc, #536]	@ (8006d04 <_dtoa_r+0x2dc>)
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006d18 <_dtoa_r+0x2f0>
 8006af2:	f000 bd40 	b.w	8007576 <_dtoa_r+0xb4e>
 8006af6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006afa:	aa14      	add	r2, sp, #80	@ 0x50
 8006afc:	a915      	add	r1, sp, #84	@ 0x54
 8006afe:	4648      	mov	r0, r9
 8006b00:	f001 fa3e 	bl	8007f80 <__d2b>
 8006b04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b08:	9002      	str	r0, [sp, #8]
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d078      	beq.n	8006c00 <_dtoa_r+0x1d8>
 8006b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b28:	4619      	mov	r1, r3
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4b76      	ldr	r3, [pc, #472]	@ (8006d08 <_dtoa_r+0x2e0>)
 8006b2e:	f7f9 fbb3 	bl	8000298 <__aeabi_dsub>
 8006b32:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ce0 <_dtoa_r+0x2b8>)
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fd66 	bl	8000608 <__aeabi_dmul>
 8006b3c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006ce8 <_dtoa_r+0x2c0>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fbab 	bl	800029c <__adddf3>
 8006b46:	4604      	mov	r4, r0
 8006b48:	4630      	mov	r0, r6
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	f7f9 fcf2 	bl	8000534 <__aeabi_i2d>
 8006b50:	a367      	add	r3, pc, #412	@ (adr r3, 8006cf0 <_dtoa_r+0x2c8>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fd57 	bl	8000608 <__aeabi_dmul>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7f9 fb9b 	bl	800029c <__adddf3>
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	f7f9 fffd 	bl	8000b68 <__aeabi_d2iz>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4607      	mov	r7, r0
 8006b72:	2300      	movs	r3, #0
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	f7f9 ffb8 	bl	8000aec <__aeabi_dcmplt>
 8006b7c:	b140      	cbz	r0, 8006b90 <_dtoa_r+0x168>
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f7f9 fcd8 	bl	8000534 <__aeabi_i2d>
 8006b84:	4622      	mov	r2, r4
 8006b86:	462b      	mov	r3, r5
 8006b88:	f7f9 ffa6 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b8c:	b900      	cbnz	r0, 8006b90 <_dtoa_r+0x168>
 8006b8e:	3f01      	subs	r7, #1
 8006b90:	2f16      	cmp	r7, #22
 8006b92:	d852      	bhi.n	8006c3a <_dtoa_r+0x212>
 8006b94:	4b5d      	ldr	r3, [pc, #372]	@ (8006d0c <_dtoa_r+0x2e4>)
 8006b96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ba2:	f7f9 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d049      	beq.n	8006c3e <_dtoa_r+0x216>
 8006baa:	3f01      	subs	r7, #1
 8006bac:	2300      	movs	r3, #0
 8006bae:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bb2:	1b9b      	subs	r3, r3, r6
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	bf45      	ittet	mi
 8006bb8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bbc:	9300      	strmi	r3, [sp, #0]
 8006bbe:	2300      	movpl	r3, #0
 8006bc0:	2300      	movmi	r3, #0
 8006bc2:	9206      	str	r2, [sp, #24]
 8006bc4:	bf54      	ite	pl
 8006bc6:	9300      	strpl	r3, [sp, #0]
 8006bc8:	9306      	strmi	r3, [sp, #24]
 8006bca:	2f00      	cmp	r7, #0
 8006bcc:	db39      	blt.n	8006c42 <_dtoa_r+0x21a>
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	970d      	str	r7, [sp, #52]	@ 0x34
 8006bd2:	443b      	add	r3, r7
 8006bd4:	9306      	str	r3, [sp, #24]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9308      	str	r3, [sp, #32]
 8006bda:	9b07      	ldr	r3, [sp, #28]
 8006bdc:	2b09      	cmp	r3, #9
 8006bde:	d863      	bhi.n	8006ca8 <_dtoa_r+0x280>
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	bfc4      	itt	gt
 8006be4:	3b04      	subgt	r3, #4
 8006be6:	9307      	strgt	r3, [sp, #28]
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	f1a3 0302 	sub.w	r3, r3, #2
 8006bee:	bfcc      	ite	gt
 8006bf0:	2400      	movgt	r4, #0
 8006bf2:	2401      	movle	r4, #1
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d863      	bhi.n	8006cc0 <_dtoa_r+0x298>
 8006bf8:	e8df f003 	tbb	[pc, r3]
 8006bfc:	2b375452 	.word	0x2b375452
 8006c00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c04:	441e      	add	r6, r3
 8006c06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	bfc1      	itttt	gt
 8006c0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c12:	409f      	lslgt	r7, r3
 8006c14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c1c:	bfd6      	itet	le
 8006c1e:	f1c3 0320 	rsble	r3, r3, #32
 8006c22:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c26:	fa04 f003 	lslle.w	r0, r4, r3
 8006c2a:	f7f9 fc73 	bl	8000514 <__aeabi_ui2d>
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c34:	3e01      	subs	r6, #1
 8006c36:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c38:	e776      	b.n	8006b28 <_dtoa_r+0x100>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e7b7      	b.n	8006bae <_dtoa_r+0x186>
 8006c3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006c40:	e7b6      	b.n	8006bb0 <_dtoa_r+0x188>
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	1bdb      	subs	r3, r3, r7
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	427b      	negs	r3, r7
 8006c4a:	9308      	str	r3, [sp, #32]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c50:	e7c3      	b.n	8006bda <_dtoa_r+0x1b2>
 8006c52:	2301      	movs	r3, #1
 8006c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c58:	eb07 0b03 	add.w	fp, r7, r3
 8006c5c:	f10b 0301 	add.w	r3, fp, #1
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	bfb8      	it	lt
 8006c66:	2301      	movlt	r3, #1
 8006c68:	e006      	b.n	8006c78 <_dtoa_r+0x250>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dd28      	ble.n	8006cc6 <_dtoa_r+0x29e>
 8006c74:	469b      	mov	fp, r3
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	2204      	movs	r2, #4
 8006c80:	f102 0514 	add.w	r5, r2, #20
 8006c84:	429d      	cmp	r5, r3
 8006c86:	d926      	bls.n	8006cd6 <_dtoa_r+0x2ae>
 8006c88:	6041      	str	r1, [r0, #4]
 8006c8a:	4648      	mov	r0, r9
 8006c8c:	f000 fd9c 	bl	80077c8 <_Balloc>
 8006c90:	4682      	mov	sl, r0
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d142      	bne.n	8006d1c <_dtoa_r+0x2f4>
 8006c96:	4b1e      	ldr	r3, [pc, #120]	@ (8006d10 <_dtoa_r+0x2e8>)
 8006c98:	4602      	mov	r2, r0
 8006c9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c9e:	e6da      	b.n	8006a56 <_dtoa_r+0x2e>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e7e3      	b.n	8006c6c <_dtoa_r+0x244>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e7d5      	b.n	8006c54 <_dtoa_r+0x22c>
 8006ca8:	2401      	movs	r4, #1
 8006caa:	2300      	movs	r3, #0
 8006cac:	9307      	str	r3, [sp, #28]
 8006cae:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cb0:	f04f 3bff 	mov.w	fp, #4294967295
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cba:	2312      	movs	r3, #18
 8006cbc:	920c      	str	r2, [sp, #48]	@ 0x30
 8006cbe:	e7db      	b.n	8006c78 <_dtoa_r+0x250>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cc4:	e7f4      	b.n	8006cb0 <_dtoa_r+0x288>
 8006cc6:	f04f 0b01 	mov.w	fp, #1
 8006cca:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cce:	465b      	mov	r3, fp
 8006cd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006cd4:	e7d0      	b.n	8006c78 <_dtoa_r+0x250>
 8006cd6:	3101      	adds	r1, #1
 8006cd8:	0052      	lsls	r2, r2, #1
 8006cda:	e7d1      	b.n	8006c80 <_dtoa_r+0x258>
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	636f4361 	.word	0x636f4361
 8006ce4:	3fd287a7 	.word	0x3fd287a7
 8006ce8:	8b60c8b3 	.word	0x8b60c8b3
 8006cec:	3fc68a28 	.word	0x3fc68a28
 8006cf0:	509f79fb 	.word	0x509f79fb
 8006cf4:	3fd34413 	.word	0x3fd34413
 8006cf8:	0800af6e 	.word	0x0800af6e
 8006cfc:	0800af85 	.word	0x0800af85
 8006d00:	7ff00000 	.word	0x7ff00000
 8006d04:	0800af39 	.word	0x0800af39
 8006d08:	3ff80000 	.word	0x3ff80000
 8006d0c:	0800b138 	.word	0x0800b138
 8006d10:	0800afdd 	.word	0x0800afdd
 8006d14:	0800af6a 	.word	0x0800af6a
 8006d18:	0800af38 	.word	0x0800af38
 8006d1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d20:	6018      	str	r0, [r3, #0]
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	2b0e      	cmp	r3, #14
 8006d26:	f200 80a1 	bhi.w	8006e6c <_dtoa_r+0x444>
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	f000 809e 	beq.w	8006e6c <_dtoa_r+0x444>
 8006d30:	2f00      	cmp	r7, #0
 8006d32:	dd33      	ble.n	8006d9c <_dtoa_r+0x374>
 8006d34:	4b9c      	ldr	r3, [pc, #624]	@ (8006fa8 <_dtoa_r+0x580>)
 8006d36:	f007 020f 	and.w	r2, r7, #15
 8006d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3e:	ed93 7b00 	vldr	d7, [r3]
 8006d42:	05f8      	lsls	r0, r7, #23
 8006d44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006d48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d4c:	d516      	bpl.n	8006d7c <_dtoa_r+0x354>
 8006d4e:	4b97      	ldr	r3, [pc, #604]	@ (8006fac <_dtoa_r+0x584>)
 8006d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d58:	f7f9 fd80 	bl	800085c <__aeabi_ddiv>
 8006d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d60:	f004 040f 	and.w	r4, r4, #15
 8006d64:	2603      	movs	r6, #3
 8006d66:	4d91      	ldr	r5, [pc, #580]	@ (8006fac <_dtoa_r+0x584>)
 8006d68:	b954      	cbnz	r4, 8006d80 <_dtoa_r+0x358>
 8006d6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d72:	f7f9 fd73 	bl	800085c <__aeabi_ddiv>
 8006d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7a:	e028      	b.n	8006dce <_dtoa_r+0x3a6>
 8006d7c:	2602      	movs	r6, #2
 8006d7e:	e7f2      	b.n	8006d66 <_dtoa_r+0x33e>
 8006d80:	07e1      	lsls	r1, r4, #31
 8006d82:	d508      	bpl.n	8006d96 <_dtoa_r+0x36e>
 8006d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d8c:	f7f9 fc3c 	bl	8000608 <__aeabi_dmul>
 8006d90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d94:	3601      	adds	r6, #1
 8006d96:	1064      	asrs	r4, r4, #1
 8006d98:	3508      	adds	r5, #8
 8006d9a:	e7e5      	b.n	8006d68 <_dtoa_r+0x340>
 8006d9c:	f000 80af 	beq.w	8006efe <_dtoa_r+0x4d6>
 8006da0:	427c      	negs	r4, r7
 8006da2:	4b81      	ldr	r3, [pc, #516]	@ (8006fa8 <_dtoa_r+0x580>)
 8006da4:	4d81      	ldr	r5, [pc, #516]	@ (8006fac <_dtoa_r+0x584>)
 8006da6:	f004 020f 	and.w	r2, r4, #15
 8006daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006db6:	f7f9 fc27 	bl	8000608 <__aeabi_dmul>
 8006dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dbe:	1124      	asrs	r4, r4, #4
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2602      	movs	r6, #2
 8006dc4:	2c00      	cmp	r4, #0
 8006dc6:	f040 808f 	bne.w	8006ee8 <_dtoa_r+0x4c0>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1d3      	bne.n	8006d76 <_dtoa_r+0x34e>
 8006dce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8094 	beq.w	8006f02 <_dtoa_r+0x4da>
 8006dda:	4b75      	ldr	r3, [pc, #468]	@ (8006fb0 <_dtoa_r+0x588>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fe83 	bl	8000aec <__aeabi_dcmplt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f000 808b 	beq.w	8006f02 <_dtoa_r+0x4da>
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8087 	beq.w	8006f02 <_dtoa_r+0x4da>
 8006df4:	f1bb 0f00 	cmp.w	fp, #0
 8006df8:	dd34      	ble.n	8006e64 <_dtoa_r+0x43c>
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8006fb4 <_dtoa_r+0x58c>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fc01 	bl	8000608 <__aeabi_dmul>
 8006e06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e0a:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e0e:	3601      	adds	r6, #1
 8006e10:	465c      	mov	r4, fp
 8006e12:	4630      	mov	r0, r6
 8006e14:	f7f9 fb8e 	bl	8000534 <__aeabi_i2d>
 8006e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1c:	f7f9 fbf4 	bl	8000608 <__aeabi_dmul>
 8006e20:	4b65      	ldr	r3, [pc, #404]	@ (8006fb8 <_dtoa_r+0x590>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	f7f9 fa3a 	bl	800029c <__adddf3>
 8006e28:	4605      	mov	r5, r0
 8006e2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	d16a      	bne.n	8006f08 <_dtoa_r+0x4e0>
 8006e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e36:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <_dtoa_r+0x594>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f7f9 fa2d 	bl	8000298 <__aeabi_dsub>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e46:	462a      	mov	r2, r5
 8006e48:	4633      	mov	r3, r6
 8006e4a:	f7f9 fe6d 	bl	8000b28 <__aeabi_dcmpgt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f040 8298 	bne.w	8007384 <_dtoa_r+0x95c>
 8006e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e58:	462a      	mov	r2, r5
 8006e5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e5e:	f7f9 fe45 	bl	8000aec <__aeabi_dcmplt>
 8006e62:	bb38      	cbnz	r0, 8006eb4 <_dtoa_r+0x48c>
 8006e64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f2c0 8157 	blt.w	8007122 <_dtoa_r+0x6fa>
 8006e74:	2f0e      	cmp	r7, #14
 8006e76:	f300 8154 	bgt.w	8007122 <_dtoa_r+0x6fa>
 8006e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006fa8 <_dtoa_r+0x580>)
 8006e7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e80:	ed93 7b00 	vldr	d7, [r3]
 8006e84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	ed8d 7b00 	vstr	d7, [sp]
 8006e8c:	f280 80e5 	bge.w	800705a <_dtoa_r+0x632>
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f300 80e1 	bgt.w	800705a <_dtoa_r+0x632>
 8006e98:	d10c      	bne.n	8006eb4 <_dtoa_r+0x48c>
 8006e9a:	4b48      	ldr	r3, [pc, #288]	@ (8006fbc <_dtoa_r+0x594>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	ec51 0b17 	vmov	r0, r1, d7
 8006ea2:	f7f9 fbb1 	bl	8000608 <__aeabi_dmul>
 8006ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eaa:	f7f9 fe33 	bl	8000b14 <__aeabi_dcmpge>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f000 8266 	beq.w	8007380 <_dtoa_r+0x958>
 8006eb4:	2400      	movs	r4, #0
 8006eb6:	4625      	mov	r5, r4
 8006eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006eba:	4656      	mov	r6, sl
 8006ebc:	ea6f 0803 	mvn.w	r8, r3
 8006ec0:	2700      	movs	r7, #0
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4648      	mov	r0, r9
 8006ec6:	f000 fcbf 	bl	8007848 <_Bfree>
 8006eca:	2d00      	cmp	r5, #0
 8006ecc:	f000 80bd 	beq.w	800704a <_dtoa_r+0x622>
 8006ed0:	b12f      	cbz	r7, 8006ede <_dtoa_r+0x4b6>
 8006ed2:	42af      	cmp	r7, r5
 8006ed4:	d003      	beq.n	8006ede <_dtoa_r+0x4b6>
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4648      	mov	r0, r9
 8006eda:	f000 fcb5 	bl	8007848 <_Bfree>
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	f000 fcb1 	bl	8007848 <_Bfree>
 8006ee6:	e0b0      	b.n	800704a <_dtoa_r+0x622>
 8006ee8:	07e2      	lsls	r2, r4, #31
 8006eea:	d505      	bpl.n	8006ef8 <_dtoa_r+0x4d0>
 8006eec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ef0:	f7f9 fb8a 	bl	8000608 <__aeabi_dmul>
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	1064      	asrs	r4, r4, #1
 8006efa:	3508      	adds	r5, #8
 8006efc:	e762      	b.n	8006dc4 <_dtoa_r+0x39c>
 8006efe:	2602      	movs	r6, #2
 8006f00:	e765      	b.n	8006dce <_dtoa_r+0x3a6>
 8006f02:	9c03      	ldr	r4, [sp, #12]
 8006f04:	46b8      	mov	r8, r7
 8006f06:	e784      	b.n	8006e12 <_dtoa_r+0x3ea>
 8006f08:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <_dtoa_r+0x580>)
 8006f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f14:	4454      	add	r4, sl
 8006f16:	2900      	cmp	r1, #0
 8006f18:	d054      	beq.n	8006fc4 <_dtoa_r+0x59c>
 8006f1a:	4929      	ldr	r1, [pc, #164]	@ (8006fc0 <_dtoa_r+0x598>)
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f7f9 fc9d 	bl	800085c <__aeabi_ddiv>
 8006f22:	4633      	mov	r3, r6
 8006f24:	462a      	mov	r2, r5
 8006f26:	f7f9 f9b7 	bl	8000298 <__aeabi_dsub>
 8006f2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f2e:	4656      	mov	r6, sl
 8006f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f34:	f7f9 fe18 	bl	8000b68 <__aeabi_d2iz>
 8006f38:	4605      	mov	r5, r0
 8006f3a:	f7f9 fafb 	bl	8000534 <__aeabi_i2d>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f46:	f7f9 f9a7 	bl	8000298 <__aeabi_dsub>
 8006f4a:	3530      	adds	r5, #48	@ 0x30
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f54:	f806 5b01 	strb.w	r5, [r6], #1
 8006f58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f5c:	f7f9 fdc6 	bl	8000aec <__aeabi_dcmplt>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d172      	bne.n	800704a <_dtoa_r+0x622>
 8006f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f68:	4911      	ldr	r1, [pc, #68]	@ (8006fb0 <_dtoa_r+0x588>)
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f7f9 f994 	bl	8000298 <__aeabi_dsub>
 8006f70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f74:	f7f9 fdba 	bl	8000aec <__aeabi_dcmplt>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f040 80b4 	bne.w	80070e6 <_dtoa_r+0x6be>
 8006f7e:	42a6      	cmp	r6, r4
 8006f80:	f43f af70 	beq.w	8006e64 <_dtoa_r+0x43c>
 8006f84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f88:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <_dtoa_r+0x58c>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f7f9 fb3c 	bl	8000608 <__aeabi_dmul>
 8006f90:	4b08      	ldr	r3, [pc, #32]	@ (8006fb4 <_dtoa_r+0x58c>)
 8006f92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f96:	2200      	movs	r2, #0
 8006f98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f9c:	f7f9 fb34 	bl	8000608 <__aeabi_dmul>
 8006fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa4:	e7c4      	b.n	8006f30 <_dtoa_r+0x508>
 8006fa6:	bf00      	nop
 8006fa8:	0800b138 	.word	0x0800b138
 8006fac:	0800b110 	.word	0x0800b110
 8006fb0:	3ff00000 	.word	0x3ff00000
 8006fb4:	40240000 	.word	0x40240000
 8006fb8:	401c0000 	.word	0x401c0000
 8006fbc:	40140000 	.word	0x40140000
 8006fc0:	3fe00000 	.word	0x3fe00000
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f7f9 fb1e 	bl	8000608 <__aeabi_dmul>
 8006fcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fd2:	4656      	mov	r6, sl
 8006fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd8:	f7f9 fdc6 	bl	8000b68 <__aeabi_d2iz>
 8006fdc:	4605      	mov	r5, r0
 8006fde:	f7f9 faa9 	bl	8000534 <__aeabi_i2d>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fea:	f7f9 f955 	bl	8000298 <__aeabi_dsub>
 8006fee:	3530      	adds	r5, #48	@ 0x30
 8006ff0:	f806 5b01 	strb.w	r5, [r6], #1
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	42a6      	cmp	r6, r4
 8006ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	d124      	bne.n	800704e <_dtoa_r+0x626>
 8007004:	4baf      	ldr	r3, [pc, #700]	@ (80072c4 <_dtoa_r+0x89c>)
 8007006:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800700a:	f7f9 f947 	bl	800029c <__adddf3>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007016:	f7f9 fd87 	bl	8000b28 <__aeabi_dcmpgt>
 800701a:	2800      	cmp	r0, #0
 800701c:	d163      	bne.n	80070e6 <_dtoa_r+0x6be>
 800701e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007022:	49a8      	ldr	r1, [pc, #672]	@ (80072c4 <_dtoa_r+0x89c>)
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 f937 	bl	8000298 <__aeabi_dsub>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007032:	f7f9 fd5b 	bl	8000aec <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f af14 	beq.w	8006e64 <_dtoa_r+0x43c>
 800703c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800703e:	1e73      	subs	r3, r6, #1
 8007040:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007042:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007046:	2b30      	cmp	r3, #48	@ 0x30
 8007048:	d0f8      	beq.n	800703c <_dtoa_r+0x614>
 800704a:	4647      	mov	r7, r8
 800704c:	e03b      	b.n	80070c6 <_dtoa_r+0x69e>
 800704e:	4b9e      	ldr	r3, [pc, #632]	@ (80072c8 <_dtoa_r+0x8a0>)
 8007050:	f7f9 fada 	bl	8000608 <__aeabi_dmul>
 8007054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007058:	e7bc      	b.n	8006fd4 <_dtoa_r+0x5ac>
 800705a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800705e:	4656      	mov	r6, sl
 8007060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 fbf8 	bl	800085c <__aeabi_ddiv>
 800706c:	f7f9 fd7c 	bl	8000b68 <__aeabi_d2iz>
 8007070:	4680      	mov	r8, r0
 8007072:	f7f9 fa5f 	bl	8000534 <__aeabi_i2d>
 8007076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800707a:	f7f9 fac5 	bl	8000608 <__aeabi_dmul>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800708a:	f7f9 f905 	bl	8000298 <__aeabi_dsub>
 800708e:	f806 4b01 	strb.w	r4, [r6], #1
 8007092:	9d03      	ldr	r5, [sp, #12]
 8007094:	eba6 040a 	sub.w	r4, r6, sl
 8007098:	42a5      	cmp	r5, r4
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	d133      	bne.n	8007108 <_dtoa_r+0x6e0>
 80070a0:	f7f9 f8fc 	bl	800029c <__adddf3>
 80070a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070a8:	4604      	mov	r4, r0
 80070aa:	460d      	mov	r5, r1
 80070ac:	f7f9 fd3c 	bl	8000b28 <__aeabi_dcmpgt>
 80070b0:	b9c0      	cbnz	r0, 80070e4 <_dtoa_r+0x6bc>
 80070b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80070be:	b110      	cbz	r0, 80070c6 <_dtoa_r+0x69e>
 80070c0:	f018 0f01 	tst.w	r8, #1
 80070c4:	d10e      	bne.n	80070e4 <_dtoa_r+0x6bc>
 80070c6:	9902      	ldr	r1, [sp, #8]
 80070c8:	4648      	mov	r0, r9
 80070ca:	f000 fbbd 	bl	8007848 <_Bfree>
 80070ce:	2300      	movs	r3, #0
 80070d0:	7033      	strb	r3, [r6, #0]
 80070d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070d4:	3701      	adds	r7, #1
 80070d6:	601f      	str	r7, [r3, #0]
 80070d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 824b 	beq.w	8007576 <_dtoa_r+0xb4e>
 80070e0:	601e      	str	r6, [r3, #0]
 80070e2:	e248      	b.n	8007576 <_dtoa_r+0xb4e>
 80070e4:	46b8      	mov	r8, r7
 80070e6:	4633      	mov	r3, r6
 80070e8:	461e      	mov	r6, r3
 80070ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ee:	2a39      	cmp	r2, #57	@ 0x39
 80070f0:	d106      	bne.n	8007100 <_dtoa_r+0x6d8>
 80070f2:	459a      	cmp	sl, r3
 80070f4:	d1f8      	bne.n	80070e8 <_dtoa_r+0x6c0>
 80070f6:	2230      	movs	r2, #48	@ 0x30
 80070f8:	f108 0801 	add.w	r8, r8, #1
 80070fc:	f88a 2000 	strb.w	r2, [sl]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	3201      	adds	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e7a0      	b.n	800704a <_dtoa_r+0x622>
 8007108:	4b6f      	ldr	r3, [pc, #444]	@ (80072c8 <_dtoa_r+0x8a0>)
 800710a:	2200      	movs	r2, #0
 800710c:	f7f9 fa7c 	bl	8000608 <__aeabi_dmul>
 8007110:	2200      	movs	r2, #0
 8007112:	2300      	movs	r3, #0
 8007114:	4604      	mov	r4, r0
 8007116:	460d      	mov	r5, r1
 8007118:	f7f9 fcde 	bl	8000ad8 <__aeabi_dcmpeq>
 800711c:	2800      	cmp	r0, #0
 800711e:	d09f      	beq.n	8007060 <_dtoa_r+0x638>
 8007120:	e7d1      	b.n	80070c6 <_dtoa_r+0x69e>
 8007122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007124:	2a00      	cmp	r2, #0
 8007126:	f000 80ea 	beq.w	80072fe <_dtoa_r+0x8d6>
 800712a:	9a07      	ldr	r2, [sp, #28]
 800712c:	2a01      	cmp	r2, #1
 800712e:	f300 80cd 	bgt.w	80072cc <_dtoa_r+0x8a4>
 8007132:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 80c1 	beq.w	80072bc <_dtoa_r+0x894>
 800713a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800713e:	9c08      	ldr	r4, [sp, #32]
 8007140:	9e00      	ldr	r6, [sp, #0]
 8007142:	9a00      	ldr	r2, [sp, #0]
 8007144:	441a      	add	r2, r3
 8007146:	9200      	str	r2, [sp, #0]
 8007148:	9a06      	ldr	r2, [sp, #24]
 800714a:	2101      	movs	r1, #1
 800714c:	441a      	add	r2, r3
 800714e:	4648      	mov	r0, r9
 8007150:	9206      	str	r2, [sp, #24]
 8007152:	f000 fc77 	bl	8007a44 <__i2b>
 8007156:	4605      	mov	r5, r0
 8007158:	b166      	cbz	r6, 8007174 <_dtoa_r+0x74c>
 800715a:	9b06      	ldr	r3, [sp, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	dd09      	ble.n	8007174 <_dtoa_r+0x74c>
 8007160:	42b3      	cmp	r3, r6
 8007162:	9a00      	ldr	r2, [sp, #0]
 8007164:	bfa8      	it	ge
 8007166:	4633      	movge	r3, r6
 8007168:	1ad2      	subs	r2, r2, r3
 800716a:	9200      	str	r2, [sp, #0]
 800716c:	9a06      	ldr	r2, [sp, #24]
 800716e:	1af6      	subs	r6, r6, r3
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	9306      	str	r3, [sp, #24]
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	b30b      	cbz	r3, 80071bc <_dtoa_r+0x794>
 8007178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80c6 	beq.w	800730c <_dtoa_r+0x8e4>
 8007180:	2c00      	cmp	r4, #0
 8007182:	f000 80c0 	beq.w	8007306 <_dtoa_r+0x8de>
 8007186:	4629      	mov	r1, r5
 8007188:	4622      	mov	r2, r4
 800718a:	4648      	mov	r0, r9
 800718c:	f000 fd12 	bl	8007bb4 <__pow5mult>
 8007190:	9a02      	ldr	r2, [sp, #8]
 8007192:	4601      	mov	r1, r0
 8007194:	4605      	mov	r5, r0
 8007196:	4648      	mov	r0, r9
 8007198:	f000 fc6a 	bl	8007a70 <__multiply>
 800719c:	9902      	ldr	r1, [sp, #8]
 800719e:	4680      	mov	r8, r0
 80071a0:	4648      	mov	r0, r9
 80071a2:	f000 fb51 	bl	8007848 <_Bfree>
 80071a6:	9b08      	ldr	r3, [sp, #32]
 80071a8:	1b1b      	subs	r3, r3, r4
 80071aa:	9308      	str	r3, [sp, #32]
 80071ac:	f000 80b1 	beq.w	8007312 <_dtoa_r+0x8ea>
 80071b0:	9a08      	ldr	r2, [sp, #32]
 80071b2:	4641      	mov	r1, r8
 80071b4:	4648      	mov	r0, r9
 80071b6:	f000 fcfd 	bl	8007bb4 <__pow5mult>
 80071ba:	9002      	str	r0, [sp, #8]
 80071bc:	2101      	movs	r1, #1
 80071be:	4648      	mov	r0, r9
 80071c0:	f000 fc40 	bl	8007a44 <__i2b>
 80071c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c6:	4604      	mov	r4, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 81d8 	beq.w	800757e <_dtoa_r+0xb56>
 80071ce:	461a      	mov	r2, r3
 80071d0:	4601      	mov	r1, r0
 80071d2:	4648      	mov	r0, r9
 80071d4:	f000 fcee 	bl	8007bb4 <__pow5mult>
 80071d8:	9b07      	ldr	r3, [sp, #28]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	4604      	mov	r4, r0
 80071de:	f300 809f 	bgt.w	8007320 <_dtoa_r+0x8f8>
 80071e2:	9b04      	ldr	r3, [sp, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8097 	bne.w	8007318 <_dtoa_r+0x8f0>
 80071ea:	9b05      	ldr	r3, [sp, #20]
 80071ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8093 	bne.w	800731c <_dtoa_r+0x8f4>
 80071f6:	9b05      	ldr	r3, [sp, #20]
 80071f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071fc:	0d1b      	lsrs	r3, r3, #20
 80071fe:	051b      	lsls	r3, r3, #20
 8007200:	b133      	cbz	r3, 8007210 <_dtoa_r+0x7e8>
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	3301      	adds	r3, #1
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	9b06      	ldr	r3, [sp, #24]
 800720a:	3301      	adds	r3, #1
 800720c:	9306      	str	r3, [sp, #24]
 800720e:	2301      	movs	r3, #1
 8007210:	9308      	str	r3, [sp, #32]
 8007212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 81b8 	beq.w	800758a <_dtoa_r+0xb62>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007220:	6918      	ldr	r0, [r3, #16]
 8007222:	f000 fbc3 	bl	80079ac <__hi0bits>
 8007226:	f1c0 0020 	rsb	r0, r0, #32
 800722a:	9b06      	ldr	r3, [sp, #24]
 800722c:	4418      	add	r0, r3
 800722e:	f010 001f 	ands.w	r0, r0, #31
 8007232:	f000 8082 	beq.w	800733a <_dtoa_r+0x912>
 8007236:	f1c0 0320 	rsb	r3, r0, #32
 800723a:	2b04      	cmp	r3, #4
 800723c:	dd73      	ble.n	8007326 <_dtoa_r+0x8fe>
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	f1c0 001c 	rsb	r0, r0, #28
 8007244:	4403      	add	r3, r0
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	4403      	add	r3, r0
 800724c:	4406      	add	r6, r0
 800724e:	9306      	str	r3, [sp, #24]
 8007250:	9b00      	ldr	r3, [sp, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	dd05      	ble.n	8007262 <_dtoa_r+0x83a>
 8007256:	9902      	ldr	r1, [sp, #8]
 8007258:	461a      	mov	r2, r3
 800725a:	4648      	mov	r0, r9
 800725c:	f000 fd04 	bl	8007c68 <__lshift>
 8007260:	9002      	str	r0, [sp, #8]
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd05      	ble.n	8007274 <_dtoa_r+0x84c>
 8007268:	4621      	mov	r1, r4
 800726a:	461a      	mov	r2, r3
 800726c:	4648      	mov	r0, r9
 800726e:	f000 fcfb 	bl	8007c68 <__lshift>
 8007272:	4604      	mov	r4, r0
 8007274:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d061      	beq.n	800733e <_dtoa_r+0x916>
 800727a:	9802      	ldr	r0, [sp, #8]
 800727c:	4621      	mov	r1, r4
 800727e:	f000 fd5f 	bl	8007d40 <__mcmp>
 8007282:	2800      	cmp	r0, #0
 8007284:	da5b      	bge.n	800733e <_dtoa_r+0x916>
 8007286:	2300      	movs	r3, #0
 8007288:	9902      	ldr	r1, [sp, #8]
 800728a:	220a      	movs	r2, #10
 800728c:	4648      	mov	r0, r9
 800728e:	f000 fafd 	bl	800788c <__multadd>
 8007292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007294:	9002      	str	r0, [sp, #8]
 8007296:	f107 38ff 	add.w	r8, r7, #4294967295
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8177 	beq.w	800758e <_dtoa_r+0xb66>
 80072a0:	4629      	mov	r1, r5
 80072a2:	2300      	movs	r3, #0
 80072a4:	220a      	movs	r2, #10
 80072a6:	4648      	mov	r0, r9
 80072a8:	f000 faf0 	bl	800788c <__multadd>
 80072ac:	f1bb 0f00 	cmp.w	fp, #0
 80072b0:	4605      	mov	r5, r0
 80072b2:	dc6f      	bgt.n	8007394 <_dtoa_r+0x96c>
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	dc49      	bgt.n	800734e <_dtoa_r+0x926>
 80072ba:	e06b      	b.n	8007394 <_dtoa_r+0x96c>
 80072bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072c2:	e73c      	b.n	800713e <_dtoa_r+0x716>
 80072c4:	3fe00000 	.word	0x3fe00000
 80072c8:	40240000 	.word	0x40240000
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1e5c      	subs	r4, r3, #1
 80072d0:	9b08      	ldr	r3, [sp, #32]
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	db09      	blt.n	80072ea <_dtoa_r+0x8c2>
 80072d6:	1b1c      	subs	r4, r3, r4
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f6bf af30 	bge.w	8007140 <_dtoa_r+0x718>
 80072e0:	9b00      	ldr	r3, [sp, #0]
 80072e2:	9a03      	ldr	r2, [sp, #12]
 80072e4:	1a9e      	subs	r6, r3, r2
 80072e6:	2300      	movs	r3, #0
 80072e8:	e72b      	b.n	8007142 <_dtoa_r+0x71a>
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072ee:	9408      	str	r4, [sp, #32]
 80072f0:	1ae3      	subs	r3, r4, r3
 80072f2:	441a      	add	r2, r3
 80072f4:	9e00      	ldr	r6, [sp, #0]
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80072fa:	2400      	movs	r4, #0
 80072fc:	e721      	b.n	8007142 <_dtoa_r+0x71a>
 80072fe:	9c08      	ldr	r4, [sp, #32]
 8007300:	9e00      	ldr	r6, [sp, #0]
 8007302:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007304:	e728      	b.n	8007158 <_dtoa_r+0x730>
 8007306:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800730a:	e751      	b.n	80071b0 <_dtoa_r+0x788>
 800730c:	9a08      	ldr	r2, [sp, #32]
 800730e:	9902      	ldr	r1, [sp, #8]
 8007310:	e750      	b.n	80071b4 <_dtoa_r+0x78c>
 8007312:	f8cd 8008 	str.w	r8, [sp, #8]
 8007316:	e751      	b.n	80071bc <_dtoa_r+0x794>
 8007318:	2300      	movs	r3, #0
 800731a:	e779      	b.n	8007210 <_dtoa_r+0x7e8>
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	e777      	b.n	8007210 <_dtoa_r+0x7e8>
 8007320:	2300      	movs	r3, #0
 8007322:	9308      	str	r3, [sp, #32]
 8007324:	e779      	b.n	800721a <_dtoa_r+0x7f2>
 8007326:	d093      	beq.n	8007250 <_dtoa_r+0x828>
 8007328:	9a00      	ldr	r2, [sp, #0]
 800732a:	331c      	adds	r3, #28
 800732c:	441a      	add	r2, r3
 800732e:	9200      	str	r2, [sp, #0]
 8007330:	9a06      	ldr	r2, [sp, #24]
 8007332:	441a      	add	r2, r3
 8007334:	441e      	add	r6, r3
 8007336:	9206      	str	r2, [sp, #24]
 8007338:	e78a      	b.n	8007250 <_dtoa_r+0x828>
 800733a:	4603      	mov	r3, r0
 800733c:	e7f4      	b.n	8007328 <_dtoa_r+0x900>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	46b8      	mov	r8, r7
 8007344:	dc20      	bgt.n	8007388 <_dtoa_r+0x960>
 8007346:	469b      	mov	fp, r3
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	2b02      	cmp	r3, #2
 800734c:	dd1e      	ble.n	800738c <_dtoa_r+0x964>
 800734e:	f1bb 0f00 	cmp.w	fp, #0
 8007352:	f47f adb1 	bne.w	8006eb8 <_dtoa_r+0x490>
 8007356:	4621      	mov	r1, r4
 8007358:	465b      	mov	r3, fp
 800735a:	2205      	movs	r2, #5
 800735c:	4648      	mov	r0, r9
 800735e:	f000 fa95 	bl	800788c <__multadd>
 8007362:	4601      	mov	r1, r0
 8007364:	4604      	mov	r4, r0
 8007366:	9802      	ldr	r0, [sp, #8]
 8007368:	f000 fcea 	bl	8007d40 <__mcmp>
 800736c:	2800      	cmp	r0, #0
 800736e:	f77f ada3 	ble.w	8006eb8 <_dtoa_r+0x490>
 8007372:	4656      	mov	r6, sl
 8007374:	2331      	movs	r3, #49	@ 0x31
 8007376:	f806 3b01 	strb.w	r3, [r6], #1
 800737a:	f108 0801 	add.w	r8, r8, #1
 800737e:	e59f      	b.n	8006ec0 <_dtoa_r+0x498>
 8007380:	9c03      	ldr	r4, [sp, #12]
 8007382:	46b8      	mov	r8, r7
 8007384:	4625      	mov	r5, r4
 8007386:	e7f4      	b.n	8007372 <_dtoa_r+0x94a>
 8007388:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800738c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8101 	beq.w	8007596 <_dtoa_r+0xb6e>
 8007394:	2e00      	cmp	r6, #0
 8007396:	dd05      	ble.n	80073a4 <_dtoa_r+0x97c>
 8007398:	4629      	mov	r1, r5
 800739a:	4632      	mov	r2, r6
 800739c:	4648      	mov	r0, r9
 800739e:	f000 fc63 	bl	8007c68 <__lshift>
 80073a2:	4605      	mov	r5, r0
 80073a4:	9b08      	ldr	r3, [sp, #32]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05c      	beq.n	8007464 <_dtoa_r+0xa3c>
 80073aa:	6869      	ldr	r1, [r5, #4]
 80073ac:	4648      	mov	r0, r9
 80073ae:	f000 fa0b 	bl	80077c8 <_Balloc>
 80073b2:	4606      	mov	r6, r0
 80073b4:	b928      	cbnz	r0, 80073c2 <_dtoa_r+0x99a>
 80073b6:	4b82      	ldr	r3, [pc, #520]	@ (80075c0 <_dtoa_r+0xb98>)
 80073b8:	4602      	mov	r2, r0
 80073ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073be:	f7ff bb4a 	b.w	8006a56 <_dtoa_r+0x2e>
 80073c2:	692a      	ldr	r2, [r5, #16]
 80073c4:	3202      	adds	r2, #2
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	f105 010c 	add.w	r1, r5, #12
 80073cc:	300c      	adds	r0, #12
 80073ce:	f002 f93f 	bl	8009650 <memcpy>
 80073d2:	2201      	movs	r2, #1
 80073d4:	4631      	mov	r1, r6
 80073d6:	4648      	mov	r0, r9
 80073d8:	f000 fc46 	bl	8007c68 <__lshift>
 80073dc:	f10a 0301 	add.w	r3, sl, #1
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	eb0a 030b 	add.w	r3, sl, fp
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	462f      	mov	r7, r5
 80073f0:	9306      	str	r3, [sp, #24]
 80073f2:	4605      	mov	r5, r0
 80073f4:	9b00      	ldr	r3, [sp, #0]
 80073f6:	9802      	ldr	r0, [sp, #8]
 80073f8:	4621      	mov	r1, r4
 80073fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80073fe:	f7ff fa8b 	bl	8006918 <quorem>
 8007402:	4603      	mov	r3, r0
 8007404:	3330      	adds	r3, #48	@ 0x30
 8007406:	9003      	str	r0, [sp, #12]
 8007408:	4639      	mov	r1, r7
 800740a:	9802      	ldr	r0, [sp, #8]
 800740c:	9309      	str	r3, [sp, #36]	@ 0x24
 800740e:	f000 fc97 	bl	8007d40 <__mcmp>
 8007412:	462a      	mov	r2, r5
 8007414:	9004      	str	r0, [sp, #16]
 8007416:	4621      	mov	r1, r4
 8007418:	4648      	mov	r0, r9
 800741a:	f000 fcad 	bl	8007d78 <__mdiff>
 800741e:	68c2      	ldr	r2, [r0, #12]
 8007420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007422:	4606      	mov	r6, r0
 8007424:	bb02      	cbnz	r2, 8007468 <_dtoa_r+0xa40>
 8007426:	4601      	mov	r1, r0
 8007428:	9802      	ldr	r0, [sp, #8]
 800742a:	f000 fc89 	bl	8007d40 <__mcmp>
 800742e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007430:	4602      	mov	r2, r0
 8007432:	4631      	mov	r1, r6
 8007434:	4648      	mov	r0, r9
 8007436:	920c      	str	r2, [sp, #48]	@ 0x30
 8007438:	9309      	str	r3, [sp, #36]	@ 0x24
 800743a:	f000 fa05 	bl	8007848 <_Bfree>
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007442:	9e00      	ldr	r6, [sp, #0]
 8007444:	ea42 0103 	orr.w	r1, r2, r3
 8007448:	9b06      	ldr	r3, [sp, #24]
 800744a:	4319      	orrs	r1, r3
 800744c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744e:	d10d      	bne.n	800746c <_dtoa_r+0xa44>
 8007450:	2b39      	cmp	r3, #57	@ 0x39
 8007452:	d027      	beq.n	80074a4 <_dtoa_r+0xa7c>
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	2a00      	cmp	r2, #0
 8007458:	dd01      	ble.n	800745e <_dtoa_r+0xa36>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	3331      	adds	r3, #49	@ 0x31
 800745e:	f88b 3000 	strb.w	r3, [fp]
 8007462:	e52e      	b.n	8006ec2 <_dtoa_r+0x49a>
 8007464:	4628      	mov	r0, r5
 8007466:	e7b9      	b.n	80073dc <_dtoa_r+0x9b4>
 8007468:	2201      	movs	r2, #1
 800746a:	e7e2      	b.n	8007432 <_dtoa_r+0xa0a>
 800746c:	9904      	ldr	r1, [sp, #16]
 800746e:	2900      	cmp	r1, #0
 8007470:	db04      	blt.n	800747c <_dtoa_r+0xa54>
 8007472:	9807      	ldr	r0, [sp, #28]
 8007474:	4301      	orrs	r1, r0
 8007476:	9806      	ldr	r0, [sp, #24]
 8007478:	4301      	orrs	r1, r0
 800747a:	d120      	bne.n	80074be <_dtoa_r+0xa96>
 800747c:	2a00      	cmp	r2, #0
 800747e:	ddee      	ble.n	800745e <_dtoa_r+0xa36>
 8007480:	9902      	ldr	r1, [sp, #8]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2201      	movs	r2, #1
 8007486:	4648      	mov	r0, r9
 8007488:	f000 fbee 	bl	8007c68 <__lshift>
 800748c:	4621      	mov	r1, r4
 800748e:	9002      	str	r0, [sp, #8]
 8007490:	f000 fc56 	bl	8007d40 <__mcmp>
 8007494:	2800      	cmp	r0, #0
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	dc02      	bgt.n	80074a0 <_dtoa_r+0xa78>
 800749a:	d1e0      	bne.n	800745e <_dtoa_r+0xa36>
 800749c:	07da      	lsls	r2, r3, #31
 800749e:	d5de      	bpl.n	800745e <_dtoa_r+0xa36>
 80074a0:	2b39      	cmp	r3, #57	@ 0x39
 80074a2:	d1da      	bne.n	800745a <_dtoa_r+0xa32>
 80074a4:	2339      	movs	r3, #57	@ 0x39
 80074a6:	f88b 3000 	strb.w	r3, [fp]
 80074aa:	4633      	mov	r3, r6
 80074ac:	461e      	mov	r6, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074b4:	2a39      	cmp	r2, #57	@ 0x39
 80074b6:	d04e      	beq.n	8007556 <_dtoa_r+0xb2e>
 80074b8:	3201      	adds	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e501      	b.n	8006ec2 <_dtoa_r+0x49a>
 80074be:	2a00      	cmp	r2, #0
 80074c0:	dd03      	ble.n	80074ca <_dtoa_r+0xaa2>
 80074c2:	2b39      	cmp	r3, #57	@ 0x39
 80074c4:	d0ee      	beq.n	80074a4 <_dtoa_r+0xa7c>
 80074c6:	3301      	adds	r3, #1
 80074c8:	e7c9      	b.n	800745e <_dtoa_r+0xa36>
 80074ca:	9a00      	ldr	r2, [sp, #0]
 80074cc:	9908      	ldr	r1, [sp, #32]
 80074ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074d2:	428a      	cmp	r2, r1
 80074d4:	d028      	beq.n	8007528 <_dtoa_r+0xb00>
 80074d6:	9902      	ldr	r1, [sp, #8]
 80074d8:	2300      	movs	r3, #0
 80074da:	220a      	movs	r2, #10
 80074dc:	4648      	mov	r0, r9
 80074de:	f000 f9d5 	bl	800788c <__multadd>
 80074e2:	42af      	cmp	r7, r5
 80074e4:	9002      	str	r0, [sp, #8]
 80074e6:	f04f 0300 	mov.w	r3, #0
 80074ea:	f04f 020a 	mov.w	r2, #10
 80074ee:	4639      	mov	r1, r7
 80074f0:	4648      	mov	r0, r9
 80074f2:	d107      	bne.n	8007504 <_dtoa_r+0xadc>
 80074f4:	f000 f9ca 	bl	800788c <__multadd>
 80074f8:	4607      	mov	r7, r0
 80074fa:	4605      	mov	r5, r0
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	e777      	b.n	80073f4 <_dtoa_r+0x9cc>
 8007504:	f000 f9c2 	bl	800788c <__multadd>
 8007508:	4629      	mov	r1, r5
 800750a:	4607      	mov	r7, r0
 800750c:	2300      	movs	r3, #0
 800750e:	220a      	movs	r2, #10
 8007510:	4648      	mov	r0, r9
 8007512:	f000 f9bb 	bl	800788c <__multadd>
 8007516:	4605      	mov	r5, r0
 8007518:	e7f0      	b.n	80074fc <_dtoa_r+0xad4>
 800751a:	f1bb 0f00 	cmp.w	fp, #0
 800751e:	bfcc      	ite	gt
 8007520:	465e      	movgt	r6, fp
 8007522:	2601      	movle	r6, #1
 8007524:	4456      	add	r6, sl
 8007526:	2700      	movs	r7, #0
 8007528:	9902      	ldr	r1, [sp, #8]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	4648      	mov	r0, r9
 8007530:	f000 fb9a 	bl	8007c68 <__lshift>
 8007534:	4621      	mov	r1, r4
 8007536:	9002      	str	r0, [sp, #8]
 8007538:	f000 fc02 	bl	8007d40 <__mcmp>
 800753c:	2800      	cmp	r0, #0
 800753e:	dcb4      	bgt.n	80074aa <_dtoa_r+0xa82>
 8007540:	d102      	bne.n	8007548 <_dtoa_r+0xb20>
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	07db      	lsls	r3, r3, #31
 8007546:	d4b0      	bmi.n	80074aa <_dtoa_r+0xa82>
 8007548:	4633      	mov	r3, r6
 800754a:	461e      	mov	r6, r3
 800754c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007550:	2a30      	cmp	r2, #48	@ 0x30
 8007552:	d0fa      	beq.n	800754a <_dtoa_r+0xb22>
 8007554:	e4b5      	b.n	8006ec2 <_dtoa_r+0x49a>
 8007556:	459a      	cmp	sl, r3
 8007558:	d1a8      	bne.n	80074ac <_dtoa_r+0xa84>
 800755a:	2331      	movs	r3, #49	@ 0x31
 800755c:	f108 0801 	add.w	r8, r8, #1
 8007560:	f88a 3000 	strb.w	r3, [sl]
 8007564:	e4ad      	b.n	8006ec2 <_dtoa_r+0x49a>
 8007566:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007568:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80075c4 <_dtoa_r+0xb9c>
 800756c:	b11b      	cbz	r3, 8007576 <_dtoa_r+0xb4e>
 800756e:	f10a 0308 	add.w	r3, sl, #8
 8007572:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4650      	mov	r0, sl
 8007578:	b017      	add	sp, #92	@ 0x5c
 800757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757e:	9b07      	ldr	r3, [sp, #28]
 8007580:	2b01      	cmp	r3, #1
 8007582:	f77f ae2e 	ble.w	80071e2 <_dtoa_r+0x7ba>
 8007586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007588:	9308      	str	r3, [sp, #32]
 800758a:	2001      	movs	r0, #1
 800758c:	e64d      	b.n	800722a <_dtoa_r+0x802>
 800758e:	f1bb 0f00 	cmp.w	fp, #0
 8007592:	f77f aed9 	ble.w	8007348 <_dtoa_r+0x920>
 8007596:	4656      	mov	r6, sl
 8007598:	9802      	ldr	r0, [sp, #8]
 800759a:	4621      	mov	r1, r4
 800759c:	f7ff f9bc 	bl	8006918 <quorem>
 80075a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80075a4:	f806 3b01 	strb.w	r3, [r6], #1
 80075a8:	eba6 020a 	sub.w	r2, r6, sl
 80075ac:	4593      	cmp	fp, r2
 80075ae:	ddb4      	ble.n	800751a <_dtoa_r+0xaf2>
 80075b0:	9902      	ldr	r1, [sp, #8]
 80075b2:	2300      	movs	r3, #0
 80075b4:	220a      	movs	r2, #10
 80075b6:	4648      	mov	r0, r9
 80075b8:	f000 f968 	bl	800788c <__multadd>
 80075bc:	9002      	str	r0, [sp, #8]
 80075be:	e7eb      	b.n	8007598 <_dtoa_r+0xb70>
 80075c0:	0800afdd 	.word	0x0800afdd
 80075c4:	0800af61 	.word	0x0800af61

080075c8 <_free_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4605      	mov	r5, r0
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d041      	beq.n	8007654 <_free_r+0x8c>
 80075d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d4:	1f0c      	subs	r4, r1, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfb8      	it	lt
 80075da:	18e4      	addlt	r4, r4, r3
 80075dc:	f000 f8e8 	bl	80077b0 <__malloc_lock>
 80075e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007658 <_free_r+0x90>)
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	b933      	cbnz	r3, 80075f4 <_free_r+0x2c>
 80075e6:	6063      	str	r3, [r4, #4]
 80075e8:	6014      	str	r4, [r2, #0]
 80075ea:	4628      	mov	r0, r5
 80075ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f0:	f000 b8e4 	b.w	80077bc <__malloc_unlock>
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d908      	bls.n	800760a <_free_r+0x42>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	1821      	adds	r1, r4, r0
 80075fc:	428b      	cmp	r3, r1
 80075fe:	bf01      	itttt	eq
 8007600:	6819      	ldreq	r1, [r3, #0]
 8007602:	685b      	ldreq	r3, [r3, #4]
 8007604:	1809      	addeq	r1, r1, r0
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	e7ed      	b.n	80075e6 <_free_r+0x1e>
 800760a:	461a      	mov	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b10b      	cbz	r3, 8007614 <_free_r+0x4c>
 8007610:	42a3      	cmp	r3, r4
 8007612:	d9fa      	bls.n	800760a <_free_r+0x42>
 8007614:	6811      	ldr	r1, [r2, #0]
 8007616:	1850      	adds	r0, r2, r1
 8007618:	42a0      	cmp	r0, r4
 800761a:	d10b      	bne.n	8007634 <_free_r+0x6c>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	4401      	add	r1, r0
 8007620:	1850      	adds	r0, r2, r1
 8007622:	4283      	cmp	r3, r0
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	d1e0      	bne.n	80075ea <_free_r+0x22>
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	6053      	str	r3, [r2, #4]
 800762e:	4408      	add	r0, r1
 8007630:	6010      	str	r0, [r2, #0]
 8007632:	e7da      	b.n	80075ea <_free_r+0x22>
 8007634:	d902      	bls.n	800763c <_free_r+0x74>
 8007636:	230c      	movs	r3, #12
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	e7d6      	b.n	80075ea <_free_r+0x22>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	1821      	adds	r1, r4, r0
 8007640:	428b      	cmp	r3, r1
 8007642:	bf04      	itt	eq
 8007644:	6819      	ldreq	r1, [r3, #0]
 8007646:	685b      	ldreq	r3, [r3, #4]
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	bf04      	itt	eq
 800764c:	1809      	addeq	r1, r1, r0
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	6054      	str	r4, [r2, #4]
 8007652:	e7ca      	b.n	80075ea <_free_r+0x22>
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	bf00      	nop
 8007658:	20000498 	.word	0x20000498

0800765c <malloc>:
 800765c:	4b02      	ldr	r3, [pc, #8]	@ (8007668 <malloc+0xc>)
 800765e:	4601      	mov	r1, r0
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	f000 b825 	b.w	80076b0 <_malloc_r>
 8007666:	bf00      	nop
 8007668:	20000018 	.word	0x20000018

0800766c <sbrk_aligned>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4e0f      	ldr	r6, [pc, #60]	@ (80076ac <sbrk_aligned+0x40>)
 8007670:	460c      	mov	r4, r1
 8007672:	6831      	ldr	r1, [r6, #0]
 8007674:	4605      	mov	r5, r0
 8007676:	b911      	cbnz	r1, 800767e <sbrk_aligned+0x12>
 8007678:	f001 ffda 	bl	8009630 <_sbrk_r>
 800767c:	6030      	str	r0, [r6, #0]
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f001 ffd5 	bl	8009630 <_sbrk_r>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	d103      	bne.n	8007692 <sbrk_aligned+0x26>
 800768a:	f04f 34ff 	mov.w	r4, #4294967295
 800768e:	4620      	mov	r0, r4
 8007690:	bd70      	pop	{r4, r5, r6, pc}
 8007692:	1cc4      	adds	r4, r0, #3
 8007694:	f024 0403 	bic.w	r4, r4, #3
 8007698:	42a0      	cmp	r0, r4
 800769a:	d0f8      	beq.n	800768e <sbrk_aligned+0x22>
 800769c:	1a21      	subs	r1, r4, r0
 800769e:	4628      	mov	r0, r5
 80076a0:	f001 ffc6 	bl	8009630 <_sbrk_r>
 80076a4:	3001      	adds	r0, #1
 80076a6:	d1f2      	bne.n	800768e <sbrk_aligned+0x22>
 80076a8:	e7ef      	b.n	800768a <sbrk_aligned+0x1e>
 80076aa:	bf00      	nop
 80076ac:	20000494 	.word	0x20000494

080076b0 <_malloc_r>:
 80076b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	1ccd      	adds	r5, r1, #3
 80076b6:	f025 0503 	bic.w	r5, r5, #3
 80076ba:	3508      	adds	r5, #8
 80076bc:	2d0c      	cmp	r5, #12
 80076be:	bf38      	it	cc
 80076c0:	250c      	movcc	r5, #12
 80076c2:	2d00      	cmp	r5, #0
 80076c4:	4606      	mov	r6, r0
 80076c6:	db01      	blt.n	80076cc <_malloc_r+0x1c>
 80076c8:	42a9      	cmp	r1, r5
 80076ca:	d904      	bls.n	80076d6 <_malloc_r+0x26>
 80076cc:	230c      	movs	r3, #12
 80076ce:	6033      	str	r3, [r6, #0]
 80076d0:	2000      	movs	r0, #0
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077ac <_malloc_r+0xfc>
 80076da:	f000 f869 	bl	80077b0 <__malloc_lock>
 80076de:	f8d8 3000 	ldr.w	r3, [r8]
 80076e2:	461c      	mov	r4, r3
 80076e4:	bb44      	cbnz	r4, 8007738 <_malloc_r+0x88>
 80076e6:	4629      	mov	r1, r5
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7ff ffbf 	bl	800766c <sbrk_aligned>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	4604      	mov	r4, r0
 80076f2:	d158      	bne.n	80077a6 <_malloc_r+0xf6>
 80076f4:	f8d8 4000 	ldr.w	r4, [r8]
 80076f8:	4627      	mov	r7, r4
 80076fa:	2f00      	cmp	r7, #0
 80076fc:	d143      	bne.n	8007786 <_malloc_r+0xd6>
 80076fe:	2c00      	cmp	r4, #0
 8007700:	d04b      	beq.n	800779a <_malloc_r+0xea>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	4639      	mov	r1, r7
 8007706:	4630      	mov	r0, r6
 8007708:	eb04 0903 	add.w	r9, r4, r3
 800770c:	f001 ff90 	bl	8009630 <_sbrk_r>
 8007710:	4581      	cmp	r9, r0
 8007712:	d142      	bne.n	800779a <_malloc_r+0xea>
 8007714:	6821      	ldr	r1, [r4, #0]
 8007716:	1a6d      	subs	r5, r5, r1
 8007718:	4629      	mov	r1, r5
 800771a:	4630      	mov	r0, r6
 800771c:	f7ff ffa6 	bl	800766c <sbrk_aligned>
 8007720:	3001      	adds	r0, #1
 8007722:	d03a      	beq.n	800779a <_malloc_r+0xea>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	442b      	add	r3, r5
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	f8d8 3000 	ldr.w	r3, [r8]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	bb62      	cbnz	r2, 800778c <_malloc_r+0xdc>
 8007732:	f8c8 7000 	str.w	r7, [r8]
 8007736:	e00f      	b.n	8007758 <_malloc_r+0xa8>
 8007738:	6822      	ldr	r2, [r4, #0]
 800773a:	1b52      	subs	r2, r2, r5
 800773c:	d420      	bmi.n	8007780 <_malloc_r+0xd0>
 800773e:	2a0b      	cmp	r2, #11
 8007740:	d917      	bls.n	8007772 <_malloc_r+0xc2>
 8007742:	1961      	adds	r1, r4, r5
 8007744:	42a3      	cmp	r3, r4
 8007746:	6025      	str	r5, [r4, #0]
 8007748:	bf18      	it	ne
 800774a:	6059      	strne	r1, [r3, #4]
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	bf08      	it	eq
 8007750:	f8c8 1000 	streq.w	r1, [r8]
 8007754:	5162      	str	r2, [r4, r5]
 8007756:	604b      	str	r3, [r1, #4]
 8007758:	4630      	mov	r0, r6
 800775a:	f000 f82f 	bl	80077bc <__malloc_unlock>
 800775e:	f104 000b 	add.w	r0, r4, #11
 8007762:	1d23      	adds	r3, r4, #4
 8007764:	f020 0007 	bic.w	r0, r0, #7
 8007768:	1ac2      	subs	r2, r0, r3
 800776a:	bf1c      	itt	ne
 800776c:	1a1b      	subne	r3, r3, r0
 800776e:	50a3      	strne	r3, [r4, r2]
 8007770:	e7af      	b.n	80076d2 <_malloc_r+0x22>
 8007772:	6862      	ldr	r2, [r4, #4]
 8007774:	42a3      	cmp	r3, r4
 8007776:	bf0c      	ite	eq
 8007778:	f8c8 2000 	streq.w	r2, [r8]
 800777c:	605a      	strne	r2, [r3, #4]
 800777e:	e7eb      	b.n	8007758 <_malloc_r+0xa8>
 8007780:	4623      	mov	r3, r4
 8007782:	6864      	ldr	r4, [r4, #4]
 8007784:	e7ae      	b.n	80076e4 <_malloc_r+0x34>
 8007786:	463c      	mov	r4, r7
 8007788:	687f      	ldr	r7, [r7, #4]
 800778a:	e7b6      	b.n	80076fa <_malloc_r+0x4a>
 800778c:	461a      	mov	r2, r3
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	42a3      	cmp	r3, r4
 8007792:	d1fb      	bne.n	800778c <_malloc_r+0xdc>
 8007794:	2300      	movs	r3, #0
 8007796:	6053      	str	r3, [r2, #4]
 8007798:	e7de      	b.n	8007758 <_malloc_r+0xa8>
 800779a:	230c      	movs	r3, #12
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 f80c 	bl	80077bc <__malloc_unlock>
 80077a4:	e794      	b.n	80076d0 <_malloc_r+0x20>
 80077a6:	6005      	str	r5, [r0, #0]
 80077a8:	e7d6      	b.n	8007758 <_malloc_r+0xa8>
 80077aa:	bf00      	nop
 80077ac:	20000498 	.word	0x20000498

080077b0 <__malloc_lock>:
 80077b0:	4801      	ldr	r0, [pc, #4]	@ (80077b8 <__malloc_lock+0x8>)
 80077b2:	f7ff b8a8 	b.w	8006906 <__retarget_lock_acquire_recursive>
 80077b6:	bf00      	nop
 80077b8:	20000490 	.word	0x20000490

080077bc <__malloc_unlock>:
 80077bc:	4801      	ldr	r0, [pc, #4]	@ (80077c4 <__malloc_unlock+0x8>)
 80077be:	f7ff b8a3 	b.w	8006908 <__retarget_lock_release_recursive>
 80077c2:	bf00      	nop
 80077c4:	20000490 	.word	0x20000490

080077c8 <_Balloc>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	69c6      	ldr	r6, [r0, #28]
 80077cc:	4604      	mov	r4, r0
 80077ce:	460d      	mov	r5, r1
 80077d0:	b976      	cbnz	r6, 80077f0 <_Balloc+0x28>
 80077d2:	2010      	movs	r0, #16
 80077d4:	f7ff ff42 	bl	800765c <malloc>
 80077d8:	4602      	mov	r2, r0
 80077da:	61e0      	str	r0, [r4, #28]
 80077dc:	b920      	cbnz	r0, 80077e8 <_Balloc+0x20>
 80077de:	4b18      	ldr	r3, [pc, #96]	@ (8007840 <_Balloc+0x78>)
 80077e0:	4818      	ldr	r0, [pc, #96]	@ (8007844 <_Balloc+0x7c>)
 80077e2:	216b      	movs	r1, #107	@ 0x6b
 80077e4:	f001 ff4c 	bl	8009680 <__assert_func>
 80077e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077ec:	6006      	str	r6, [r0, #0]
 80077ee:	60c6      	str	r6, [r0, #12]
 80077f0:	69e6      	ldr	r6, [r4, #28]
 80077f2:	68f3      	ldr	r3, [r6, #12]
 80077f4:	b183      	cbz	r3, 8007818 <_Balloc+0x50>
 80077f6:	69e3      	ldr	r3, [r4, #28]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077fe:	b9b8      	cbnz	r0, 8007830 <_Balloc+0x68>
 8007800:	2101      	movs	r1, #1
 8007802:	fa01 f605 	lsl.w	r6, r1, r5
 8007806:	1d72      	adds	r2, r6, #5
 8007808:	0092      	lsls	r2, r2, #2
 800780a:	4620      	mov	r0, r4
 800780c:	f001 ff56 	bl	80096bc <_calloc_r>
 8007810:	b160      	cbz	r0, 800782c <_Balloc+0x64>
 8007812:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007816:	e00e      	b.n	8007836 <_Balloc+0x6e>
 8007818:	2221      	movs	r2, #33	@ 0x21
 800781a:	2104      	movs	r1, #4
 800781c:	4620      	mov	r0, r4
 800781e:	f001 ff4d 	bl	80096bc <_calloc_r>
 8007822:	69e3      	ldr	r3, [r4, #28]
 8007824:	60f0      	str	r0, [r6, #12]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e4      	bne.n	80077f6 <_Balloc+0x2e>
 800782c:	2000      	movs	r0, #0
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	6802      	ldr	r2, [r0, #0]
 8007832:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007836:	2300      	movs	r3, #0
 8007838:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800783c:	e7f7      	b.n	800782e <_Balloc+0x66>
 800783e:	bf00      	nop
 8007840:	0800af6e 	.word	0x0800af6e
 8007844:	0800afee 	.word	0x0800afee

08007848 <_Bfree>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	69c6      	ldr	r6, [r0, #28]
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b976      	cbnz	r6, 8007870 <_Bfree+0x28>
 8007852:	2010      	movs	r0, #16
 8007854:	f7ff ff02 	bl	800765c <malloc>
 8007858:	4602      	mov	r2, r0
 800785a:	61e8      	str	r0, [r5, #28]
 800785c:	b920      	cbnz	r0, 8007868 <_Bfree+0x20>
 800785e:	4b09      	ldr	r3, [pc, #36]	@ (8007884 <_Bfree+0x3c>)
 8007860:	4809      	ldr	r0, [pc, #36]	@ (8007888 <_Bfree+0x40>)
 8007862:	218f      	movs	r1, #143	@ 0x8f
 8007864:	f001 ff0c 	bl	8009680 <__assert_func>
 8007868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800786c:	6006      	str	r6, [r0, #0]
 800786e:	60c6      	str	r6, [r0, #12]
 8007870:	b13c      	cbz	r4, 8007882 <_Bfree+0x3a>
 8007872:	69eb      	ldr	r3, [r5, #28]
 8007874:	6862      	ldr	r2, [r4, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800787c:	6021      	str	r1, [r4, #0]
 800787e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	0800af6e 	.word	0x0800af6e
 8007888:	0800afee 	.word	0x0800afee

0800788c <__multadd>:
 800788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007890:	690d      	ldr	r5, [r1, #16]
 8007892:	4607      	mov	r7, r0
 8007894:	460c      	mov	r4, r1
 8007896:	461e      	mov	r6, r3
 8007898:	f101 0c14 	add.w	ip, r1, #20
 800789c:	2000      	movs	r0, #0
 800789e:	f8dc 3000 	ldr.w	r3, [ip]
 80078a2:	b299      	uxth	r1, r3
 80078a4:	fb02 6101 	mla	r1, r2, r1, r6
 80078a8:	0c1e      	lsrs	r6, r3, #16
 80078aa:	0c0b      	lsrs	r3, r1, #16
 80078ac:	fb02 3306 	mla	r3, r2, r6, r3
 80078b0:	b289      	uxth	r1, r1
 80078b2:	3001      	adds	r0, #1
 80078b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078b8:	4285      	cmp	r5, r0
 80078ba:	f84c 1b04 	str.w	r1, [ip], #4
 80078be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078c2:	dcec      	bgt.n	800789e <__multadd+0x12>
 80078c4:	b30e      	cbz	r6, 800790a <__multadd+0x7e>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dc19      	bgt.n	8007900 <__multadd+0x74>
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	4638      	mov	r0, r7
 80078d0:	3101      	adds	r1, #1
 80078d2:	f7ff ff79 	bl	80077c8 <_Balloc>
 80078d6:	4680      	mov	r8, r0
 80078d8:	b928      	cbnz	r0, 80078e6 <__multadd+0x5a>
 80078da:	4602      	mov	r2, r0
 80078dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007910 <__multadd+0x84>)
 80078de:	480d      	ldr	r0, [pc, #52]	@ (8007914 <__multadd+0x88>)
 80078e0:	21ba      	movs	r1, #186	@ 0xba
 80078e2:	f001 fecd 	bl	8009680 <__assert_func>
 80078e6:	6922      	ldr	r2, [r4, #16]
 80078e8:	3202      	adds	r2, #2
 80078ea:	f104 010c 	add.w	r1, r4, #12
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	300c      	adds	r0, #12
 80078f2:	f001 fead 	bl	8009650 <memcpy>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7ff ffa5 	bl	8007848 <_Bfree>
 80078fe:	4644      	mov	r4, r8
 8007900:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007904:	3501      	adds	r5, #1
 8007906:	615e      	str	r6, [r3, #20]
 8007908:	6125      	str	r5, [r4, #16]
 800790a:	4620      	mov	r0, r4
 800790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007910:	0800afdd 	.word	0x0800afdd
 8007914:	0800afee 	.word	0x0800afee

08007918 <__s2b>:
 8007918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	4615      	mov	r5, r2
 8007920:	461f      	mov	r7, r3
 8007922:	2209      	movs	r2, #9
 8007924:	3308      	adds	r3, #8
 8007926:	4606      	mov	r6, r0
 8007928:	fb93 f3f2 	sdiv	r3, r3, r2
 800792c:	2100      	movs	r1, #0
 800792e:	2201      	movs	r2, #1
 8007930:	429a      	cmp	r2, r3
 8007932:	db09      	blt.n	8007948 <__s2b+0x30>
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff ff47 	bl	80077c8 <_Balloc>
 800793a:	b940      	cbnz	r0, 800794e <__s2b+0x36>
 800793c:	4602      	mov	r2, r0
 800793e:	4b19      	ldr	r3, [pc, #100]	@ (80079a4 <__s2b+0x8c>)
 8007940:	4819      	ldr	r0, [pc, #100]	@ (80079a8 <__s2b+0x90>)
 8007942:	21d3      	movs	r1, #211	@ 0xd3
 8007944:	f001 fe9c 	bl	8009680 <__assert_func>
 8007948:	0052      	lsls	r2, r2, #1
 800794a:	3101      	adds	r1, #1
 800794c:	e7f0      	b.n	8007930 <__s2b+0x18>
 800794e:	9b08      	ldr	r3, [sp, #32]
 8007950:	6143      	str	r3, [r0, #20]
 8007952:	2d09      	cmp	r5, #9
 8007954:	f04f 0301 	mov.w	r3, #1
 8007958:	6103      	str	r3, [r0, #16]
 800795a:	dd16      	ble.n	800798a <__s2b+0x72>
 800795c:	f104 0909 	add.w	r9, r4, #9
 8007960:	46c8      	mov	r8, r9
 8007962:	442c      	add	r4, r5
 8007964:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007968:	4601      	mov	r1, r0
 800796a:	3b30      	subs	r3, #48	@ 0x30
 800796c:	220a      	movs	r2, #10
 800796e:	4630      	mov	r0, r6
 8007970:	f7ff ff8c 	bl	800788c <__multadd>
 8007974:	45a0      	cmp	r8, r4
 8007976:	d1f5      	bne.n	8007964 <__s2b+0x4c>
 8007978:	f1a5 0408 	sub.w	r4, r5, #8
 800797c:	444c      	add	r4, r9
 800797e:	1b2d      	subs	r5, r5, r4
 8007980:	1963      	adds	r3, r4, r5
 8007982:	42bb      	cmp	r3, r7
 8007984:	db04      	blt.n	8007990 <__s2b+0x78>
 8007986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798a:	340a      	adds	r4, #10
 800798c:	2509      	movs	r5, #9
 800798e:	e7f6      	b.n	800797e <__s2b+0x66>
 8007990:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007994:	4601      	mov	r1, r0
 8007996:	3b30      	subs	r3, #48	@ 0x30
 8007998:	220a      	movs	r2, #10
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ff76 	bl	800788c <__multadd>
 80079a0:	e7ee      	b.n	8007980 <__s2b+0x68>
 80079a2:	bf00      	nop
 80079a4:	0800afdd 	.word	0x0800afdd
 80079a8:	0800afee 	.word	0x0800afee

080079ac <__hi0bits>:
 80079ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079b0:	4603      	mov	r3, r0
 80079b2:	bf36      	itet	cc
 80079b4:	0403      	lslcc	r3, r0, #16
 80079b6:	2000      	movcs	r0, #0
 80079b8:	2010      	movcc	r0, #16
 80079ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079be:	bf3c      	itt	cc
 80079c0:	021b      	lslcc	r3, r3, #8
 80079c2:	3008      	addcc	r0, #8
 80079c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079c8:	bf3c      	itt	cc
 80079ca:	011b      	lslcc	r3, r3, #4
 80079cc:	3004      	addcc	r0, #4
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d2:	bf3c      	itt	cc
 80079d4:	009b      	lslcc	r3, r3, #2
 80079d6:	3002      	addcc	r0, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	db05      	blt.n	80079e8 <__hi0bits+0x3c>
 80079dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079e0:	f100 0001 	add.w	r0, r0, #1
 80079e4:	bf08      	it	eq
 80079e6:	2020      	moveq	r0, #32
 80079e8:	4770      	bx	lr

080079ea <__lo0bits>:
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	4602      	mov	r2, r0
 80079ee:	f013 0007 	ands.w	r0, r3, #7
 80079f2:	d00b      	beq.n	8007a0c <__lo0bits+0x22>
 80079f4:	07d9      	lsls	r1, r3, #31
 80079f6:	d421      	bmi.n	8007a3c <__lo0bits+0x52>
 80079f8:	0798      	lsls	r0, r3, #30
 80079fa:	bf49      	itett	mi
 80079fc:	085b      	lsrmi	r3, r3, #1
 80079fe:	089b      	lsrpl	r3, r3, #2
 8007a00:	2001      	movmi	r0, #1
 8007a02:	6013      	strmi	r3, [r2, #0]
 8007a04:	bf5c      	itt	pl
 8007a06:	6013      	strpl	r3, [r2, #0]
 8007a08:	2002      	movpl	r0, #2
 8007a0a:	4770      	bx	lr
 8007a0c:	b299      	uxth	r1, r3
 8007a0e:	b909      	cbnz	r1, 8007a14 <__lo0bits+0x2a>
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	2010      	movs	r0, #16
 8007a14:	b2d9      	uxtb	r1, r3
 8007a16:	b909      	cbnz	r1, 8007a1c <__lo0bits+0x32>
 8007a18:	3008      	adds	r0, #8
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	0719      	lsls	r1, r3, #28
 8007a1e:	bf04      	itt	eq
 8007a20:	091b      	lsreq	r3, r3, #4
 8007a22:	3004      	addeq	r0, #4
 8007a24:	0799      	lsls	r1, r3, #30
 8007a26:	bf04      	itt	eq
 8007a28:	089b      	lsreq	r3, r3, #2
 8007a2a:	3002      	addeq	r0, #2
 8007a2c:	07d9      	lsls	r1, r3, #31
 8007a2e:	d403      	bmi.n	8007a38 <__lo0bits+0x4e>
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	f100 0001 	add.w	r0, r0, #1
 8007a36:	d003      	beq.n	8007a40 <__lo0bits+0x56>
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	4770      	bx	lr
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	4770      	bx	lr
 8007a40:	2020      	movs	r0, #32
 8007a42:	4770      	bx	lr

08007a44 <__i2b>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	2101      	movs	r1, #1
 8007a4a:	f7ff febd 	bl	80077c8 <_Balloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	b928      	cbnz	r0, 8007a5e <__i2b+0x1a>
 8007a52:	4b05      	ldr	r3, [pc, #20]	@ (8007a68 <__i2b+0x24>)
 8007a54:	4805      	ldr	r0, [pc, #20]	@ (8007a6c <__i2b+0x28>)
 8007a56:	f240 1145 	movw	r1, #325	@ 0x145
 8007a5a:	f001 fe11 	bl	8009680 <__assert_func>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	6144      	str	r4, [r0, #20]
 8007a62:	6103      	str	r3, [r0, #16]
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	bf00      	nop
 8007a68:	0800afdd 	.word	0x0800afdd
 8007a6c:	0800afee 	.word	0x0800afee

08007a70 <__multiply>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4617      	mov	r7, r2
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	bfa8      	it	ge
 8007a7e:	463b      	movge	r3, r7
 8007a80:	4689      	mov	r9, r1
 8007a82:	bfa4      	itt	ge
 8007a84:	460f      	movge	r7, r1
 8007a86:	4699      	movge	r9, r3
 8007a88:	693d      	ldr	r5, [r7, #16]
 8007a8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	eb05 060a 	add.w	r6, r5, sl
 8007a96:	42b3      	cmp	r3, r6
 8007a98:	b085      	sub	sp, #20
 8007a9a:	bfb8      	it	lt
 8007a9c:	3101      	addlt	r1, #1
 8007a9e:	f7ff fe93 	bl	80077c8 <_Balloc>
 8007aa2:	b930      	cbnz	r0, 8007ab2 <__multiply+0x42>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b41      	ldr	r3, [pc, #260]	@ (8007bac <__multiply+0x13c>)
 8007aa8:	4841      	ldr	r0, [pc, #260]	@ (8007bb0 <__multiply+0x140>)
 8007aaa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007aae:	f001 fde7 	bl	8009680 <__assert_func>
 8007ab2:	f100 0414 	add.w	r4, r0, #20
 8007ab6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007aba:	4623      	mov	r3, r4
 8007abc:	2200      	movs	r2, #0
 8007abe:	4573      	cmp	r3, lr
 8007ac0:	d320      	bcc.n	8007b04 <__multiply+0x94>
 8007ac2:	f107 0814 	add.w	r8, r7, #20
 8007ac6:	f109 0114 	add.w	r1, r9, #20
 8007aca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ace:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	1beb      	subs	r3, r5, r7
 8007ad6:	3b15      	subs	r3, #21
 8007ad8:	f023 0303 	bic.w	r3, r3, #3
 8007adc:	3304      	adds	r3, #4
 8007ade:	3715      	adds	r7, #21
 8007ae0:	42bd      	cmp	r5, r7
 8007ae2:	bf38      	it	cc
 8007ae4:	2304      	movcc	r3, #4
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	428b      	cmp	r3, r1
 8007aee:	d80c      	bhi.n	8007b0a <__multiply+0x9a>
 8007af0:	2e00      	cmp	r6, #0
 8007af2:	dd03      	ble.n	8007afc <__multiply+0x8c>
 8007af4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d055      	beq.n	8007ba8 <__multiply+0x138>
 8007afc:	6106      	str	r6, [r0, #16]
 8007afe:	b005      	add	sp, #20
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	f843 2b04 	str.w	r2, [r3], #4
 8007b08:	e7d9      	b.n	8007abe <__multiply+0x4e>
 8007b0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b0e:	f1ba 0f00 	cmp.w	sl, #0
 8007b12:	d01f      	beq.n	8007b54 <__multiply+0xe4>
 8007b14:	46c4      	mov	ip, r8
 8007b16:	46a1      	mov	r9, r4
 8007b18:	2700      	movs	r7, #0
 8007b1a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b1e:	f8d9 3000 	ldr.w	r3, [r9]
 8007b22:	fa1f fb82 	uxth.w	fp, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b2c:	443b      	add	r3, r7
 8007b2e:	f8d9 7000 	ldr.w	r7, [r9]
 8007b32:	0c12      	lsrs	r2, r2, #16
 8007b34:	0c3f      	lsrs	r7, r7, #16
 8007b36:	fb0a 7202 	mla	r2, sl, r2, r7
 8007b3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b44:	4565      	cmp	r5, ip
 8007b46:	f849 3b04 	str.w	r3, [r9], #4
 8007b4a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007b4e:	d8e4      	bhi.n	8007b1a <__multiply+0xaa>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	50e7      	str	r7, [r4, r3]
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b5a:	3104      	adds	r1, #4
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	d020      	beq.n	8007ba4 <__multiply+0x134>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	4647      	mov	r7, r8
 8007b66:	46a4      	mov	ip, r4
 8007b68:	f04f 0a00 	mov.w	sl, #0
 8007b6c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007b70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007b74:	fb09 220b 	mla	r2, r9, fp, r2
 8007b78:	4452      	add	r2, sl
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b80:	f84c 3b04 	str.w	r3, [ip], #4
 8007b84:	f857 3b04 	ldr.w	r3, [r7], #4
 8007b88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b8c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007b90:	fb09 330a 	mla	r3, r9, sl, r3
 8007b94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007b98:	42bd      	cmp	r5, r7
 8007b9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b9e:	d8e5      	bhi.n	8007b6c <__multiply+0xfc>
 8007ba0:	9a01      	ldr	r2, [sp, #4]
 8007ba2:	50a3      	str	r3, [r4, r2]
 8007ba4:	3404      	adds	r4, #4
 8007ba6:	e79f      	b.n	8007ae8 <__multiply+0x78>
 8007ba8:	3e01      	subs	r6, #1
 8007baa:	e7a1      	b.n	8007af0 <__multiply+0x80>
 8007bac:	0800afdd 	.word	0x0800afdd
 8007bb0:	0800afee 	.word	0x0800afee

08007bb4 <__pow5mult>:
 8007bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb8:	4615      	mov	r5, r2
 8007bba:	f012 0203 	ands.w	r2, r2, #3
 8007bbe:	4607      	mov	r7, r0
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	d007      	beq.n	8007bd4 <__pow5mult+0x20>
 8007bc4:	4c25      	ldr	r4, [pc, #148]	@ (8007c5c <__pow5mult+0xa8>)
 8007bc6:	3a01      	subs	r2, #1
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bce:	f7ff fe5d 	bl	800788c <__multadd>
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	10ad      	asrs	r5, r5, #2
 8007bd6:	d03d      	beq.n	8007c54 <__pow5mult+0xa0>
 8007bd8:	69fc      	ldr	r4, [r7, #28]
 8007bda:	b97c      	cbnz	r4, 8007bfc <__pow5mult+0x48>
 8007bdc:	2010      	movs	r0, #16
 8007bde:	f7ff fd3d 	bl	800765c <malloc>
 8007be2:	4602      	mov	r2, r0
 8007be4:	61f8      	str	r0, [r7, #28]
 8007be6:	b928      	cbnz	r0, 8007bf4 <__pow5mult+0x40>
 8007be8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <__pow5mult+0xac>)
 8007bea:	481e      	ldr	r0, [pc, #120]	@ (8007c64 <__pow5mult+0xb0>)
 8007bec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bf0:	f001 fd46 	bl	8009680 <__assert_func>
 8007bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bf8:	6004      	str	r4, [r0, #0]
 8007bfa:	60c4      	str	r4, [r0, #12]
 8007bfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c04:	b94c      	cbnz	r4, 8007c1a <__pow5mult+0x66>
 8007c06:	f240 2171 	movw	r1, #625	@ 0x271
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	f7ff ff1a 	bl	8007a44 <__i2b>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c16:	4604      	mov	r4, r0
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	f04f 0900 	mov.w	r9, #0
 8007c1e:	07eb      	lsls	r3, r5, #31
 8007c20:	d50a      	bpl.n	8007c38 <__pow5mult+0x84>
 8007c22:	4631      	mov	r1, r6
 8007c24:	4622      	mov	r2, r4
 8007c26:	4638      	mov	r0, r7
 8007c28:	f7ff ff22 	bl	8007a70 <__multiply>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4680      	mov	r8, r0
 8007c30:	4638      	mov	r0, r7
 8007c32:	f7ff fe09 	bl	8007848 <_Bfree>
 8007c36:	4646      	mov	r6, r8
 8007c38:	106d      	asrs	r5, r5, #1
 8007c3a:	d00b      	beq.n	8007c54 <__pow5mult+0xa0>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	b938      	cbnz	r0, 8007c50 <__pow5mult+0x9c>
 8007c40:	4622      	mov	r2, r4
 8007c42:	4621      	mov	r1, r4
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ff13 	bl	8007a70 <__multiply>
 8007c4a:	6020      	str	r0, [r4, #0]
 8007c4c:	f8c0 9000 	str.w	r9, [r0]
 8007c50:	4604      	mov	r4, r0
 8007c52:	e7e4      	b.n	8007c1e <__pow5mult+0x6a>
 8007c54:	4630      	mov	r0, r6
 8007c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0800b100 	.word	0x0800b100
 8007c60:	0800af6e 	.word	0x0800af6e
 8007c64:	0800afee 	.word	0x0800afee

08007c68 <__lshift>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	6849      	ldr	r1, [r1, #4]
 8007c70:	6923      	ldr	r3, [r4, #16]
 8007c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	4607      	mov	r7, r0
 8007c7a:	4691      	mov	r9, r2
 8007c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c80:	f108 0601 	add.w	r6, r8, #1
 8007c84:	42b3      	cmp	r3, r6
 8007c86:	db0b      	blt.n	8007ca0 <__lshift+0x38>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f7ff fd9d 	bl	80077c8 <_Balloc>
 8007c8e:	4605      	mov	r5, r0
 8007c90:	b948      	cbnz	r0, 8007ca6 <__lshift+0x3e>
 8007c92:	4602      	mov	r2, r0
 8007c94:	4b28      	ldr	r3, [pc, #160]	@ (8007d38 <__lshift+0xd0>)
 8007c96:	4829      	ldr	r0, [pc, #164]	@ (8007d3c <__lshift+0xd4>)
 8007c98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c9c:	f001 fcf0 	bl	8009680 <__assert_func>
 8007ca0:	3101      	adds	r1, #1
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	e7ee      	b.n	8007c84 <__lshift+0x1c>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f100 0114 	add.w	r1, r0, #20
 8007cac:	f100 0210 	add.w	r2, r0, #16
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	4553      	cmp	r3, sl
 8007cb4:	db33      	blt.n	8007d1e <__lshift+0xb6>
 8007cb6:	6920      	ldr	r0, [r4, #16]
 8007cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cbc:	f104 0314 	add.w	r3, r4, #20
 8007cc0:	f019 091f 	ands.w	r9, r9, #31
 8007cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ccc:	d02b      	beq.n	8007d26 <__lshift+0xbe>
 8007cce:	f1c9 0e20 	rsb	lr, r9, #32
 8007cd2:	468a      	mov	sl, r1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8007cdc:	4310      	orrs	r0, r2
 8007cde:	f84a 0b04 	str.w	r0, [sl], #4
 8007ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce6:	459c      	cmp	ip, r3
 8007ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cec:	d8f3      	bhi.n	8007cd6 <__lshift+0x6e>
 8007cee:	ebac 0304 	sub.w	r3, ip, r4
 8007cf2:	3b15      	subs	r3, #21
 8007cf4:	f023 0303 	bic.w	r3, r3, #3
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	f104 0015 	add.w	r0, r4, #21
 8007cfe:	4560      	cmp	r0, ip
 8007d00:	bf88      	it	hi
 8007d02:	2304      	movhi	r3, #4
 8007d04:	50ca      	str	r2, [r1, r3]
 8007d06:	b10a      	cbz	r2, 8007d0c <__lshift+0xa4>
 8007d08:	f108 0602 	add.w	r6, r8, #2
 8007d0c:	3e01      	subs	r6, #1
 8007d0e:	4638      	mov	r0, r7
 8007d10:	612e      	str	r6, [r5, #16]
 8007d12:	4621      	mov	r1, r4
 8007d14:	f7ff fd98 	bl	8007848 <_Bfree>
 8007d18:	4628      	mov	r0, r5
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d22:	3301      	adds	r3, #1
 8007d24:	e7c5      	b.n	8007cb2 <__lshift+0x4a>
 8007d26:	3904      	subs	r1, #4
 8007d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d30:	459c      	cmp	ip, r3
 8007d32:	d8f9      	bhi.n	8007d28 <__lshift+0xc0>
 8007d34:	e7ea      	b.n	8007d0c <__lshift+0xa4>
 8007d36:	bf00      	nop
 8007d38:	0800afdd 	.word	0x0800afdd
 8007d3c:	0800afee 	.word	0x0800afee

08007d40 <__mcmp>:
 8007d40:	690a      	ldr	r2, [r1, #16]
 8007d42:	4603      	mov	r3, r0
 8007d44:	6900      	ldr	r0, [r0, #16]
 8007d46:	1a80      	subs	r0, r0, r2
 8007d48:	b530      	push	{r4, r5, lr}
 8007d4a:	d10e      	bne.n	8007d6a <__mcmp+0x2a>
 8007d4c:	3314      	adds	r3, #20
 8007d4e:	3114      	adds	r1, #20
 8007d50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d60:	4295      	cmp	r5, r2
 8007d62:	d003      	beq.n	8007d6c <__mcmp+0x2c>
 8007d64:	d205      	bcs.n	8007d72 <__mcmp+0x32>
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	bd30      	pop	{r4, r5, pc}
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	d3f3      	bcc.n	8007d58 <__mcmp+0x18>
 8007d70:	e7fb      	b.n	8007d6a <__mcmp+0x2a>
 8007d72:	2001      	movs	r0, #1
 8007d74:	e7f9      	b.n	8007d6a <__mcmp+0x2a>
	...

08007d78 <__mdiff>:
 8007d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	4689      	mov	r9, r1
 8007d7e:	4606      	mov	r6, r0
 8007d80:	4611      	mov	r1, r2
 8007d82:	4648      	mov	r0, r9
 8007d84:	4614      	mov	r4, r2
 8007d86:	f7ff ffdb 	bl	8007d40 <__mcmp>
 8007d8a:	1e05      	subs	r5, r0, #0
 8007d8c:	d112      	bne.n	8007db4 <__mdiff+0x3c>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff fd19 	bl	80077c8 <_Balloc>
 8007d96:	4602      	mov	r2, r0
 8007d98:	b928      	cbnz	r0, 8007da6 <__mdiff+0x2e>
 8007d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e98 <__mdiff+0x120>)
 8007d9c:	f240 2137 	movw	r1, #567	@ 0x237
 8007da0:	483e      	ldr	r0, [pc, #248]	@ (8007e9c <__mdiff+0x124>)
 8007da2:	f001 fc6d 	bl	8009680 <__assert_func>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dac:	4610      	mov	r0, r2
 8007dae:	b003      	add	sp, #12
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	bfbc      	itt	lt
 8007db6:	464b      	movlt	r3, r9
 8007db8:	46a1      	movlt	r9, r4
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007dc0:	bfba      	itte	lt
 8007dc2:	461c      	movlt	r4, r3
 8007dc4:	2501      	movlt	r5, #1
 8007dc6:	2500      	movge	r5, #0
 8007dc8:	f7ff fcfe 	bl	80077c8 <_Balloc>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	b918      	cbnz	r0, 8007dd8 <__mdiff+0x60>
 8007dd0:	4b31      	ldr	r3, [pc, #196]	@ (8007e98 <__mdiff+0x120>)
 8007dd2:	f240 2145 	movw	r1, #581	@ 0x245
 8007dd6:	e7e3      	b.n	8007da0 <__mdiff+0x28>
 8007dd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ddc:	6926      	ldr	r6, [r4, #16]
 8007dde:	60c5      	str	r5, [r0, #12]
 8007de0:	f109 0310 	add.w	r3, r9, #16
 8007de4:	f109 0514 	add.w	r5, r9, #20
 8007de8:	f104 0e14 	add.w	lr, r4, #20
 8007dec:	f100 0b14 	add.w	fp, r0, #20
 8007df0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007df4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	46d9      	mov	r9, fp
 8007dfc:	f04f 0c00 	mov.w	ip, #0
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	fa1f f38a 	uxth.w	r3, sl
 8007e10:	4619      	mov	r1, r3
 8007e12:	b283      	uxth	r3, r0
 8007e14:	1acb      	subs	r3, r1, r3
 8007e16:	0c00      	lsrs	r0, r0, #16
 8007e18:	4463      	add	r3, ip
 8007e1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e28:	4576      	cmp	r6, lr
 8007e2a:	f849 3b04 	str.w	r3, [r9], #4
 8007e2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e32:	d8e5      	bhi.n	8007e00 <__mdiff+0x88>
 8007e34:	1b33      	subs	r3, r6, r4
 8007e36:	3b15      	subs	r3, #21
 8007e38:	f023 0303 	bic.w	r3, r3, #3
 8007e3c:	3415      	adds	r4, #21
 8007e3e:	3304      	adds	r3, #4
 8007e40:	42a6      	cmp	r6, r4
 8007e42:	bf38      	it	cc
 8007e44:	2304      	movcc	r3, #4
 8007e46:	441d      	add	r5, r3
 8007e48:	445b      	add	r3, fp
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	462c      	mov	r4, r5
 8007e4e:	4544      	cmp	r4, r8
 8007e50:	d30e      	bcc.n	8007e70 <__mdiff+0xf8>
 8007e52:	f108 0103 	add.w	r1, r8, #3
 8007e56:	1b49      	subs	r1, r1, r5
 8007e58:	f021 0103 	bic.w	r1, r1, #3
 8007e5c:	3d03      	subs	r5, #3
 8007e5e:	45a8      	cmp	r8, r5
 8007e60:	bf38      	it	cc
 8007e62:	2100      	movcc	r1, #0
 8007e64:	440b      	add	r3, r1
 8007e66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e6a:	b191      	cbz	r1, 8007e92 <__mdiff+0x11a>
 8007e6c:	6117      	str	r7, [r2, #16]
 8007e6e:	e79d      	b.n	8007dac <__mdiff+0x34>
 8007e70:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e74:	46e6      	mov	lr, ip
 8007e76:	0c08      	lsrs	r0, r1, #16
 8007e78:	fa1c fc81 	uxtah	ip, ip, r1
 8007e7c:	4471      	add	r1, lr
 8007e7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e82:	b289      	uxth	r1, r1
 8007e84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e88:	f846 1b04 	str.w	r1, [r6], #4
 8007e8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e90:	e7dd      	b.n	8007e4e <__mdiff+0xd6>
 8007e92:	3f01      	subs	r7, #1
 8007e94:	e7e7      	b.n	8007e66 <__mdiff+0xee>
 8007e96:	bf00      	nop
 8007e98:	0800afdd 	.word	0x0800afdd
 8007e9c:	0800afee 	.word	0x0800afee

08007ea0 <__ulp>:
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	ed8d 0b00 	vstr	d0, [sp]
 8007ea6:	9a01      	ldr	r2, [sp, #4]
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <__ulp+0x48>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dc08      	bgt.n	8007ec6 <__ulp+0x26>
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007eba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ebe:	da04      	bge.n	8007eca <__ulp+0x2a>
 8007ec0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ec4:	4113      	asrs	r3, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	e008      	b.n	8007edc <__ulp+0x3c>
 8007eca:	f1a2 0314 	sub.w	r3, r2, #20
 8007ece:	2b1e      	cmp	r3, #30
 8007ed0:	bfda      	itte	le
 8007ed2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007ed6:	40da      	lsrle	r2, r3
 8007ed8:	2201      	movgt	r2, #1
 8007eda:	2300      	movs	r3, #0
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	ec41 0b10 	vmov	d0, r0, r1
 8007ee4:	b002      	add	sp, #8
 8007ee6:	4770      	bx	lr
 8007ee8:	7ff00000 	.word	0x7ff00000

08007eec <__b2d>:
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	6906      	ldr	r6, [r0, #16]
 8007ef2:	f100 0814 	add.w	r8, r0, #20
 8007ef6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007efa:	1f37      	subs	r7, r6, #4
 8007efc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7ff fd53 	bl	80079ac <__hi0bits>
 8007f06:	f1c0 0320 	rsb	r3, r0, #32
 8007f0a:	280a      	cmp	r0, #10
 8007f0c:	600b      	str	r3, [r1, #0]
 8007f0e:	491b      	ldr	r1, [pc, #108]	@ (8007f7c <__b2d+0x90>)
 8007f10:	dc15      	bgt.n	8007f3e <__b2d+0x52>
 8007f12:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f16:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f1a:	45b8      	cmp	r8, r7
 8007f1c:	ea43 0501 	orr.w	r5, r3, r1
 8007f20:	bf34      	ite	cc
 8007f22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f26:	2300      	movcs	r3, #0
 8007f28:	3015      	adds	r0, #21
 8007f2a:	fa02 f000 	lsl.w	r0, r2, r0
 8007f2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f32:	4303      	orrs	r3, r0
 8007f34:	461c      	mov	r4, r3
 8007f36:	ec45 4b10 	vmov	d0, r4, r5
 8007f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f3e:	45b8      	cmp	r8, r7
 8007f40:	bf3a      	itte	cc
 8007f42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f46:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f4a:	2300      	movcs	r3, #0
 8007f4c:	380b      	subs	r0, #11
 8007f4e:	d012      	beq.n	8007f76 <__b2d+0x8a>
 8007f50:	f1c0 0120 	rsb	r1, r0, #32
 8007f54:	fa23 f401 	lsr.w	r4, r3, r1
 8007f58:	4082      	lsls	r2, r0
 8007f5a:	4322      	orrs	r2, r4
 8007f5c:	4547      	cmp	r7, r8
 8007f5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f62:	bf8c      	ite	hi
 8007f64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f68:	2200      	movls	r2, #0
 8007f6a:	4083      	lsls	r3, r0
 8007f6c:	40ca      	lsrs	r2, r1
 8007f6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f72:	4313      	orrs	r3, r2
 8007f74:	e7de      	b.n	8007f34 <__b2d+0x48>
 8007f76:	ea42 0501 	orr.w	r5, r2, r1
 8007f7a:	e7db      	b.n	8007f34 <__b2d+0x48>
 8007f7c:	3ff00000 	.word	0x3ff00000

08007f80 <__d2b>:
 8007f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	460f      	mov	r7, r1
 8007f86:	2101      	movs	r1, #1
 8007f88:	ec59 8b10 	vmov	r8, r9, d0
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	f7ff fc1b 	bl	80077c8 <_Balloc>
 8007f92:	4604      	mov	r4, r0
 8007f94:	b930      	cbnz	r0, 8007fa4 <__d2b+0x24>
 8007f96:	4602      	mov	r2, r0
 8007f98:	4b23      	ldr	r3, [pc, #140]	@ (8008028 <__d2b+0xa8>)
 8007f9a:	4824      	ldr	r0, [pc, #144]	@ (800802c <__d2b+0xac>)
 8007f9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007fa0:	f001 fb6e 	bl	8009680 <__assert_func>
 8007fa4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fac:	b10d      	cbz	r5, 8007fb2 <__d2b+0x32>
 8007fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	f1b8 0300 	subs.w	r3, r8, #0
 8007fb8:	d023      	beq.n	8008002 <__d2b+0x82>
 8007fba:	4668      	mov	r0, sp
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	f7ff fd14 	bl	80079ea <__lo0bits>
 8007fc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fc6:	b1d0      	cbz	r0, 8007ffe <__d2b+0x7e>
 8007fc8:	f1c0 0320 	rsb	r3, r0, #32
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	40c2      	lsrs	r2, r0
 8007fd4:	6163      	str	r3, [r4, #20]
 8007fd6:	9201      	str	r2, [sp, #4]
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	61a3      	str	r3, [r4, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bf0c      	ite	eq
 8007fe0:	2201      	moveq	r2, #1
 8007fe2:	2202      	movne	r2, #2
 8007fe4:	6122      	str	r2, [r4, #16]
 8007fe6:	b1a5      	cbz	r5, 8008012 <__d2b+0x92>
 8007fe8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fec:	4405      	add	r5, r0
 8007fee:	603d      	str	r5, [r7, #0]
 8007ff0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ff4:	6030      	str	r0, [r6, #0]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	b003      	add	sp, #12
 8007ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	6161      	str	r1, [r4, #20]
 8008000:	e7ea      	b.n	8007fd8 <__d2b+0x58>
 8008002:	a801      	add	r0, sp, #4
 8008004:	f7ff fcf1 	bl	80079ea <__lo0bits>
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	3020      	adds	r0, #32
 800800e:	2201      	movs	r2, #1
 8008010:	e7e8      	b.n	8007fe4 <__d2b+0x64>
 8008012:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008016:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800801a:	6038      	str	r0, [r7, #0]
 800801c:	6918      	ldr	r0, [r3, #16]
 800801e:	f7ff fcc5 	bl	80079ac <__hi0bits>
 8008022:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008026:	e7e5      	b.n	8007ff4 <__d2b+0x74>
 8008028:	0800afdd 	.word	0x0800afdd
 800802c:	0800afee 	.word	0x0800afee

08008030 <__ratio>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	b085      	sub	sp, #20
 8008036:	e9cd 1000 	strd	r1, r0, [sp]
 800803a:	a902      	add	r1, sp, #8
 800803c:	f7ff ff56 	bl	8007eec <__b2d>
 8008040:	9800      	ldr	r0, [sp, #0]
 8008042:	a903      	add	r1, sp, #12
 8008044:	ec55 4b10 	vmov	r4, r5, d0
 8008048:	f7ff ff50 	bl	8007eec <__b2d>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	6919      	ldr	r1, [r3, #16]
 8008050:	9b00      	ldr	r3, [sp, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	1ac9      	subs	r1, r1, r3
 8008056:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	ec5b ab10 	vmov	sl, fp, d0
 8008060:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008064:	2b00      	cmp	r3, #0
 8008066:	bfce      	itee	gt
 8008068:	462a      	movgt	r2, r5
 800806a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800806e:	465a      	movle	r2, fp
 8008070:	462f      	mov	r7, r5
 8008072:	46d9      	mov	r9, fp
 8008074:	bfcc      	ite	gt
 8008076:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800807a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800807e:	464b      	mov	r3, r9
 8008080:	4652      	mov	r2, sl
 8008082:	4620      	mov	r0, r4
 8008084:	4639      	mov	r1, r7
 8008086:	f7f8 fbe9 	bl	800085c <__aeabi_ddiv>
 800808a:	ec41 0b10 	vmov	d0, r0, r1
 800808e:	b005      	add	sp, #20
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008094 <__copybits>:
 8008094:	3901      	subs	r1, #1
 8008096:	b570      	push	{r4, r5, r6, lr}
 8008098:	1149      	asrs	r1, r1, #5
 800809a:	6914      	ldr	r4, [r2, #16]
 800809c:	3101      	adds	r1, #1
 800809e:	f102 0314 	add.w	r3, r2, #20
 80080a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080aa:	1f05      	subs	r5, r0, #4
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	d30c      	bcc.n	80080ca <__copybits+0x36>
 80080b0:	1aa3      	subs	r3, r4, r2
 80080b2:	3b11      	subs	r3, #17
 80080b4:	f023 0303 	bic.w	r3, r3, #3
 80080b8:	3211      	adds	r2, #17
 80080ba:	42a2      	cmp	r2, r4
 80080bc:	bf88      	it	hi
 80080be:	2300      	movhi	r3, #0
 80080c0:	4418      	add	r0, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	4288      	cmp	r0, r1
 80080c6:	d305      	bcc.n	80080d4 <__copybits+0x40>
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80080ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80080d2:	e7eb      	b.n	80080ac <__copybits+0x18>
 80080d4:	f840 3b04 	str.w	r3, [r0], #4
 80080d8:	e7f4      	b.n	80080c4 <__copybits+0x30>

080080da <__any_on>:
 80080da:	f100 0214 	add.w	r2, r0, #20
 80080de:	6900      	ldr	r0, [r0, #16]
 80080e0:	114b      	asrs	r3, r1, #5
 80080e2:	4298      	cmp	r0, r3
 80080e4:	b510      	push	{r4, lr}
 80080e6:	db11      	blt.n	800810c <__any_on+0x32>
 80080e8:	dd0a      	ble.n	8008100 <__any_on+0x26>
 80080ea:	f011 011f 	ands.w	r1, r1, #31
 80080ee:	d007      	beq.n	8008100 <__any_on+0x26>
 80080f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080f4:	fa24 f001 	lsr.w	r0, r4, r1
 80080f8:	fa00 f101 	lsl.w	r1, r0, r1
 80080fc:	428c      	cmp	r4, r1
 80080fe:	d10b      	bne.n	8008118 <__any_on+0x3e>
 8008100:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008104:	4293      	cmp	r3, r2
 8008106:	d803      	bhi.n	8008110 <__any_on+0x36>
 8008108:	2000      	movs	r0, #0
 800810a:	bd10      	pop	{r4, pc}
 800810c:	4603      	mov	r3, r0
 800810e:	e7f7      	b.n	8008100 <__any_on+0x26>
 8008110:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008114:	2900      	cmp	r1, #0
 8008116:	d0f5      	beq.n	8008104 <__any_on+0x2a>
 8008118:	2001      	movs	r0, #1
 800811a:	e7f6      	b.n	800810a <__any_on+0x30>

0800811c <sulp>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	ec45 4b10 	vmov	d0, r4, r5
 8008126:	4616      	mov	r6, r2
 8008128:	f7ff feba 	bl	8007ea0 <__ulp>
 800812c:	ec51 0b10 	vmov	r0, r1, d0
 8008130:	b17e      	cbz	r6, 8008152 <sulp+0x36>
 8008132:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008136:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800813a:	2b00      	cmp	r3, #0
 800813c:	dd09      	ble.n	8008152 <sulp+0x36>
 800813e:	051b      	lsls	r3, r3, #20
 8008140:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008144:	2400      	movs	r4, #0
 8008146:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800814a:	4622      	mov	r2, r4
 800814c:	462b      	mov	r3, r5
 800814e:	f7f8 fa5b 	bl	8000608 <__aeabi_dmul>
 8008152:	ec41 0b10 	vmov	d0, r0, r1
 8008156:	bd70      	pop	{r4, r5, r6, pc}

08008158 <_strtod_l>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	b09f      	sub	sp, #124	@ 0x7c
 800815e:	460c      	mov	r4, r1
 8008160:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008162:	2200      	movs	r2, #0
 8008164:	921a      	str	r2, [sp, #104]	@ 0x68
 8008166:	9005      	str	r0, [sp, #20]
 8008168:	f04f 0a00 	mov.w	sl, #0
 800816c:	f04f 0b00 	mov.w	fp, #0
 8008170:	460a      	mov	r2, r1
 8008172:	9219      	str	r2, [sp, #100]	@ 0x64
 8008174:	7811      	ldrb	r1, [r2, #0]
 8008176:	292b      	cmp	r1, #43	@ 0x2b
 8008178:	d04a      	beq.n	8008210 <_strtod_l+0xb8>
 800817a:	d838      	bhi.n	80081ee <_strtod_l+0x96>
 800817c:	290d      	cmp	r1, #13
 800817e:	d832      	bhi.n	80081e6 <_strtod_l+0x8e>
 8008180:	2908      	cmp	r1, #8
 8008182:	d832      	bhi.n	80081ea <_strtod_l+0x92>
 8008184:	2900      	cmp	r1, #0
 8008186:	d03b      	beq.n	8008200 <_strtod_l+0xa8>
 8008188:	2200      	movs	r2, #0
 800818a:	920e      	str	r2, [sp, #56]	@ 0x38
 800818c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800818e:	782a      	ldrb	r2, [r5, #0]
 8008190:	2a30      	cmp	r2, #48	@ 0x30
 8008192:	f040 80b2 	bne.w	80082fa <_strtod_l+0x1a2>
 8008196:	786a      	ldrb	r2, [r5, #1]
 8008198:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800819c:	2a58      	cmp	r2, #88	@ 0x58
 800819e:	d16e      	bne.n	800827e <_strtod_l+0x126>
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	4a8f      	ldr	r2, [pc, #572]	@ (80083e8 <_strtod_l+0x290>)
 80081ac:	9805      	ldr	r0, [sp, #20]
 80081ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80081b0:	a919      	add	r1, sp, #100	@ 0x64
 80081b2:	f001 faff 	bl	80097b4 <__gethex>
 80081b6:	f010 060f 	ands.w	r6, r0, #15
 80081ba:	4604      	mov	r4, r0
 80081bc:	d005      	beq.n	80081ca <_strtod_l+0x72>
 80081be:	2e06      	cmp	r6, #6
 80081c0:	d128      	bne.n	8008214 <_strtod_l+0xbc>
 80081c2:	3501      	adds	r5, #1
 80081c4:	2300      	movs	r3, #0
 80081c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80081c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80081ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 858e 	bne.w	8008cee <_strtod_l+0xb96>
 80081d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d4:	b1cb      	cbz	r3, 800820a <_strtod_l+0xb2>
 80081d6:	4652      	mov	r2, sl
 80081d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80081dc:	ec43 2b10 	vmov	d0, r2, r3
 80081e0:	b01f      	add	sp, #124	@ 0x7c
 80081e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e6:	2920      	cmp	r1, #32
 80081e8:	d1ce      	bne.n	8008188 <_strtod_l+0x30>
 80081ea:	3201      	adds	r2, #1
 80081ec:	e7c1      	b.n	8008172 <_strtod_l+0x1a>
 80081ee:	292d      	cmp	r1, #45	@ 0x2d
 80081f0:	d1ca      	bne.n	8008188 <_strtod_l+0x30>
 80081f2:	2101      	movs	r1, #1
 80081f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80081f6:	1c51      	adds	r1, r2, #1
 80081f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80081fa:	7852      	ldrb	r2, [r2, #1]
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	d1c5      	bne.n	800818c <_strtod_l+0x34>
 8008200:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008202:	9419      	str	r4, [sp, #100]	@ 0x64
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 8570 	bne.w	8008cea <_strtod_l+0xb92>
 800820a:	4652      	mov	r2, sl
 800820c:	465b      	mov	r3, fp
 800820e:	e7e5      	b.n	80081dc <_strtod_l+0x84>
 8008210:	2100      	movs	r1, #0
 8008212:	e7ef      	b.n	80081f4 <_strtod_l+0x9c>
 8008214:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008216:	b13a      	cbz	r2, 8008228 <_strtod_l+0xd0>
 8008218:	2135      	movs	r1, #53	@ 0x35
 800821a:	a81c      	add	r0, sp, #112	@ 0x70
 800821c:	f7ff ff3a 	bl	8008094 <__copybits>
 8008220:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008222:	9805      	ldr	r0, [sp, #20]
 8008224:	f7ff fb10 	bl	8007848 <_Bfree>
 8008228:	3e01      	subs	r6, #1
 800822a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800822c:	2e04      	cmp	r6, #4
 800822e:	d806      	bhi.n	800823e <_strtod_l+0xe6>
 8008230:	e8df f006 	tbb	[pc, r6]
 8008234:	201d0314 	.word	0x201d0314
 8008238:	14          	.byte	0x14
 8008239:	00          	.byte	0x00
 800823a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800823e:	05e1      	lsls	r1, r4, #23
 8008240:	bf48      	it	mi
 8008242:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800824a:	0d1b      	lsrs	r3, r3, #20
 800824c:	051b      	lsls	r3, r3, #20
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1bb      	bne.n	80081ca <_strtod_l+0x72>
 8008252:	f7fe fb2d 	bl	80068b0 <__errno>
 8008256:	2322      	movs	r3, #34	@ 0x22
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7b6      	b.n	80081ca <_strtod_l+0x72>
 800825c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008260:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008264:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008268:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800826c:	e7e7      	b.n	800823e <_strtod_l+0xe6>
 800826e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80083f0 <_strtod_l+0x298>
 8008272:	e7e4      	b.n	800823e <_strtod_l+0xe6>
 8008274:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008278:	f04f 3aff 	mov.w	sl, #4294967295
 800827c:	e7df      	b.n	800823e <_strtod_l+0xe6>
 800827e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	9219      	str	r2, [sp, #100]	@ 0x64
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b30      	cmp	r3, #48	@ 0x30
 8008288:	d0f9      	beq.n	800827e <_strtod_l+0x126>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d09d      	beq.n	80081ca <_strtod_l+0x72>
 800828e:	2301      	movs	r3, #1
 8008290:	2700      	movs	r7, #0
 8008292:	9308      	str	r3, [sp, #32]
 8008294:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008296:	930c      	str	r3, [sp, #48]	@ 0x30
 8008298:	970b      	str	r7, [sp, #44]	@ 0x2c
 800829a:	46b9      	mov	r9, r7
 800829c:	220a      	movs	r2, #10
 800829e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80082a0:	7805      	ldrb	r5, [r0, #0]
 80082a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80082a6:	b2d9      	uxtb	r1, r3
 80082a8:	2909      	cmp	r1, #9
 80082aa:	d928      	bls.n	80082fe <_strtod_l+0x1a6>
 80082ac:	494f      	ldr	r1, [pc, #316]	@ (80083ec <_strtod_l+0x294>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	f001 f9ac 	bl	800960c <strncmp>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d032      	beq.n	800831e <_strtod_l+0x1c6>
 80082b8:	2000      	movs	r0, #0
 80082ba:	462a      	mov	r2, r5
 80082bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80082be:	464d      	mov	r5, r9
 80082c0:	4603      	mov	r3, r0
 80082c2:	2a65      	cmp	r2, #101	@ 0x65
 80082c4:	d001      	beq.n	80082ca <_strtod_l+0x172>
 80082c6:	2a45      	cmp	r2, #69	@ 0x45
 80082c8:	d114      	bne.n	80082f4 <_strtod_l+0x19c>
 80082ca:	b91d      	cbnz	r5, 80082d4 <_strtod_l+0x17c>
 80082cc:	9a08      	ldr	r2, [sp, #32]
 80082ce:	4302      	orrs	r2, r0
 80082d0:	d096      	beq.n	8008200 <_strtod_l+0xa8>
 80082d2:	2500      	movs	r5, #0
 80082d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80082d6:	1c62      	adds	r2, r4, #1
 80082d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80082da:	7862      	ldrb	r2, [r4, #1]
 80082dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80082de:	d07a      	beq.n	80083d6 <_strtod_l+0x27e>
 80082e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80082e2:	d07e      	beq.n	80083e2 <_strtod_l+0x28a>
 80082e4:	f04f 0c00 	mov.w	ip, #0
 80082e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082ec:	2909      	cmp	r1, #9
 80082ee:	f240 8085 	bls.w	80083fc <_strtod_l+0x2a4>
 80082f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80082f4:	f04f 0800 	mov.w	r8, #0
 80082f8:	e0a5      	b.n	8008446 <_strtod_l+0x2ee>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e7c8      	b.n	8008290 <_strtod_l+0x138>
 80082fe:	f1b9 0f08 	cmp.w	r9, #8
 8008302:	bfd8      	it	le
 8008304:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008306:	f100 0001 	add.w	r0, r0, #1
 800830a:	bfda      	itte	le
 800830c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008310:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008312:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008316:	f109 0901 	add.w	r9, r9, #1
 800831a:	9019      	str	r0, [sp, #100]	@ 0x64
 800831c:	e7bf      	b.n	800829e <_strtod_l+0x146>
 800831e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	9219      	str	r2, [sp, #100]	@ 0x64
 8008324:	785a      	ldrb	r2, [r3, #1]
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	d03b      	beq.n	80083a4 <_strtod_l+0x24c>
 800832c:	900a      	str	r0, [sp, #40]	@ 0x28
 800832e:	464d      	mov	r5, r9
 8008330:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008334:	2b09      	cmp	r3, #9
 8008336:	d912      	bls.n	800835e <_strtod_l+0x206>
 8008338:	2301      	movs	r3, #1
 800833a:	e7c2      	b.n	80082c2 <_strtod_l+0x16a>
 800833c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	9219      	str	r2, [sp, #100]	@ 0x64
 8008342:	785a      	ldrb	r2, [r3, #1]
 8008344:	3001      	adds	r0, #1
 8008346:	2a30      	cmp	r2, #48	@ 0x30
 8008348:	d0f8      	beq.n	800833c <_strtod_l+0x1e4>
 800834a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800834e:	2b08      	cmp	r3, #8
 8008350:	f200 84d2 	bhi.w	8008cf8 <_strtod_l+0xba0>
 8008354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008356:	900a      	str	r0, [sp, #40]	@ 0x28
 8008358:	2000      	movs	r0, #0
 800835a:	930c      	str	r3, [sp, #48]	@ 0x30
 800835c:	4605      	mov	r5, r0
 800835e:	3a30      	subs	r2, #48	@ 0x30
 8008360:	f100 0301 	add.w	r3, r0, #1
 8008364:	d018      	beq.n	8008398 <_strtod_l+0x240>
 8008366:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008368:	4419      	add	r1, r3
 800836a:	910a      	str	r1, [sp, #40]	@ 0x28
 800836c:	462e      	mov	r6, r5
 800836e:	f04f 0e0a 	mov.w	lr, #10
 8008372:	1c71      	adds	r1, r6, #1
 8008374:	eba1 0c05 	sub.w	ip, r1, r5
 8008378:	4563      	cmp	r3, ip
 800837a:	dc15      	bgt.n	80083a8 <_strtod_l+0x250>
 800837c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008380:	182b      	adds	r3, r5, r0
 8008382:	2b08      	cmp	r3, #8
 8008384:	f105 0501 	add.w	r5, r5, #1
 8008388:	4405      	add	r5, r0
 800838a:	dc1a      	bgt.n	80083c2 <_strtod_l+0x26a>
 800838c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800838e:	230a      	movs	r3, #10
 8008390:	fb03 2301 	mla	r3, r3, r1, r2
 8008394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008396:	2300      	movs	r3, #0
 8008398:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800839a:	1c51      	adds	r1, r2, #1
 800839c:	9119      	str	r1, [sp, #100]	@ 0x64
 800839e:	7852      	ldrb	r2, [r2, #1]
 80083a0:	4618      	mov	r0, r3
 80083a2:	e7c5      	b.n	8008330 <_strtod_l+0x1d8>
 80083a4:	4648      	mov	r0, r9
 80083a6:	e7ce      	b.n	8008346 <_strtod_l+0x1ee>
 80083a8:	2e08      	cmp	r6, #8
 80083aa:	dc05      	bgt.n	80083b8 <_strtod_l+0x260>
 80083ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083ae:	fb0e f606 	mul.w	r6, lr, r6
 80083b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80083b4:	460e      	mov	r6, r1
 80083b6:	e7dc      	b.n	8008372 <_strtod_l+0x21a>
 80083b8:	2910      	cmp	r1, #16
 80083ba:	bfd8      	it	le
 80083bc:	fb0e f707 	mulle.w	r7, lr, r7
 80083c0:	e7f8      	b.n	80083b4 <_strtod_l+0x25c>
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	bfdc      	itt	le
 80083c6:	230a      	movle	r3, #10
 80083c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80083cc:	e7e3      	b.n	8008396 <_strtod_l+0x23e>
 80083ce:	2300      	movs	r3, #0
 80083d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d2:	2301      	movs	r3, #1
 80083d4:	e77a      	b.n	80082cc <_strtod_l+0x174>
 80083d6:	f04f 0c00 	mov.w	ip, #0
 80083da:	1ca2      	adds	r2, r4, #2
 80083dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80083de:	78a2      	ldrb	r2, [r4, #2]
 80083e0:	e782      	b.n	80082e8 <_strtod_l+0x190>
 80083e2:	f04f 0c01 	mov.w	ip, #1
 80083e6:	e7f8      	b.n	80083da <_strtod_l+0x282>
 80083e8:	0800b214 	.word	0x0800b214
 80083ec:	0800b047 	.word	0x0800b047
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083f6:	1c51      	adds	r1, r2, #1
 80083f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80083fa:	7852      	ldrb	r2, [r2, #1]
 80083fc:	2a30      	cmp	r2, #48	@ 0x30
 80083fe:	d0f9      	beq.n	80083f4 <_strtod_l+0x29c>
 8008400:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008404:	2908      	cmp	r1, #8
 8008406:	f63f af75 	bhi.w	80082f4 <_strtod_l+0x19c>
 800840a:	3a30      	subs	r2, #48	@ 0x30
 800840c:	9209      	str	r2, [sp, #36]	@ 0x24
 800840e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008410:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008412:	f04f 080a 	mov.w	r8, #10
 8008416:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008418:	1c56      	adds	r6, r2, #1
 800841a:	9619      	str	r6, [sp, #100]	@ 0x64
 800841c:	7852      	ldrb	r2, [r2, #1]
 800841e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008422:	f1be 0f09 	cmp.w	lr, #9
 8008426:	d939      	bls.n	800849c <_strtod_l+0x344>
 8008428:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800842a:	1a76      	subs	r6, r6, r1
 800842c:	2e08      	cmp	r6, #8
 800842e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008432:	dc03      	bgt.n	800843c <_strtod_l+0x2e4>
 8008434:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008436:	4588      	cmp	r8, r1
 8008438:	bfa8      	it	ge
 800843a:	4688      	movge	r8, r1
 800843c:	f1bc 0f00 	cmp.w	ip, #0
 8008440:	d001      	beq.n	8008446 <_strtod_l+0x2ee>
 8008442:	f1c8 0800 	rsb	r8, r8, #0
 8008446:	2d00      	cmp	r5, #0
 8008448:	d14e      	bne.n	80084e8 <_strtod_l+0x390>
 800844a:	9908      	ldr	r1, [sp, #32]
 800844c:	4308      	orrs	r0, r1
 800844e:	f47f aebc 	bne.w	80081ca <_strtod_l+0x72>
 8008452:	2b00      	cmp	r3, #0
 8008454:	f47f aed4 	bne.w	8008200 <_strtod_l+0xa8>
 8008458:	2a69      	cmp	r2, #105	@ 0x69
 800845a:	d028      	beq.n	80084ae <_strtod_l+0x356>
 800845c:	dc25      	bgt.n	80084aa <_strtod_l+0x352>
 800845e:	2a49      	cmp	r2, #73	@ 0x49
 8008460:	d025      	beq.n	80084ae <_strtod_l+0x356>
 8008462:	2a4e      	cmp	r2, #78	@ 0x4e
 8008464:	f47f aecc 	bne.w	8008200 <_strtod_l+0xa8>
 8008468:	499a      	ldr	r1, [pc, #616]	@ (80086d4 <_strtod_l+0x57c>)
 800846a:	a819      	add	r0, sp, #100	@ 0x64
 800846c:	f001 fbc4 	bl	8009bf8 <__match>
 8008470:	2800      	cmp	r0, #0
 8008472:	f43f aec5 	beq.w	8008200 <_strtod_l+0xa8>
 8008476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b28      	cmp	r3, #40	@ 0x28
 800847c:	d12e      	bne.n	80084dc <_strtod_l+0x384>
 800847e:	4996      	ldr	r1, [pc, #600]	@ (80086d8 <_strtod_l+0x580>)
 8008480:	aa1c      	add	r2, sp, #112	@ 0x70
 8008482:	a819      	add	r0, sp, #100	@ 0x64
 8008484:	f001 fbcc 	bl	8009c20 <__hexnan>
 8008488:	2805      	cmp	r0, #5
 800848a:	d127      	bne.n	80084dc <_strtod_l+0x384>
 800848c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800848e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008492:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008496:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800849a:	e696      	b.n	80081ca <_strtod_l+0x72>
 800849c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800849e:	fb08 2101 	mla	r1, r8, r1, r2
 80084a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80084a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80084a8:	e7b5      	b.n	8008416 <_strtod_l+0x2be>
 80084aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80084ac:	e7da      	b.n	8008464 <_strtod_l+0x30c>
 80084ae:	498b      	ldr	r1, [pc, #556]	@ (80086dc <_strtod_l+0x584>)
 80084b0:	a819      	add	r0, sp, #100	@ 0x64
 80084b2:	f001 fba1 	bl	8009bf8 <__match>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f43f aea2 	beq.w	8008200 <_strtod_l+0xa8>
 80084bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084be:	4988      	ldr	r1, [pc, #544]	@ (80086e0 <_strtod_l+0x588>)
 80084c0:	3b01      	subs	r3, #1
 80084c2:	a819      	add	r0, sp, #100	@ 0x64
 80084c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80084c6:	f001 fb97 	bl	8009bf8 <__match>
 80084ca:	b910      	cbnz	r0, 80084d2 <_strtod_l+0x37a>
 80084cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084ce:	3301      	adds	r3, #1
 80084d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80084d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80086f0 <_strtod_l+0x598>
 80084d6:	f04f 0a00 	mov.w	sl, #0
 80084da:	e676      	b.n	80081ca <_strtod_l+0x72>
 80084dc:	4881      	ldr	r0, [pc, #516]	@ (80086e4 <_strtod_l+0x58c>)
 80084de:	f001 f8c7 	bl	8009670 <nan>
 80084e2:	ec5b ab10 	vmov	sl, fp, d0
 80084e6:	e670      	b.n	80081ca <_strtod_l+0x72>
 80084e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80084ec:	eba8 0303 	sub.w	r3, r8, r3
 80084f0:	f1b9 0f00 	cmp.w	r9, #0
 80084f4:	bf08      	it	eq
 80084f6:	46a9      	moveq	r9, r5
 80084f8:	2d10      	cmp	r5, #16
 80084fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fc:	462c      	mov	r4, r5
 80084fe:	bfa8      	it	ge
 8008500:	2410      	movge	r4, #16
 8008502:	f7f8 f807 	bl	8000514 <__aeabi_ui2d>
 8008506:	2d09      	cmp	r5, #9
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	dc13      	bgt.n	8008536 <_strtod_l+0x3de>
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	f43f ae5a 	beq.w	80081ca <_strtod_l+0x72>
 8008516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008518:	dd78      	ble.n	800860c <_strtod_l+0x4b4>
 800851a:	2b16      	cmp	r3, #22
 800851c:	dc5f      	bgt.n	80085de <_strtod_l+0x486>
 800851e:	4972      	ldr	r1, [pc, #456]	@ (80086e8 <_strtod_l+0x590>)
 8008520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008528:	4652      	mov	r2, sl
 800852a:	465b      	mov	r3, fp
 800852c:	f7f8 f86c 	bl	8000608 <__aeabi_dmul>
 8008530:	4682      	mov	sl, r0
 8008532:	468b      	mov	fp, r1
 8008534:	e649      	b.n	80081ca <_strtod_l+0x72>
 8008536:	4b6c      	ldr	r3, [pc, #432]	@ (80086e8 <_strtod_l+0x590>)
 8008538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800853c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008540:	f7f8 f862 	bl	8000608 <__aeabi_dmul>
 8008544:	4682      	mov	sl, r0
 8008546:	4638      	mov	r0, r7
 8008548:	468b      	mov	fp, r1
 800854a:	f7f7 ffe3 	bl	8000514 <__aeabi_ui2d>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4650      	mov	r0, sl
 8008554:	4659      	mov	r1, fp
 8008556:	f7f7 fea1 	bl	800029c <__adddf3>
 800855a:	2d0f      	cmp	r5, #15
 800855c:	4682      	mov	sl, r0
 800855e:	468b      	mov	fp, r1
 8008560:	ddd5      	ble.n	800850e <_strtod_l+0x3b6>
 8008562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008564:	1b2c      	subs	r4, r5, r4
 8008566:	441c      	add	r4, r3
 8008568:	2c00      	cmp	r4, #0
 800856a:	f340 8093 	ble.w	8008694 <_strtod_l+0x53c>
 800856e:	f014 030f 	ands.w	r3, r4, #15
 8008572:	d00a      	beq.n	800858a <_strtod_l+0x432>
 8008574:	495c      	ldr	r1, [pc, #368]	@ (80086e8 <_strtod_l+0x590>)
 8008576:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800857a:	4652      	mov	r2, sl
 800857c:	465b      	mov	r3, fp
 800857e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008582:	f7f8 f841 	bl	8000608 <__aeabi_dmul>
 8008586:	4682      	mov	sl, r0
 8008588:	468b      	mov	fp, r1
 800858a:	f034 040f 	bics.w	r4, r4, #15
 800858e:	d073      	beq.n	8008678 <_strtod_l+0x520>
 8008590:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008594:	dd49      	ble.n	800862a <_strtod_l+0x4d2>
 8008596:	2400      	movs	r4, #0
 8008598:	46a0      	mov	r8, r4
 800859a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800859c:	46a1      	mov	r9, r4
 800859e:	9a05      	ldr	r2, [sp, #20]
 80085a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80086f0 <_strtod_l+0x598>
 80085a4:	2322      	movs	r3, #34	@ 0x22
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	f04f 0a00 	mov.w	sl, #0
 80085ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f43f ae0b 	beq.w	80081ca <_strtod_l+0x72>
 80085b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085b6:	9805      	ldr	r0, [sp, #20]
 80085b8:	f7ff f946 	bl	8007848 <_Bfree>
 80085bc:	9805      	ldr	r0, [sp, #20]
 80085be:	4649      	mov	r1, r9
 80085c0:	f7ff f942 	bl	8007848 <_Bfree>
 80085c4:	9805      	ldr	r0, [sp, #20]
 80085c6:	4641      	mov	r1, r8
 80085c8:	f7ff f93e 	bl	8007848 <_Bfree>
 80085cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085ce:	9805      	ldr	r0, [sp, #20]
 80085d0:	f7ff f93a 	bl	8007848 <_Bfree>
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	4621      	mov	r1, r4
 80085d8:	f7ff f936 	bl	8007848 <_Bfree>
 80085dc:	e5f5      	b.n	80081ca <_strtod_l+0x72>
 80085de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085e4:	4293      	cmp	r3, r2
 80085e6:	dbbc      	blt.n	8008562 <_strtod_l+0x40a>
 80085e8:	4c3f      	ldr	r4, [pc, #252]	@ (80086e8 <_strtod_l+0x590>)
 80085ea:	f1c5 050f 	rsb	r5, r5, #15
 80085ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085f2:	4652      	mov	r2, sl
 80085f4:	465b      	mov	r3, fp
 80085f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085fa:	f7f8 f805 	bl	8000608 <__aeabi_dmul>
 80085fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008600:	1b5d      	subs	r5, r3, r5
 8008602:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008606:	e9d4 2300 	ldrd	r2, r3, [r4]
 800860a:	e78f      	b.n	800852c <_strtod_l+0x3d4>
 800860c:	3316      	adds	r3, #22
 800860e:	dba8      	blt.n	8008562 <_strtod_l+0x40a>
 8008610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008612:	eba3 0808 	sub.w	r8, r3, r8
 8008616:	4b34      	ldr	r3, [pc, #208]	@ (80086e8 <_strtod_l+0x590>)
 8008618:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800861c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008620:	4650      	mov	r0, sl
 8008622:	4659      	mov	r1, fp
 8008624:	f7f8 f91a 	bl	800085c <__aeabi_ddiv>
 8008628:	e782      	b.n	8008530 <_strtod_l+0x3d8>
 800862a:	2300      	movs	r3, #0
 800862c:	4f2f      	ldr	r7, [pc, #188]	@ (80086ec <_strtod_l+0x594>)
 800862e:	1124      	asrs	r4, r4, #4
 8008630:	4650      	mov	r0, sl
 8008632:	4659      	mov	r1, fp
 8008634:	461e      	mov	r6, r3
 8008636:	2c01      	cmp	r4, #1
 8008638:	dc21      	bgt.n	800867e <_strtod_l+0x526>
 800863a:	b10b      	cbz	r3, 8008640 <_strtod_l+0x4e8>
 800863c:	4682      	mov	sl, r0
 800863e:	468b      	mov	fp, r1
 8008640:	492a      	ldr	r1, [pc, #168]	@ (80086ec <_strtod_l+0x594>)
 8008642:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008646:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800864a:	4652      	mov	r2, sl
 800864c:	465b      	mov	r3, fp
 800864e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008652:	f7f7 ffd9 	bl	8000608 <__aeabi_dmul>
 8008656:	4b26      	ldr	r3, [pc, #152]	@ (80086f0 <_strtod_l+0x598>)
 8008658:	460a      	mov	r2, r1
 800865a:	400b      	ands	r3, r1
 800865c:	4925      	ldr	r1, [pc, #148]	@ (80086f4 <_strtod_l+0x59c>)
 800865e:	428b      	cmp	r3, r1
 8008660:	4682      	mov	sl, r0
 8008662:	d898      	bhi.n	8008596 <_strtod_l+0x43e>
 8008664:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008668:	428b      	cmp	r3, r1
 800866a:	bf86      	itte	hi
 800866c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80086f8 <_strtod_l+0x5a0>
 8008670:	f04f 3aff 	movhi.w	sl, #4294967295
 8008674:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008678:	2300      	movs	r3, #0
 800867a:	9308      	str	r3, [sp, #32]
 800867c:	e076      	b.n	800876c <_strtod_l+0x614>
 800867e:	07e2      	lsls	r2, r4, #31
 8008680:	d504      	bpl.n	800868c <_strtod_l+0x534>
 8008682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008686:	f7f7 ffbf 	bl	8000608 <__aeabi_dmul>
 800868a:	2301      	movs	r3, #1
 800868c:	3601      	adds	r6, #1
 800868e:	1064      	asrs	r4, r4, #1
 8008690:	3708      	adds	r7, #8
 8008692:	e7d0      	b.n	8008636 <_strtod_l+0x4de>
 8008694:	d0f0      	beq.n	8008678 <_strtod_l+0x520>
 8008696:	4264      	negs	r4, r4
 8008698:	f014 020f 	ands.w	r2, r4, #15
 800869c:	d00a      	beq.n	80086b4 <_strtod_l+0x55c>
 800869e:	4b12      	ldr	r3, [pc, #72]	@ (80086e8 <_strtod_l+0x590>)
 80086a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f7f8 f8d6 	bl	800085c <__aeabi_ddiv>
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	1124      	asrs	r4, r4, #4
 80086b6:	d0df      	beq.n	8008678 <_strtod_l+0x520>
 80086b8:	2c1f      	cmp	r4, #31
 80086ba:	dd1f      	ble.n	80086fc <_strtod_l+0x5a4>
 80086bc:	2400      	movs	r4, #0
 80086be:	46a0      	mov	r8, r4
 80086c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80086c2:	46a1      	mov	r9, r4
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	2322      	movs	r3, #34	@ 0x22
 80086c8:	f04f 0a00 	mov.w	sl, #0
 80086cc:	f04f 0b00 	mov.w	fp, #0
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	e76b      	b.n	80085ac <_strtod_l+0x454>
 80086d4:	0800af35 	.word	0x0800af35
 80086d8:	0800b200 	.word	0x0800b200
 80086dc:	0800af2d 	.word	0x0800af2d
 80086e0:	0800af64 	.word	0x0800af64
 80086e4:	0800b09d 	.word	0x0800b09d
 80086e8:	0800b138 	.word	0x0800b138
 80086ec:	0800b110 	.word	0x0800b110
 80086f0:	7ff00000 	.word	0x7ff00000
 80086f4:	7ca00000 	.word	0x7ca00000
 80086f8:	7fefffff 	.word	0x7fefffff
 80086fc:	f014 0310 	ands.w	r3, r4, #16
 8008700:	bf18      	it	ne
 8008702:	236a      	movne	r3, #106	@ 0x6a
 8008704:	4ea9      	ldr	r6, [pc, #676]	@ (80089ac <_strtod_l+0x854>)
 8008706:	9308      	str	r3, [sp, #32]
 8008708:	4650      	mov	r0, sl
 800870a:	4659      	mov	r1, fp
 800870c:	2300      	movs	r3, #0
 800870e:	07e7      	lsls	r7, r4, #31
 8008710:	d504      	bpl.n	800871c <_strtod_l+0x5c4>
 8008712:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008716:	f7f7 ff77 	bl	8000608 <__aeabi_dmul>
 800871a:	2301      	movs	r3, #1
 800871c:	1064      	asrs	r4, r4, #1
 800871e:	f106 0608 	add.w	r6, r6, #8
 8008722:	d1f4      	bne.n	800870e <_strtod_l+0x5b6>
 8008724:	b10b      	cbz	r3, 800872a <_strtod_l+0x5d2>
 8008726:	4682      	mov	sl, r0
 8008728:	468b      	mov	fp, r1
 800872a:	9b08      	ldr	r3, [sp, #32]
 800872c:	b1b3      	cbz	r3, 800875c <_strtod_l+0x604>
 800872e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008732:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008736:	2b00      	cmp	r3, #0
 8008738:	4659      	mov	r1, fp
 800873a:	dd0f      	ble.n	800875c <_strtod_l+0x604>
 800873c:	2b1f      	cmp	r3, #31
 800873e:	dd56      	ble.n	80087ee <_strtod_l+0x696>
 8008740:	2b34      	cmp	r3, #52	@ 0x34
 8008742:	bfde      	ittt	le
 8008744:	f04f 33ff 	movle.w	r3, #4294967295
 8008748:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800874c:	4093      	lslle	r3, r2
 800874e:	f04f 0a00 	mov.w	sl, #0
 8008752:	bfcc      	ite	gt
 8008754:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008758:	ea03 0b01 	andle.w	fp, r3, r1
 800875c:	2200      	movs	r2, #0
 800875e:	2300      	movs	r3, #0
 8008760:	4650      	mov	r0, sl
 8008762:	4659      	mov	r1, fp
 8008764:	f7f8 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008768:	2800      	cmp	r0, #0
 800876a:	d1a7      	bne.n	80086bc <_strtod_l+0x564>
 800876c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008772:	9805      	ldr	r0, [sp, #20]
 8008774:	462b      	mov	r3, r5
 8008776:	464a      	mov	r2, r9
 8008778:	f7ff f8ce 	bl	8007918 <__s2b>
 800877c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f af09 	beq.w	8008596 <_strtod_l+0x43e>
 8008784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008788:	2a00      	cmp	r2, #0
 800878a:	eba3 0308 	sub.w	r3, r3, r8
 800878e:	bfa8      	it	ge
 8008790:	2300      	movge	r3, #0
 8008792:	9312      	str	r3, [sp, #72]	@ 0x48
 8008794:	2400      	movs	r4, #0
 8008796:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800879a:	9316      	str	r3, [sp, #88]	@ 0x58
 800879c:	46a0      	mov	r8, r4
 800879e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087a0:	9805      	ldr	r0, [sp, #20]
 80087a2:	6859      	ldr	r1, [r3, #4]
 80087a4:	f7ff f810 	bl	80077c8 <_Balloc>
 80087a8:	4681      	mov	r9, r0
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f43f aef7 	beq.w	800859e <_strtod_l+0x446>
 80087b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	3202      	adds	r2, #2
 80087b6:	f103 010c 	add.w	r1, r3, #12
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	300c      	adds	r0, #12
 80087be:	f000 ff47 	bl	8009650 <memcpy>
 80087c2:	ec4b ab10 	vmov	d0, sl, fp
 80087c6:	9805      	ldr	r0, [sp, #20]
 80087c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80087ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80087cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80087d0:	f7ff fbd6 	bl	8007f80 <__d2b>
 80087d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f aee1 	beq.w	800859e <_strtod_l+0x446>
 80087dc:	9805      	ldr	r0, [sp, #20]
 80087de:	2101      	movs	r1, #1
 80087e0:	f7ff f930 	bl	8007a44 <__i2b>
 80087e4:	4680      	mov	r8, r0
 80087e6:	b948      	cbnz	r0, 80087fc <_strtod_l+0x6a4>
 80087e8:	f04f 0800 	mov.w	r8, #0
 80087ec:	e6d7      	b.n	800859e <_strtod_l+0x446>
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	ea03 0a0a 	and.w	sl, r3, sl
 80087fa:	e7af      	b.n	800875c <_strtod_l+0x604>
 80087fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008800:	2d00      	cmp	r5, #0
 8008802:	bfab      	itete	ge
 8008804:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008806:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008808:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800880a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800880c:	bfac      	ite	ge
 800880e:	18ef      	addge	r7, r5, r3
 8008810:	1b5e      	sublt	r6, r3, r5
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	1aed      	subs	r5, r5, r3
 8008816:	4415      	add	r5, r2
 8008818:	4b65      	ldr	r3, [pc, #404]	@ (80089b0 <_strtod_l+0x858>)
 800881a:	3d01      	subs	r5, #1
 800881c:	429d      	cmp	r5, r3
 800881e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008822:	da50      	bge.n	80088c6 <_strtod_l+0x76e>
 8008824:	1b5b      	subs	r3, r3, r5
 8008826:	2b1f      	cmp	r3, #31
 8008828:	eba2 0203 	sub.w	r2, r2, r3
 800882c:	f04f 0101 	mov.w	r1, #1
 8008830:	dc3d      	bgt.n	80088ae <_strtod_l+0x756>
 8008832:	fa01 f303 	lsl.w	r3, r1, r3
 8008836:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008838:	2300      	movs	r3, #0
 800883a:	9310      	str	r3, [sp, #64]	@ 0x40
 800883c:	18bd      	adds	r5, r7, r2
 800883e:	9b08      	ldr	r3, [sp, #32]
 8008840:	42af      	cmp	r7, r5
 8008842:	4416      	add	r6, r2
 8008844:	441e      	add	r6, r3
 8008846:	463b      	mov	r3, r7
 8008848:	bfa8      	it	ge
 800884a:	462b      	movge	r3, r5
 800884c:	42b3      	cmp	r3, r6
 800884e:	bfa8      	it	ge
 8008850:	4633      	movge	r3, r6
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfc2      	ittt	gt
 8008856:	1aed      	subgt	r5, r5, r3
 8008858:	1af6      	subgt	r6, r6, r3
 800885a:	1aff      	subgt	r7, r7, r3
 800885c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd16      	ble.n	8008890 <_strtod_l+0x738>
 8008862:	4641      	mov	r1, r8
 8008864:	9805      	ldr	r0, [sp, #20]
 8008866:	461a      	mov	r2, r3
 8008868:	f7ff f9a4 	bl	8007bb4 <__pow5mult>
 800886c:	4680      	mov	r8, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	d0ba      	beq.n	80087e8 <_strtod_l+0x690>
 8008872:	4601      	mov	r1, r0
 8008874:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008876:	9805      	ldr	r0, [sp, #20]
 8008878:	f7ff f8fa 	bl	8007a70 <__multiply>
 800887c:	900a      	str	r0, [sp, #40]	@ 0x28
 800887e:	2800      	cmp	r0, #0
 8008880:	f43f ae8d 	beq.w	800859e <_strtod_l+0x446>
 8008884:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008886:	9805      	ldr	r0, [sp, #20]
 8008888:	f7fe ffde 	bl	8007848 <_Bfree>
 800888c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800888e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008890:	2d00      	cmp	r5, #0
 8008892:	dc1d      	bgt.n	80088d0 <_strtod_l+0x778>
 8008894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd23      	ble.n	80088e2 <_strtod_l+0x78a>
 800889a:	4649      	mov	r1, r9
 800889c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800889e:	9805      	ldr	r0, [sp, #20]
 80088a0:	f7ff f988 	bl	8007bb4 <__pow5mult>
 80088a4:	4681      	mov	r9, r0
 80088a6:	b9e0      	cbnz	r0, 80088e2 <_strtod_l+0x78a>
 80088a8:	f04f 0900 	mov.w	r9, #0
 80088ac:	e677      	b.n	800859e <_strtod_l+0x446>
 80088ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80088b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80088b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80088ba:	35e2      	adds	r5, #226	@ 0xe2
 80088bc:	fa01 f305 	lsl.w	r3, r1, r5
 80088c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80088c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80088c4:	e7ba      	b.n	800883c <_strtod_l+0x6e4>
 80088c6:	2300      	movs	r3, #0
 80088c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80088ca:	2301      	movs	r3, #1
 80088cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ce:	e7b5      	b.n	800883c <_strtod_l+0x6e4>
 80088d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	462a      	mov	r2, r5
 80088d6:	f7ff f9c7 	bl	8007c68 <__lshift>
 80088da:	901a      	str	r0, [sp, #104]	@ 0x68
 80088dc:	2800      	cmp	r0, #0
 80088de:	d1d9      	bne.n	8008894 <_strtod_l+0x73c>
 80088e0:	e65d      	b.n	800859e <_strtod_l+0x446>
 80088e2:	2e00      	cmp	r6, #0
 80088e4:	dd07      	ble.n	80088f6 <_strtod_l+0x79e>
 80088e6:	4649      	mov	r1, r9
 80088e8:	9805      	ldr	r0, [sp, #20]
 80088ea:	4632      	mov	r2, r6
 80088ec:	f7ff f9bc 	bl	8007c68 <__lshift>
 80088f0:	4681      	mov	r9, r0
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d0d8      	beq.n	80088a8 <_strtod_l+0x750>
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	dd08      	ble.n	800890c <_strtod_l+0x7b4>
 80088fa:	4641      	mov	r1, r8
 80088fc:	9805      	ldr	r0, [sp, #20]
 80088fe:	463a      	mov	r2, r7
 8008900:	f7ff f9b2 	bl	8007c68 <__lshift>
 8008904:	4680      	mov	r8, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	f43f ae49 	beq.w	800859e <_strtod_l+0x446>
 800890c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800890e:	9805      	ldr	r0, [sp, #20]
 8008910:	464a      	mov	r2, r9
 8008912:	f7ff fa31 	bl	8007d78 <__mdiff>
 8008916:	4604      	mov	r4, r0
 8008918:	2800      	cmp	r0, #0
 800891a:	f43f ae40 	beq.w	800859e <_strtod_l+0x446>
 800891e:	68c3      	ldr	r3, [r0, #12]
 8008920:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008922:	2300      	movs	r3, #0
 8008924:	60c3      	str	r3, [r0, #12]
 8008926:	4641      	mov	r1, r8
 8008928:	f7ff fa0a 	bl	8007d40 <__mcmp>
 800892c:	2800      	cmp	r0, #0
 800892e:	da45      	bge.n	80089bc <_strtod_l+0x864>
 8008930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008932:	ea53 030a 	orrs.w	r3, r3, sl
 8008936:	d16b      	bne.n	8008a10 <_strtod_l+0x8b8>
 8008938:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800893c:	2b00      	cmp	r3, #0
 800893e:	d167      	bne.n	8008a10 <_strtod_l+0x8b8>
 8008940:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008944:	0d1b      	lsrs	r3, r3, #20
 8008946:	051b      	lsls	r3, r3, #20
 8008948:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800894c:	d960      	bls.n	8008a10 <_strtod_l+0x8b8>
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	b913      	cbnz	r3, 8008958 <_strtod_l+0x800>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	2b01      	cmp	r3, #1
 8008956:	dd5b      	ble.n	8008a10 <_strtod_l+0x8b8>
 8008958:	4621      	mov	r1, r4
 800895a:	2201      	movs	r2, #1
 800895c:	9805      	ldr	r0, [sp, #20]
 800895e:	f7ff f983 	bl	8007c68 <__lshift>
 8008962:	4641      	mov	r1, r8
 8008964:	4604      	mov	r4, r0
 8008966:	f7ff f9eb 	bl	8007d40 <__mcmp>
 800896a:	2800      	cmp	r0, #0
 800896c:	dd50      	ble.n	8008a10 <_strtod_l+0x8b8>
 800896e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008972:	9a08      	ldr	r2, [sp, #32]
 8008974:	0d1b      	lsrs	r3, r3, #20
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	2a00      	cmp	r2, #0
 800897a:	d06a      	beq.n	8008a52 <_strtod_l+0x8fa>
 800897c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008980:	d867      	bhi.n	8008a52 <_strtod_l+0x8fa>
 8008982:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008986:	f67f ae9d 	bls.w	80086c4 <_strtod_l+0x56c>
 800898a:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <_strtod_l+0x85c>)
 800898c:	4650      	mov	r0, sl
 800898e:	4659      	mov	r1, fp
 8008990:	2200      	movs	r2, #0
 8008992:	f7f7 fe39 	bl	8000608 <__aeabi_dmul>
 8008996:	4b08      	ldr	r3, [pc, #32]	@ (80089b8 <_strtod_l+0x860>)
 8008998:	400b      	ands	r3, r1
 800899a:	4682      	mov	sl, r0
 800899c:	468b      	mov	fp, r1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f47f ae08 	bne.w	80085b4 <_strtod_l+0x45c>
 80089a4:	9a05      	ldr	r2, [sp, #20]
 80089a6:	2322      	movs	r3, #34	@ 0x22
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e603      	b.n	80085b4 <_strtod_l+0x45c>
 80089ac:	0800b228 	.word	0x0800b228
 80089b0:	fffffc02 	.word	0xfffffc02
 80089b4:	39500000 	.word	0x39500000
 80089b8:	7ff00000 	.word	0x7ff00000
 80089bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80089c0:	d165      	bne.n	8008a8e <_strtod_l+0x936>
 80089c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80089c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089c8:	b35a      	cbz	r2, 8008a22 <_strtod_l+0x8ca>
 80089ca:	4a9f      	ldr	r2, [pc, #636]	@ (8008c48 <_strtod_l+0xaf0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d12b      	bne.n	8008a28 <_strtod_l+0x8d0>
 80089d0:	9b08      	ldr	r3, [sp, #32]
 80089d2:	4651      	mov	r1, sl
 80089d4:	b303      	cbz	r3, 8008a18 <_strtod_l+0x8c0>
 80089d6:	4b9d      	ldr	r3, [pc, #628]	@ (8008c4c <_strtod_l+0xaf4>)
 80089d8:	465a      	mov	r2, fp
 80089da:	4013      	ands	r3, r2
 80089dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	d81b      	bhi.n	8008a1e <_strtod_l+0x8c6>
 80089e6:	0d1b      	lsrs	r3, r3, #20
 80089e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	4299      	cmp	r1, r3
 80089f2:	d119      	bne.n	8008a28 <_strtod_l+0x8d0>
 80089f4:	4b96      	ldr	r3, [pc, #600]	@ (8008c50 <_strtod_l+0xaf8>)
 80089f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d102      	bne.n	8008a02 <_strtod_l+0x8aa>
 80089fc:	3101      	adds	r1, #1
 80089fe:	f43f adce 	beq.w	800859e <_strtod_l+0x446>
 8008a02:	4b92      	ldr	r3, [pc, #584]	@ (8008c4c <_strtod_l+0xaf4>)
 8008a04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a06:	401a      	ands	r2, r3
 8008a08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008a0c:	f04f 0a00 	mov.w	sl, #0
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1b9      	bne.n	800898a <_strtod_l+0x832>
 8008a16:	e5cd      	b.n	80085b4 <_strtod_l+0x45c>
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	e7e8      	b.n	80089f0 <_strtod_l+0x898>
 8008a1e:	4613      	mov	r3, r2
 8008a20:	e7e6      	b.n	80089f0 <_strtod_l+0x898>
 8008a22:	ea53 030a 	orrs.w	r3, r3, sl
 8008a26:	d0a2      	beq.n	800896e <_strtod_l+0x816>
 8008a28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a2a:	b1db      	cbz	r3, 8008a64 <_strtod_l+0x90c>
 8008a2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a2e:	4213      	tst	r3, r2
 8008a30:	d0ee      	beq.n	8008a10 <_strtod_l+0x8b8>
 8008a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a34:	9a08      	ldr	r2, [sp, #32]
 8008a36:	4650      	mov	r0, sl
 8008a38:	4659      	mov	r1, fp
 8008a3a:	b1bb      	cbz	r3, 8008a6c <_strtod_l+0x914>
 8008a3c:	f7ff fb6e 	bl	800811c <sulp>
 8008a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a44:	ec53 2b10 	vmov	r2, r3, d0
 8008a48:	f7f7 fc28 	bl	800029c <__adddf3>
 8008a4c:	4682      	mov	sl, r0
 8008a4e:	468b      	mov	fp, r1
 8008a50:	e7de      	b.n	8008a10 <_strtod_l+0x8b8>
 8008a52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a5e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a62:	e7d5      	b.n	8008a10 <_strtod_l+0x8b8>
 8008a64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a66:	ea13 0f0a 	tst.w	r3, sl
 8008a6a:	e7e1      	b.n	8008a30 <_strtod_l+0x8d8>
 8008a6c:	f7ff fb56 	bl	800811c <sulp>
 8008a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a74:	ec53 2b10 	vmov	r2, r3, d0
 8008a78:	f7f7 fc0e 	bl	8000298 <__aeabi_dsub>
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4682      	mov	sl, r0
 8008a82:	468b      	mov	fp, r1
 8008a84:	f7f8 f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0c1      	beq.n	8008a10 <_strtod_l+0x8b8>
 8008a8c:	e61a      	b.n	80086c4 <_strtod_l+0x56c>
 8008a8e:	4641      	mov	r1, r8
 8008a90:	4620      	mov	r0, r4
 8008a92:	f7ff facd 	bl	8008030 <__ratio>
 8008a96:	ec57 6b10 	vmov	r6, r7, d0
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	f7f8 f82c 	bl	8000b00 <__aeabi_dcmple>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d06f      	beq.n	8008b8c <_strtod_l+0xa34>
 8008aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d17a      	bne.n	8008ba8 <_strtod_l+0xa50>
 8008ab2:	f1ba 0f00 	cmp.w	sl, #0
 8008ab6:	d158      	bne.n	8008b6a <_strtod_l+0xa12>
 8008ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d15a      	bne.n	8008b78 <_strtod_l+0xa20>
 8008ac2:	4b64      	ldr	r3, [pc, #400]	@ (8008c54 <_strtod_l+0xafc>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f8 f80f 	bl	8000aec <__aeabi_dcmplt>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d159      	bne.n	8008b86 <_strtod_l+0xa2e>
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	4b60      	ldr	r3, [pc, #384]	@ (8008c58 <_strtod_l+0xb00>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f7f7 fd95 	bl	8000608 <__aeabi_dmul>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ae6:	9606      	str	r6, [sp, #24]
 8008ae8:	9307      	str	r3, [sp, #28]
 8008aea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aee:	4d57      	ldr	r5, [pc, #348]	@ (8008c4c <_strtod_l+0xaf4>)
 8008af0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af6:	401d      	ands	r5, r3
 8008af8:	4b58      	ldr	r3, [pc, #352]	@ (8008c5c <_strtod_l+0xb04>)
 8008afa:	429d      	cmp	r5, r3
 8008afc:	f040 80b2 	bne.w	8008c64 <_strtod_l+0xb0c>
 8008b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b06:	ec4b ab10 	vmov	d0, sl, fp
 8008b0a:	f7ff f9c9 	bl	8007ea0 <__ulp>
 8008b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b12:	ec51 0b10 	vmov	r0, r1, d0
 8008b16:	f7f7 fd77 	bl	8000608 <__aeabi_dmul>
 8008b1a:	4652      	mov	r2, sl
 8008b1c:	465b      	mov	r3, fp
 8008b1e:	f7f7 fbbd 	bl	800029c <__adddf3>
 8008b22:	460b      	mov	r3, r1
 8008b24:	4949      	ldr	r1, [pc, #292]	@ (8008c4c <_strtod_l+0xaf4>)
 8008b26:	4a4e      	ldr	r2, [pc, #312]	@ (8008c60 <_strtod_l+0xb08>)
 8008b28:	4019      	ands	r1, r3
 8008b2a:	4291      	cmp	r1, r2
 8008b2c:	4682      	mov	sl, r0
 8008b2e:	d942      	bls.n	8008bb6 <_strtod_l+0xa5e>
 8008b30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b32:	4b47      	ldr	r3, [pc, #284]	@ (8008c50 <_strtod_l+0xaf8>)
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d103      	bne.n	8008b40 <_strtod_l+0x9e8>
 8008b38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	f43f ad2f 	beq.w	800859e <_strtod_l+0x446>
 8008b40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c50 <_strtod_l+0xaf8>
 8008b44:	f04f 3aff 	mov.w	sl, #4294967295
 8008b48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b4a:	9805      	ldr	r0, [sp, #20]
 8008b4c:	f7fe fe7c 	bl	8007848 <_Bfree>
 8008b50:	9805      	ldr	r0, [sp, #20]
 8008b52:	4649      	mov	r1, r9
 8008b54:	f7fe fe78 	bl	8007848 <_Bfree>
 8008b58:	9805      	ldr	r0, [sp, #20]
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	f7fe fe74 	bl	8007848 <_Bfree>
 8008b60:	9805      	ldr	r0, [sp, #20]
 8008b62:	4621      	mov	r1, r4
 8008b64:	f7fe fe70 	bl	8007848 <_Bfree>
 8008b68:	e619      	b.n	800879e <_strtod_l+0x646>
 8008b6a:	f1ba 0f01 	cmp.w	sl, #1
 8008b6e:	d103      	bne.n	8008b78 <_strtod_l+0xa20>
 8008b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f43f ada6 	beq.w	80086c4 <_strtod_l+0x56c>
 8008b78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c28 <_strtod_l+0xad0>
 8008b7c:	4f35      	ldr	r7, [pc, #212]	@ (8008c54 <_strtod_l+0xafc>)
 8008b7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b82:	2600      	movs	r6, #0
 8008b84:	e7b1      	b.n	8008aea <_strtod_l+0x992>
 8008b86:	4f34      	ldr	r7, [pc, #208]	@ (8008c58 <_strtod_l+0xb00>)
 8008b88:	2600      	movs	r6, #0
 8008b8a:	e7aa      	b.n	8008ae2 <_strtod_l+0x98a>
 8008b8c:	4b32      	ldr	r3, [pc, #200]	@ (8008c58 <_strtod_l+0xb00>)
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7f7 fd38 	bl	8000608 <__aeabi_dmul>
 8008b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d09f      	beq.n	8008ae2 <_strtod_l+0x98a>
 8008ba2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ba6:	e7a0      	b.n	8008aea <_strtod_l+0x992>
 8008ba8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008c30 <_strtod_l+0xad8>
 8008bac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bb0:	ec57 6b17 	vmov	r6, r7, d7
 8008bb4:	e799      	b.n	8008aea <_strtod_l+0x992>
 8008bb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1c1      	bne.n	8008b48 <_strtod_l+0x9f0>
 8008bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bc8:	0d1b      	lsrs	r3, r3, #20
 8008bca:	051b      	lsls	r3, r3, #20
 8008bcc:	429d      	cmp	r5, r3
 8008bce:	d1bb      	bne.n	8008b48 <_strtod_l+0x9f0>
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f8 f878 	bl	8000cc8 <__aeabi_d2lz>
 8008bd8:	f7f7 fce8 	bl	80005ac <__aeabi_l2d>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 fb58 	bl	8000298 <__aeabi_dsub>
 8008be8:	460b      	mov	r3, r1
 8008bea:	4602      	mov	r2, r0
 8008bec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008bf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bf6:	ea46 060a 	orr.w	r6, r6, sl
 8008bfa:	431e      	orrs	r6, r3
 8008bfc:	d06f      	beq.n	8008cde <_strtod_l+0xb86>
 8008bfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c38 <_strtod_l+0xae0>)
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f7f7 ff72 	bl	8000aec <__aeabi_dcmplt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f47f acd3 	bne.w	80085b4 <_strtod_l+0x45c>
 8008c0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c40 <_strtod_l+0xae8>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c18:	f7f7 ff86 	bl	8000b28 <__aeabi_dcmpgt>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d093      	beq.n	8008b48 <_strtod_l+0x9f0>
 8008c20:	e4c8      	b.n	80085b4 <_strtod_l+0x45c>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	bff00000 	.word	0xbff00000
 8008c30:	00000000 	.word	0x00000000
 8008c34:	3ff00000 	.word	0x3ff00000
 8008c38:	94a03595 	.word	0x94a03595
 8008c3c:	3fdfffff 	.word	0x3fdfffff
 8008c40:	35afe535 	.word	0x35afe535
 8008c44:	3fe00000 	.word	0x3fe00000
 8008c48:	000fffff 	.word	0x000fffff
 8008c4c:	7ff00000 	.word	0x7ff00000
 8008c50:	7fefffff 	.word	0x7fefffff
 8008c54:	3ff00000 	.word	0x3ff00000
 8008c58:	3fe00000 	.word	0x3fe00000
 8008c5c:	7fe00000 	.word	0x7fe00000
 8008c60:	7c9fffff 	.word	0x7c9fffff
 8008c64:	9b08      	ldr	r3, [sp, #32]
 8008c66:	b323      	cbz	r3, 8008cb2 <_strtod_l+0xb5a>
 8008c68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c6c:	d821      	bhi.n	8008cb2 <_strtod_l+0xb5a>
 8008c6e:	a328      	add	r3, pc, #160	@ (adr r3, 8008d10 <_strtod_l+0xbb8>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	4630      	mov	r0, r6
 8008c76:	4639      	mov	r1, r7
 8008c78:	f7f7 ff42 	bl	8000b00 <__aeabi_dcmple>
 8008c7c:	b1a0      	cbz	r0, 8008ca8 <_strtod_l+0xb50>
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7f7 ff99 	bl	8000bb8 <__aeabi_d2uiz>
 8008c86:	2801      	cmp	r0, #1
 8008c88:	bf38      	it	cc
 8008c8a:	2001      	movcc	r0, #1
 8008c8c:	f7f7 fc42 	bl	8000514 <__aeabi_ui2d>
 8008c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c92:	4606      	mov	r6, r0
 8008c94:	460f      	mov	r7, r1
 8008c96:	b9fb      	cbnz	r3, 8008cd8 <_strtod_l+0xb80>
 8008c98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ca0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008ca4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ca8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008caa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008cae:	1b5b      	subs	r3, r3, r5
 8008cb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008cb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008cb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008cba:	f7ff f8f1 	bl	8007ea0 <__ulp>
 8008cbe:	4650      	mov	r0, sl
 8008cc0:	ec53 2b10 	vmov	r2, r3, d0
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	f7f7 fc9f 	bl	8000608 <__aeabi_dmul>
 8008cca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008cce:	f7f7 fae5 	bl	800029c <__adddf3>
 8008cd2:	4682      	mov	sl, r0
 8008cd4:	468b      	mov	fp, r1
 8008cd6:	e770      	b.n	8008bba <_strtod_l+0xa62>
 8008cd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008cdc:	e7e0      	b.n	8008ca0 <_strtod_l+0xb48>
 8008cde:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d18 <_strtod_l+0xbc0>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 ff02 	bl	8000aec <__aeabi_dcmplt>
 8008ce8:	e798      	b.n	8008c1c <_strtod_l+0xac4>
 8008cea:	2300      	movs	r3, #0
 8008cec:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008cf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	f7ff ba6d 	b.w	80081d2 <_strtod_l+0x7a>
 8008cf8:	2a65      	cmp	r2, #101	@ 0x65
 8008cfa:	f43f ab68 	beq.w	80083ce <_strtod_l+0x276>
 8008cfe:	2a45      	cmp	r2, #69	@ 0x45
 8008d00:	f43f ab65 	beq.w	80083ce <_strtod_l+0x276>
 8008d04:	2301      	movs	r3, #1
 8008d06:	f7ff bba0 	b.w	800844a <_strtod_l+0x2f2>
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w
 8008d10:	ffc00000 	.word	0xffc00000
 8008d14:	41dfffff 	.word	0x41dfffff
 8008d18:	94a03595 	.word	0x94a03595
 8008d1c:	3fcfffff 	.word	0x3fcfffff

08008d20 <_strtod_r>:
 8008d20:	4b01      	ldr	r3, [pc, #4]	@ (8008d28 <_strtod_r+0x8>)
 8008d22:	f7ff ba19 	b.w	8008158 <_strtod_l>
 8008d26:	bf00      	nop
 8008d28:	20000068 	.word	0x20000068

08008d2c <_strtol_l.isra.0>:
 8008d2c:	2b24      	cmp	r3, #36	@ 0x24
 8008d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d32:	4686      	mov	lr, r0
 8008d34:	4690      	mov	r8, r2
 8008d36:	d801      	bhi.n	8008d3c <_strtol_l.isra.0+0x10>
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <_strtol_l.isra.0+0x1e>
 8008d3c:	f7fd fdb8 	bl	80068b0 <__errno>
 8008d40:	2316      	movs	r3, #22
 8008d42:	6003      	str	r3, [r0, #0]
 8008d44:	2000      	movs	r0, #0
 8008d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4a:	4834      	ldr	r0, [pc, #208]	@ (8008e1c <_strtol_l.isra.0+0xf0>)
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	462a      	mov	r2, r5
 8008d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d54:	5d06      	ldrb	r6, [r0, r4]
 8008d56:	f016 0608 	ands.w	r6, r6, #8
 8008d5a:	d1f8      	bne.n	8008d4e <_strtol_l.isra.0+0x22>
 8008d5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d5e:	d110      	bne.n	8008d82 <_strtol_l.isra.0+0x56>
 8008d60:	782c      	ldrb	r4, [r5, #0]
 8008d62:	2601      	movs	r6, #1
 8008d64:	1c95      	adds	r5, r2, #2
 8008d66:	f033 0210 	bics.w	r2, r3, #16
 8008d6a:	d115      	bne.n	8008d98 <_strtol_l.isra.0+0x6c>
 8008d6c:	2c30      	cmp	r4, #48	@ 0x30
 8008d6e:	d10d      	bne.n	8008d8c <_strtol_l.isra.0+0x60>
 8008d70:	782a      	ldrb	r2, [r5, #0]
 8008d72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d76:	2a58      	cmp	r2, #88	@ 0x58
 8008d78:	d108      	bne.n	8008d8c <_strtol_l.isra.0+0x60>
 8008d7a:	786c      	ldrb	r4, [r5, #1]
 8008d7c:	3502      	adds	r5, #2
 8008d7e:	2310      	movs	r3, #16
 8008d80:	e00a      	b.n	8008d98 <_strtol_l.isra.0+0x6c>
 8008d82:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d84:	bf04      	itt	eq
 8008d86:	782c      	ldrbeq	r4, [r5, #0]
 8008d88:	1c95      	addeq	r5, r2, #2
 8008d8a:	e7ec      	b.n	8008d66 <_strtol_l.isra.0+0x3a>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f6      	bne.n	8008d7e <_strtol_l.isra.0+0x52>
 8008d90:	2c30      	cmp	r4, #48	@ 0x30
 8008d92:	bf14      	ite	ne
 8008d94:	230a      	movne	r3, #10
 8008d96:	2308      	moveq	r3, #8
 8008d98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008da0:	2200      	movs	r2, #0
 8008da2:	fbbc f9f3 	udiv	r9, ip, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008dac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008db0:	2f09      	cmp	r7, #9
 8008db2:	d80f      	bhi.n	8008dd4 <_strtol_l.isra.0+0xa8>
 8008db4:	463c      	mov	r4, r7
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	dd1b      	ble.n	8008df2 <_strtol_l.isra.0+0xc6>
 8008dba:	1c57      	adds	r7, r2, #1
 8008dbc:	d007      	beq.n	8008dce <_strtol_l.isra.0+0xa2>
 8008dbe:	4581      	cmp	r9, r0
 8008dc0:	d314      	bcc.n	8008dec <_strtol_l.isra.0+0xc0>
 8008dc2:	d101      	bne.n	8008dc8 <_strtol_l.isra.0+0x9c>
 8008dc4:	45a2      	cmp	sl, r4
 8008dc6:	db11      	blt.n	8008dec <_strtol_l.isra.0+0xc0>
 8008dc8:	fb00 4003 	mla	r0, r0, r3, r4
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dd2:	e7eb      	b.n	8008dac <_strtol_l.isra.0+0x80>
 8008dd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008dd8:	2f19      	cmp	r7, #25
 8008dda:	d801      	bhi.n	8008de0 <_strtol_l.isra.0+0xb4>
 8008ddc:	3c37      	subs	r4, #55	@ 0x37
 8008dde:	e7ea      	b.n	8008db6 <_strtol_l.isra.0+0x8a>
 8008de0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008de4:	2f19      	cmp	r7, #25
 8008de6:	d804      	bhi.n	8008df2 <_strtol_l.isra.0+0xc6>
 8008de8:	3c57      	subs	r4, #87	@ 0x57
 8008dea:	e7e4      	b.n	8008db6 <_strtol_l.isra.0+0x8a>
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	e7ed      	b.n	8008dce <_strtol_l.isra.0+0xa2>
 8008df2:	1c53      	adds	r3, r2, #1
 8008df4:	d108      	bne.n	8008e08 <_strtol_l.isra.0+0xdc>
 8008df6:	2322      	movs	r3, #34	@ 0x22
 8008df8:	f8ce 3000 	str.w	r3, [lr]
 8008dfc:	4660      	mov	r0, ip
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	d0a0      	beq.n	8008d46 <_strtol_l.isra.0+0x1a>
 8008e04:	1e69      	subs	r1, r5, #1
 8008e06:	e006      	b.n	8008e16 <_strtol_l.isra.0+0xea>
 8008e08:	b106      	cbz	r6, 8008e0c <_strtol_l.isra.0+0xe0>
 8008e0a:	4240      	negs	r0, r0
 8008e0c:	f1b8 0f00 	cmp.w	r8, #0
 8008e10:	d099      	beq.n	8008d46 <_strtol_l.isra.0+0x1a>
 8008e12:	2a00      	cmp	r2, #0
 8008e14:	d1f6      	bne.n	8008e04 <_strtol_l.isra.0+0xd8>
 8008e16:	f8c8 1000 	str.w	r1, [r8]
 8008e1a:	e794      	b.n	8008d46 <_strtol_l.isra.0+0x1a>
 8008e1c:	0800b251 	.word	0x0800b251

08008e20 <_strtol_r>:
 8008e20:	f7ff bf84 	b.w	8008d2c <_strtol_l.isra.0>

08008e24 <__ssputs_r>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	688e      	ldr	r6, [r1, #8]
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	42be      	cmp	r6, r7
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	4682      	mov	sl, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	4690      	mov	r8, r2
 8008e36:	d82d      	bhi.n	8008e94 <__ssputs_r+0x70>
 8008e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e40:	d026      	beq.n	8008e90 <__ssputs_r+0x6c>
 8008e42:	6965      	ldr	r5, [r4, #20]
 8008e44:	6909      	ldr	r1, [r1, #16]
 8008e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e4a:	eba3 0901 	sub.w	r9, r3, r1
 8008e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e52:	1c7b      	adds	r3, r7, #1
 8008e54:	444b      	add	r3, r9
 8008e56:	106d      	asrs	r5, r5, #1
 8008e58:	429d      	cmp	r5, r3
 8008e5a:	bf38      	it	cc
 8008e5c:	461d      	movcc	r5, r3
 8008e5e:	0553      	lsls	r3, r2, #21
 8008e60:	d527      	bpl.n	8008eb2 <__ssputs_r+0x8e>
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7fe fc24 	bl	80076b0 <_malloc_r>
 8008e68:	4606      	mov	r6, r0
 8008e6a:	b360      	cbz	r0, 8008ec6 <__ssputs_r+0xa2>
 8008e6c:	6921      	ldr	r1, [r4, #16]
 8008e6e:	464a      	mov	r2, r9
 8008e70:	f000 fbee 	bl	8009650 <memcpy>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	6126      	str	r6, [r4, #16]
 8008e82:	6165      	str	r5, [r4, #20]
 8008e84:	444e      	add	r6, r9
 8008e86:	eba5 0509 	sub.w	r5, r5, r9
 8008e8a:	6026      	str	r6, [r4, #0]
 8008e8c:	60a5      	str	r5, [r4, #8]
 8008e8e:	463e      	mov	r6, r7
 8008e90:	42be      	cmp	r6, r7
 8008e92:	d900      	bls.n	8008e96 <__ssputs_r+0x72>
 8008e94:	463e      	mov	r6, r7
 8008e96:	6820      	ldr	r0, [r4, #0]
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	f000 fb9c 	bl	80095d8 <memmove>
 8008ea0:	68a3      	ldr	r3, [r4, #8]
 8008ea2:	1b9b      	subs	r3, r3, r6
 8008ea4:	60a3      	str	r3, [r4, #8]
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	4433      	add	r3, r6
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	2000      	movs	r0, #0
 8008eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	f000 ff61 	bl	8009d7a <_realloc_r>
 8008eb8:	4606      	mov	r6, r0
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d1e0      	bne.n	8008e80 <__ssputs_r+0x5c>
 8008ebe:	6921      	ldr	r1, [r4, #16]
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	f7fe fb81 	bl	80075c8 <_free_r>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	f8ca 3000 	str.w	r3, [sl]
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e7e9      	b.n	8008eae <__ssputs_r+0x8a>
	...

08008edc <_svfiprintf_r>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4698      	mov	r8, r3
 8008ee2:	898b      	ldrh	r3, [r1, #12]
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	b09d      	sub	sp, #116	@ 0x74
 8008ee8:	4607      	mov	r7, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	d510      	bpl.n	8008f12 <_svfiprintf_r+0x36>
 8008ef0:	690b      	ldr	r3, [r1, #16]
 8008ef2:	b973      	cbnz	r3, 8008f12 <_svfiprintf_r+0x36>
 8008ef4:	2140      	movs	r1, #64	@ 0x40
 8008ef6:	f7fe fbdb 	bl	80076b0 <_malloc_r>
 8008efa:	6028      	str	r0, [r5, #0]
 8008efc:	6128      	str	r0, [r5, #16]
 8008efe:	b930      	cbnz	r0, 8008f0e <_svfiprintf_r+0x32>
 8008f00:	230c      	movs	r3, #12
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	b01d      	add	sp, #116	@ 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	2340      	movs	r3, #64	@ 0x40
 8008f10:	616b      	str	r3, [r5, #20]
 8008f12:	2300      	movs	r3, #0
 8008f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f16:	2320      	movs	r3, #32
 8008f18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f20:	2330      	movs	r3, #48	@ 0x30
 8008f22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80090c0 <_svfiprintf_r+0x1e4>
 8008f26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f2a:	f04f 0901 	mov.w	r9, #1
 8008f2e:	4623      	mov	r3, r4
 8008f30:	469a      	mov	sl, r3
 8008f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f36:	b10a      	cbz	r2, 8008f3c <_svfiprintf_r+0x60>
 8008f38:	2a25      	cmp	r2, #37	@ 0x25
 8008f3a:	d1f9      	bne.n	8008f30 <_svfiprintf_r+0x54>
 8008f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f40:	d00b      	beq.n	8008f5a <_svfiprintf_r+0x7e>
 8008f42:	465b      	mov	r3, fp
 8008f44:	4622      	mov	r2, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ff6b 	bl	8008e24 <__ssputs_r>
 8008f4e:	3001      	adds	r0, #1
 8008f50:	f000 80a7 	beq.w	80090a2 <_svfiprintf_r+0x1c6>
 8008f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f56:	445a      	add	r2, fp
 8008f58:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 809f 	beq.w	80090a2 <_svfiprintf_r+0x1c6>
 8008f64:	2300      	movs	r3, #0
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6e:	f10a 0a01 	add.w	sl, sl, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9307      	str	r3, [sp, #28]
 8008f76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f7c:	4654      	mov	r4, sl
 8008f7e:	2205      	movs	r2, #5
 8008f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f84:	484e      	ldr	r0, [pc, #312]	@ (80090c0 <_svfiprintf_r+0x1e4>)
 8008f86:	f7f7 f92b 	bl	80001e0 <memchr>
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	b9d8      	cbnz	r0, 8008fc6 <_svfiprintf_r+0xea>
 8008f8e:	06d0      	lsls	r0, r2, #27
 8008f90:	bf44      	itt	mi
 8008f92:	2320      	movmi	r3, #32
 8008f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f98:	0711      	lsls	r1, r2, #28
 8008f9a:	bf44      	itt	mi
 8008f9c:	232b      	movmi	r3, #43	@ 0x2b
 8008f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa8:	d015      	beq.n	8008fd6 <_svfiprintf_r+0xfa>
 8008faa:	9a07      	ldr	r2, [sp, #28]
 8008fac:	4654      	mov	r4, sl
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f04f 0c0a 	mov.w	ip, #10
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fba:	3b30      	subs	r3, #48	@ 0x30
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d94b      	bls.n	8009058 <_svfiprintf_r+0x17c>
 8008fc0:	b1b0      	cbz	r0, 8008ff0 <_svfiprintf_r+0x114>
 8008fc2:	9207      	str	r2, [sp, #28]
 8008fc4:	e014      	b.n	8008ff0 <_svfiprintf_r+0x114>
 8008fc6:	eba0 0308 	sub.w	r3, r0, r8
 8008fca:	fa09 f303 	lsl.w	r3, r9, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	9304      	str	r3, [sp, #16]
 8008fd2:	46a2      	mov	sl, r4
 8008fd4:	e7d2      	b.n	8008f7c <_svfiprintf_r+0xa0>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	1d19      	adds	r1, r3, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	9103      	str	r1, [sp, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfbb      	ittet	lt
 8008fe2:	425b      	neglt	r3, r3
 8008fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe8:	9307      	strge	r3, [sp, #28]
 8008fea:	9307      	strlt	r3, [sp, #28]
 8008fec:	bfb8      	it	lt
 8008fee:	9204      	strlt	r2, [sp, #16]
 8008ff0:	7823      	ldrb	r3, [r4, #0]
 8008ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ff4:	d10a      	bne.n	800900c <_svfiprintf_r+0x130>
 8008ff6:	7863      	ldrb	r3, [r4, #1]
 8008ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ffa:	d132      	bne.n	8009062 <_svfiprintf_r+0x186>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	9203      	str	r2, [sp, #12]
 8009004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009008:	3402      	adds	r4, #2
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090d0 <_svfiprintf_r+0x1f4>
 8009010:	7821      	ldrb	r1, [r4, #0]
 8009012:	2203      	movs	r2, #3
 8009014:	4650      	mov	r0, sl
 8009016:	f7f7 f8e3 	bl	80001e0 <memchr>
 800901a:	b138      	cbz	r0, 800902c <_svfiprintf_r+0x150>
 800901c:	9b04      	ldr	r3, [sp, #16]
 800901e:	eba0 000a 	sub.w	r0, r0, sl
 8009022:	2240      	movs	r2, #64	@ 0x40
 8009024:	4082      	lsls	r2, r0
 8009026:	4313      	orrs	r3, r2
 8009028:	3401      	adds	r4, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	4824      	ldr	r0, [pc, #144]	@ (80090c4 <_svfiprintf_r+0x1e8>)
 8009032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009036:	2206      	movs	r2, #6
 8009038:	f7f7 f8d2 	bl	80001e0 <memchr>
 800903c:	2800      	cmp	r0, #0
 800903e:	d036      	beq.n	80090ae <_svfiprintf_r+0x1d2>
 8009040:	4b21      	ldr	r3, [pc, #132]	@ (80090c8 <_svfiprintf_r+0x1ec>)
 8009042:	bb1b      	cbnz	r3, 800908c <_svfiprintf_r+0x1b0>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	3307      	adds	r3, #7
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009052:	4433      	add	r3, r6
 8009054:	9309      	str	r3, [sp, #36]	@ 0x24
 8009056:	e76a      	b.n	8008f2e <_svfiprintf_r+0x52>
 8009058:	fb0c 3202 	mla	r2, ip, r2, r3
 800905c:	460c      	mov	r4, r1
 800905e:	2001      	movs	r0, #1
 8009060:	e7a8      	b.n	8008fb4 <_svfiprintf_r+0xd8>
 8009062:	2300      	movs	r3, #0
 8009064:	3401      	adds	r4, #1
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	4619      	mov	r1, r3
 800906a:	f04f 0c0a 	mov.w	ip, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	3a30      	subs	r2, #48	@ 0x30
 8009076:	2a09      	cmp	r2, #9
 8009078:	d903      	bls.n	8009082 <_svfiprintf_r+0x1a6>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c6      	beq.n	800900c <_svfiprintf_r+0x130>
 800907e:	9105      	str	r1, [sp, #20]
 8009080:	e7c4      	b.n	800900c <_svfiprintf_r+0x130>
 8009082:	fb0c 2101 	mla	r1, ip, r1, r2
 8009086:	4604      	mov	r4, r0
 8009088:	2301      	movs	r3, #1
 800908a:	e7f0      	b.n	800906e <_svfiprintf_r+0x192>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4b0e      	ldr	r3, [pc, #56]	@ (80090cc <_svfiprintf_r+0x1f0>)
 8009094:	a904      	add	r1, sp, #16
 8009096:	4638      	mov	r0, r7
 8009098:	f7fc fc84 	bl	80059a4 <_printf_float>
 800909c:	1c42      	adds	r2, r0, #1
 800909e:	4606      	mov	r6, r0
 80090a0:	d1d6      	bne.n	8009050 <_svfiprintf_r+0x174>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	065b      	lsls	r3, r3, #25
 80090a6:	f53f af2d 	bmi.w	8008f04 <_svfiprintf_r+0x28>
 80090aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ac:	e72c      	b.n	8008f08 <_svfiprintf_r+0x2c>
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	462a      	mov	r2, r5
 80090b4:	4b05      	ldr	r3, [pc, #20]	@ (80090cc <_svfiprintf_r+0x1f0>)
 80090b6:	a904      	add	r1, sp, #16
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7fc ff0b 	bl	8005ed4 <_printf_i>
 80090be:	e7ed      	b.n	800909c <_svfiprintf_r+0x1c0>
 80090c0:	0800b049 	.word	0x0800b049
 80090c4:	0800b053 	.word	0x0800b053
 80090c8:	080059a5 	.word	0x080059a5
 80090cc:	08008e25 	.word	0x08008e25
 80090d0:	0800b04f 	.word	0x0800b04f

080090d4 <__sfputc_r>:
 80090d4:	6893      	ldr	r3, [r2, #8]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	b410      	push	{r4}
 80090dc:	6093      	str	r3, [r2, #8]
 80090de:	da08      	bge.n	80090f2 <__sfputc_r+0x1e>
 80090e0:	6994      	ldr	r4, [r2, #24]
 80090e2:	42a3      	cmp	r3, r4
 80090e4:	db01      	blt.n	80090ea <__sfputc_r+0x16>
 80090e6:	290a      	cmp	r1, #10
 80090e8:	d103      	bne.n	80090f2 <__sfputc_r+0x1e>
 80090ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ee:	f000 b9df 	b.w	80094b0 <__swbuf_r>
 80090f2:	6813      	ldr	r3, [r2, #0]
 80090f4:	1c58      	adds	r0, r3, #1
 80090f6:	6010      	str	r0, [r2, #0]
 80090f8:	7019      	strb	r1, [r3, #0]
 80090fa:	4608      	mov	r0, r1
 80090fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009100:	4770      	bx	lr

08009102 <__sfputs_r>:
 8009102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009104:	4606      	mov	r6, r0
 8009106:	460f      	mov	r7, r1
 8009108:	4614      	mov	r4, r2
 800910a:	18d5      	adds	r5, r2, r3
 800910c:	42ac      	cmp	r4, r5
 800910e:	d101      	bne.n	8009114 <__sfputs_r+0x12>
 8009110:	2000      	movs	r0, #0
 8009112:	e007      	b.n	8009124 <__sfputs_r+0x22>
 8009114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009118:	463a      	mov	r2, r7
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff ffda 	bl	80090d4 <__sfputc_r>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d1f3      	bne.n	800910c <__sfputs_r+0xa>
 8009124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009128 <_vfiprintf_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	460d      	mov	r5, r1
 800912e:	b09d      	sub	sp, #116	@ 0x74
 8009130:	4614      	mov	r4, r2
 8009132:	4698      	mov	r8, r3
 8009134:	4606      	mov	r6, r0
 8009136:	b118      	cbz	r0, 8009140 <_vfiprintf_r+0x18>
 8009138:	6a03      	ldr	r3, [r0, #32]
 800913a:	b90b      	cbnz	r3, 8009140 <_vfiprintf_r+0x18>
 800913c:	f7fd fa82 	bl	8006644 <__sinit>
 8009140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009142:	07d9      	lsls	r1, r3, #31
 8009144:	d405      	bmi.n	8009152 <_vfiprintf_r+0x2a>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	059a      	lsls	r2, r3, #22
 800914a:	d402      	bmi.n	8009152 <_vfiprintf_r+0x2a>
 800914c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800914e:	f7fd fbda 	bl	8006906 <__retarget_lock_acquire_recursive>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	071b      	lsls	r3, r3, #28
 8009156:	d501      	bpl.n	800915c <_vfiprintf_r+0x34>
 8009158:	692b      	ldr	r3, [r5, #16]
 800915a:	b99b      	cbnz	r3, 8009184 <_vfiprintf_r+0x5c>
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f000 f9e4 	bl	800952c <__swsetup_r>
 8009164:	b170      	cbz	r0, 8009184 <_vfiprintf_r+0x5c>
 8009166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009168:	07dc      	lsls	r4, r3, #31
 800916a:	d504      	bpl.n	8009176 <_vfiprintf_r+0x4e>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b01d      	add	sp, #116	@ 0x74
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	0598      	lsls	r0, r3, #22
 800917a:	d4f7      	bmi.n	800916c <_vfiprintf_r+0x44>
 800917c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800917e:	f7fd fbc3 	bl	8006908 <__retarget_lock_release_recursive>
 8009182:	e7f3      	b.n	800916c <_vfiprintf_r+0x44>
 8009184:	2300      	movs	r3, #0
 8009186:	9309      	str	r3, [sp, #36]	@ 0x24
 8009188:	2320      	movs	r3, #32
 800918a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800918e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009192:	2330      	movs	r3, #48	@ 0x30
 8009194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009344 <_vfiprintf_r+0x21c>
 8009198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800919c:	f04f 0901 	mov.w	r9, #1
 80091a0:	4623      	mov	r3, r4
 80091a2:	469a      	mov	sl, r3
 80091a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a8:	b10a      	cbz	r2, 80091ae <_vfiprintf_r+0x86>
 80091aa:	2a25      	cmp	r2, #37	@ 0x25
 80091ac:	d1f9      	bne.n	80091a2 <_vfiprintf_r+0x7a>
 80091ae:	ebba 0b04 	subs.w	fp, sl, r4
 80091b2:	d00b      	beq.n	80091cc <_vfiprintf_r+0xa4>
 80091b4:	465b      	mov	r3, fp
 80091b6:	4622      	mov	r2, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ffa1 	bl	8009102 <__sfputs_r>
 80091c0:	3001      	adds	r0, #1
 80091c2:	f000 80a7 	beq.w	8009314 <_vfiprintf_r+0x1ec>
 80091c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c8:	445a      	add	r2, fp
 80091ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80091cc:	f89a 3000 	ldrb.w	r3, [sl]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 809f 	beq.w	8009314 <_vfiprintf_r+0x1ec>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e0:	f10a 0a01 	add.w	sl, sl, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	9307      	str	r3, [sp, #28]
 80091e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80091ee:	4654      	mov	r4, sl
 80091f0:	2205      	movs	r2, #5
 80091f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f6:	4853      	ldr	r0, [pc, #332]	@ (8009344 <_vfiprintf_r+0x21c>)
 80091f8:	f7f6 fff2 	bl	80001e0 <memchr>
 80091fc:	9a04      	ldr	r2, [sp, #16]
 80091fe:	b9d8      	cbnz	r0, 8009238 <_vfiprintf_r+0x110>
 8009200:	06d1      	lsls	r1, r2, #27
 8009202:	bf44      	itt	mi
 8009204:	2320      	movmi	r3, #32
 8009206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800920a:	0713      	lsls	r3, r2, #28
 800920c:	bf44      	itt	mi
 800920e:	232b      	movmi	r3, #43	@ 0x2b
 8009210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009214:	f89a 3000 	ldrb.w	r3, [sl]
 8009218:	2b2a      	cmp	r3, #42	@ 0x2a
 800921a:	d015      	beq.n	8009248 <_vfiprintf_r+0x120>
 800921c:	9a07      	ldr	r2, [sp, #28]
 800921e:	4654      	mov	r4, sl
 8009220:	2000      	movs	r0, #0
 8009222:	f04f 0c0a 	mov.w	ip, #10
 8009226:	4621      	mov	r1, r4
 8009228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800922c:	3b30      	subs	r3, #48	@ 0x30
 800922e:	2b09      	cmp	r3, #9
 8009230:	d94b      	bls.n	80092ca <_vfiprintf_r+0x1a2>
 8009232:	b1b0      	cbz	r0, 8009262 <_vfiprintf_r+0x13a>
 8009234:	9207      	str	r2, [sp, #28]
 8009236:	e014      	b.n	8009262 <_vfiprintf_r+0x13a>
 8009238:	eba0 0308 	sub.w	r3, r0, r8
 800923c:	fa09 f303 	lsl.w	r3, r9, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	46a2      	mov	sl, r4
 8009246:	e7d2      	b.n	80091ee <_vfiprintf_r+0xc6>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1d19      	adds	r1, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfbb      	ittet	lt
 8009254:	425b      	neglt	r3, r3
 8009256:	f042 0202 	orrlt.w	r2, r2, #2
 800925a:	9307      	strge	r3, [sp, #28]
 800925c:	9307      	strlt	r3, [sp, #28]
 800925e:	bfb8      	it	lt
 8009260:	9204      	strlt	r2, [sp, #16]
 8009262:	7823      	ldrb	r3, [r4, #0]
 8009264:	2b2e      	cmp	r3, #46	@ 0x2e
 8009266:	d10a      	bne.n	800927e <_vfiprintf_r+0x156>
 8009268:	7863      	ldrb	r3, [r4, #1]
 800926a:	2b2a      	cmp	r3, #42	@ 0x2a
 800926c:	d132      	bne.n	80092d4 <_vfiprintf_r+0x1ac>
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	1d1a      	adds	r2, r3, #4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	9203      	str	r2, [sp, #12]
 8009276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800927a:	3402      	adds	r4, #2
 800927c:	9305      	str	r3, [sp, #20]
 800927e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009354 <_vfiprintf_r+0x22c>
 8009282:	7821      	ldrb	r1, [r4, #0]
 8009284:	2203      	movs	r2, #3
 8009286:	4650      	mov	r0, sl
 8009288:	f7f6 ffaa 	bl	80001e0 <memchr>
 800928c:	b138      	cbz	r0, 800929e <_vfiprintf_r+0x176>
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	eba0 000a 	sub.w	r0, r0, sl
 8009294:	2240      	movs	r2, #64	@ 0x40
 8009296:	4082      	lsls	r2, r0
 8009298:	4313      	orrs	r3, r2
 800929a:	3401      	adds	r4, #1
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	4829      	ldr	r0, [pc, #164]	@ (8009348 <_vfiprintf_r+0x220>)
 80092a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092a8:	2206      	movs	r2, #6
 80092aa:	f7f6 ff99 	bl	80001e0 <memchr>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d03f      	beq.n	8009332 <_vfiprintf_r+0x20a>
 80092b2:	4b26      	ldr	r3, [pc, #152]	@ (800934c <_vfiprintf_r+0x224>)
 80092b4:	bb1b      	cbnz	r3, 80092fe <_vfiprintf_r+0x1d6>
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	3307      	adds	r3, #7
 80092ba:	f023 0307 	bic.w	r3, r3, #7
 80092be:	3308      	adds	r3, #8
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c4:	443b      	add	r3, r7
 80092c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c8:	e76a      	b.n	80091a0 <_vfiprintf_r+0x78>
 80092ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ce:	460c      	mov	r4, r1
 80092d0:	2001      	movs	r0, #1
 80092d2:	e7a8      	b.n	8009226 <_vfiprintf_r+0xfe>
 80092d4:	2300      	movs	r3, #0
 80092d6:	3401      	adds	r4, #1
 80092d8:	9305      	str	r3, [sp, #20]
 80092da:	4619      	mov	r1, r3
 80092dc:	f04f 0c0a 	mov.w	ip, #10
 80092e0:	4620      	mov	r0, r4
 80092e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e6:	3a30      	subs	r2, #48	@ 0x30
 80092e8:	2a09      	cmp	r2, #9
 80092ea:	d903      	bls.n	80092f4 <_vfiprintf_r+0x1cc>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d0c6      	beq.n	800927e <_vfiprintf_r+0x156>
 80092f0:	9105      	str	r1, [sp, #20]
 80092f2:	e7c4      	b.n	800927e <_vfiprintf_r+0x156>
 80092f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f8:	4604      	mov	r4, r0
 80092fa:	2301      	movs	r3, #1
 80092fc:	e7f0      	b.n	80092e0 <_vfiprintf_r+0x1b8>
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4b12      	ldr	r3, [pc, #72]	@ (8009350 <_vfiprintf_r+0x228>)
 8009306:	a904      	add	r1, sp, #16
 8009308:	4630      	mov	r0, r6
 800930a:	f7fc fb4b 	bl	80059a4 <_printf_float>
 800930e:	4607      	mov	r7, r0
 8009310:	1c78      	adds	r0, r7, #1
 8009312:	d1d6      	bne.n	80092c2 <_vfiprintf_r+0x19a>
 8009314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009316:	07d9      	lsls	r1, r3, #31
 8009318:	d405      	bmi.n	8009326 <_vfiprintf_r+0x1fe>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	059a      	lsls	r2, r3, #22
 800931e:	d402      	bmi.n	8009326 <_vfiprintf_r+0x1fe>
 8009320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009322:	f7fd faf1 	bl	8006908 <__retarget_lock_release_recursive>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	065b      	lsls	r3, r3, #25
 800932a:	f53f af1f 	bmi.w	800916c <_vfiprintf_r+0x44>
 800932e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009330:	e71e      	b.n	8009170 <_vfiprintf_r+0x48>
 8009332:	ab03      	add	r3, sp, #12
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	462a      	mov	r2, r5
 8009338:	4b05      	ldr	r3, [pc, #20]	@ (8009350 <_vfiprintf_r+0x228>)
 800933a:	a904      	add	r1, sp, #16
 800933c:	4630      	mov	r0, r6
 800933e:	f7fc fdc9 	bl	8005ed4 <_printf_i>
 8009342:	e7e4      	b.n	800930e <_vfiprintf_r+0x1e6>
 8009344:	0800b049 	.word	0x0800b049
 8009348:	0800b053 	.word	0x0800b053
 800934c:	080059a5 	.word	0x080059a5
 8009350:	08009103 	.word	0x08009103
 8009354:	0800b04f 	.word	0x0800b04f

08009358 <__sflush_r>:
 8009358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009360:	0716      	lsls	r6, r2, #28
 8009362:	4605      	mov	r5, r0
 8009364:	460c      	mov	r4, r1
 8009366:	d454      	bmi.n	8009412 <__sflush_r+0xba>
 8009368:	684b      	ldr	r3, [r1, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	dc02      	bgt.n	8009374 <__sflush_r+0x1c>
 800936e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd48      	ble.n	8009406 <__sflush_r+0xae>
 8009374:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009376:	2e00      	cmp	r6, #0
 8009378:	d045      	beq.n	8009406 <__sflush_r+0xae>
 800937a:	2300      	movs	r3, #0
 800937c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009380:	682f      	ldr	r7, [r5, #0]
 8009382:	6a21      	ldr	r1, [r4, #32]
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	d030      	beq.n	80093ea <__sflush_r+0x92>
 8009388:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	0759      	lsls	r1, r3, #29
 800938e:	d505      	bpl.n	800939c <__sflush_r+0x44>
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009396:	b10b      	cbz	r3, 800939c <__sflush_r+0x44>
 8009398:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	2300      	movs	r3, #0
 800939e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093a0:	6a21      	ldr	r1, [r4, #32]
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b0      	blx	r6
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	d106      	bne.n	80093ba <__sflush_r+0x62>
 80093ac:	6829      	ldr	r1, [r5, #0]
 80093ae:	291d      	cmp	r1, #29
 80093b0:	d82b      	bhi.n	800940a <__sflush_r+0xb2>
 80093b2:	4a2a      	ldr	r2, [pc, #168]	@ (800945c <__sflush_r+0x104>)
 80093b4:	40ca      	lsrs	r2, r1
 80093b6:	07d6      	lsls	r6, r2, #31
 80093b8:	d527      	bpl.n	800940a <__sflush_r+0xb2>
 80093ba:	2200      	movs	r2, #0
 80093bc:	6062      	str	r2, [r4, #4]
 80093be:	04d9      	lsls	r1, r3, #19
 80093c0:	6922      	ldr	r2, [r4, #16]
 80093c2:	6022      	str	r2, [r4, #0]
 80093c4:	d504      	bpl.n	80093d0 <__sflush_r+0x78>
 80093c6:	1c42      	adds	r2, r0, #1
 80093c8:	d101      	bne.n	80093ce <__sflush_r+0x76>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	b903      	cbnz	r3, 80093d0 <__sflush_r+0x78>
 80093ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80093d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093d2:	602f      	str	r7, [r5, #0]
 80093d4:	b1b9      	cbz	r1, 8009406 <__sflush_r+0xae>
 80093d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093da:	4299      	cmp	r1, r3
 80093dc:	d002      	beq.n	80093e4 <__sflush_r+0x8c>
 80093de:	4628      	mov	r0, r5
 80093e0:	f7fe f8f2 	bl	80075c8 <_free_r>
 80093e4:	2300      	movs	r3, #0
 80093e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80093e8:	e00d      	b.n	8009406 <__sflush_r+0xae>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b0      	blx	r6
 80093f0:	4602      	mov	r2, r0
 80093f2:	1c50      	adds	r0, r2, #1
 80093f4:	d1c9      	bne.n	800938a <__sflush_r+0x32>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0c6      	beq.n	800938a <__sflush_r+0x32>
 80093fc:	2b1d      	cmp	r3, #29
 80093fe:	d001      	beq.n	8009404 <__sflush_r+0xac>
 8009400:	2b16      	cmp	r3, #22
 8009402:	d11e      	bne.n	8009442 <__sflush_r+0xea>
 8009404:	602f      	str	r7, [r5, #0]
 8009406:	2000      	movs	r0, #0
 8009408:	e022      	b.n	8009450 <__sflush_r+0xf8>
 800940a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800940e:	b21b      	sxth	r3, r3
 8009410:	e01b      	b.n	800944a <__sflush_r+0xf2>
 8009412:	690f      	ldr	r7, [r1, #16]
 8009414:	2f00      	cmp	r7, #0
 8009416:	d0f6      	beq.n	8009406 <__sflush_r+0xae>
 8009418:	0793      	lsls	r3, r2, #30
 800941a:	680e      	ldr	r6, [r1, #0]
 800941c:	bf08      	it	eq
 800941e:	694b      	ldreq	r3, [r1, #20]
 8009420:	600f      	str	r7, [r1, #0]
 8009422:	bf18      	it	ne
 8009424:	2300      	movne	r3, #0
 8009426:	eba6 0807 	sub.w	r8, r6, r7
 800942a:	608b      	str	r3, [r1, #8]
 800942c:	f1b8 0f00 	cmp.w	r8, #0
 8009430:	dde9      	ble.n	8009406 <__sflush_r+0xae>
 8009432:	6a21      	ldr	r1, [r4, #32]
 8009434:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009436:	4643      	mov	r3, r8
 8009438:	463a      	mov	r2, r7
 800943a:	4628      	mov	r0, r5
 800943c:	47b0      	blx	r6
 800943e:	2800      	cmp	r0, #0
 8009440:	dc08      	bgt.n	8009454 <__sflush_r+0xfc>
 8009442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	f04f 30ff 	mov.w	r0, #4294967295
 8009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009454:	4407      	add	r7, r0
 8009456:	eba8 0800 	sub.w	r8, r8, r0
 800945a:	e7e7      	b.n	800942c <__sflush_r+0xd4>
 800945c:	20400001 	.word	0x20400001

08009460 <_fflush_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	690b      	ldr	r3, [r1, #16]
 8009464:	4605      	mov	r5, r0
 8009466:	460c      	mov	r4, r1
 8009468:	b913      	cbnz	r3, 8009470 <_fflush_r+0x10>
 800946a:	2500      	movs	r5, #0
 800946c:	4628      	mov	r0, r5
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	b118      	cbz	r0, 800947a <_fflush_r+0x1a>
 8009472:	6a03      	ldr	r3, [r0, #32]
 8009474:	b90b      	cbnz	r3, 800947a <_fflush_r+0x1a>
 8009476:	f7fd f8e5 	bl	8006644 <__sinit>
 800947a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d0f3      	beq.n	800946a <_fflush_r+0xa>
 8009482:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009484:	07d0      	lsls	r0, r2, #31
 8009486:	d404      	bmi.n	8009492 <_fflush_r+0x32>
 8009488:	0599      	lsls	r1, r3, #22
 800948a:	d402      	bmi.n	8009492 <_fflush_r+0x32>
 800948c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800948e:	f7fd fa3a 	bl	8006906 <__retarget_lock_acquire_recursive>
 8009492:	4628      	mov	r0, r5
 8009494:	4621      	mov	r1, r4
 8009496:	f7ff ff5f 	bl	8009358 <__sflush_r>
 800949a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800949c:	07da      	lsls	r2, r3, #31
 800949e:	4605      	mov	r5, r0
 80094a0:	d4e4      	bmi.n	800946c <_fflush_r+0xc>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	059b      	lsls	r3, r3, #22
 80094a6:	d4e1      	bmi.n	800946c <_fflush_r+0xc>
 80094a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094aa:	f7fd fa2d 	bl	8006908 <__retarget_lock_release_recursive>
 80094ae:	e7dd      	b.n	800946c <_fflush_r+0xc>

080094b0 <__swbuf_r>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	460e      	mov	r6, r1
 80094b4:	4614      	mov	r4, r2
 80094b6:	4605      	mov	r5, r0
 80094b8:	b118      	cbz	r0, 80094c2 <__swbuf_r+0x12>
 80094ba:	6a03      	ldr	r3, [r0, #32]
 80094bc:	b90b      	cbnz	r3, 80094c2 <__swbuf_r+0x12>
 80094be:	f7fd f8c1 	bl	8006644 <__sinit>
 80094c2:	69a3      	ldr	r3, [r4, #24]
 80094c4:	60a3      	str	r3, [r4, #8]
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	071a      	lsls	r2, r3, #28
 80094ca:	d501      	bpl.n	80094d0 <__swbuf_r+0x20>
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	b943      	cbnz	r3, 80094e2 <__swbuf_r+0x32>
 80094d0:	4621      	mov	r1, r4
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 f82a 	bl	800952c <__swsetup_r>
 80094d8:	b118      	cbz	r0, 80094e2 <__swbuf_r+0x32>
 80094da:	f04f 37ff 	mov.w	r7, #4294967295
 80094de:	4638      	mov	r0, r7
 80094e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	6922      	ldr	r2, [r4, #16]
 80094e6:	1a98      	subs	r0, r3, r2
 80094e8:	6963      	ldr	r3, [r4, #20]
 80094ea:	b2f6      	uxtb	r6, r6
 80094ec:	4283      	cmp	r3, r0
 80094ee:	4637      	mov	r7, r6
 80094f0:	dc05      	bgt.n	80094fe <__swbuf_r+0x4e>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f7ff ffb3 	bl	8009460 <_fflush_r>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d1ed      	bne.n	80094da <__swbuf_r+0x2a>
 80094fe:	68a3      	ldr	r3, [r4, #8]
 8009500:	3b01      	subs	r3, #1
 8009502:	60a3      	str	r3, [r4, #8]
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	6022      	str	r2, [r4, #0]
 800950a:	701e      	strb	r6, [r3, #0]
 800950c:	6962      	ldr	r2, [r4, #20]
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	429a      	cmp	r2, r3
 8009512:	d004      	beq.n	800951e <__swbuf_r+0x6e>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	07db      	lsls	r3, r3, #31
 8009518:	d5e1      	bpl.n	80094de <__swbuf_r+0x2e>
 800951a:	2e0a      	cmp	r6, #10
 800951c:	d1df      	bne.n	80094de <__swbuf_r+0x2e>
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f7ff ff9d 	bl	8009460 <_fflush_r>
 8009526:	2800      	cmp	r0, #0
 8009528:	d0d9      	beq.n	80094de <__swbuf_r+0x2e>
 800952a:	e7d6      	b.n	80094da <__swbuf_r+0x2a>

0800952c <__swsetup_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4b29      	ldr	r3, [pc, #164]	@ (80095d4 <__swsetup_r+0xa8>)
 8009530:	4605      	mov	r5, r0
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	460c      	mov	r4, r1
 8009536:	b118      	cbz	r0, 8009540 <__swsetup_r+0x14>
 8009538:	6a03      	ldr	r3, [r0, #32]
 800953a:	b90b      	cbnz	r3, 8009540 <__swsetup_r+0x14>
 800953c:	f7fd f882 	bl	8006644 <__sinit>
 8009540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009544:	0719      	lsls	r1, r3, #28
 8009546:	d422      	bmi.n	800958e <__swsetup_r+0x62>
 8009548:	06da      	lsls	r2, r3, #27
 800954a:	d407      	bmi.n	800955c <__swsetup_r+0x30>
 800954c:	2209      	movs	r2, #9
 800954e:	602a      	str	r2, [r5, #0]
 8009550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	e033      	b.n	80095c4 <__swsetup_r+0x98>
 800955c:	0758      	lsls	r0, r3, #29
 800955e:	d512      	bpl.n	8009586 <__swsetup_r+0x5a>
 8009560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009562:	b141      	cbz	r1, 8009576 <__swsetup_r+0x4a>
 8009564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009568:	4299      	cmp	r1, r3
 800956a:	d002      	beq.n	8009572 <__swsetup_r+0x46>
 800956c:	4628      	mov	r0, r5
 800956e:	f7fe f82b 	bl	80075c8 <_free_r>
 8009572:	2300      	movs	r3, #0
 8009574:	6363      	str	r3, [r4, #52]	@ 0x34
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f043 0308 	orr.w	r3, r3, #8
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	b94b      	cbnz	r3, 80095a6 <__swsetup_r+0x7a>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800959c:	d003      	beq.n	80095a6 <__swsetup_r+0x7a>
 800959e:	4621      	mov	r1, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 fc5d 	bl	8009e60 <__smakebuf_r>
 80095a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095aa:	f013 0201 	ands.w	r2, r3, #1
 80095ae:	d00a      	beq.n	80095c6 <__swsetup_r+0x9a>
 80095b0:	2200      	movs	r2, #0
 80095b2:	60a2      	str	r2, [r4, #8]
 80095b4:	6962      	ldr	r2, [r4, #20]
 80095b6:	4252      	negs	r2, r2
 80095b8:	61a2      	str	r2, [r4, #24]
 80095ba:	6922      	ldr	r2, [r4, #16]
 80095bc:	b942      	cbnz	r2, 80095d0 <__swsetup_r+0xa4>
 80095be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095c2:	d1c5      	bne.n	8009550 <__swsetup_r+0x24>
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	0799      	lsls	r1, r3, #30
 80095c8:	bf58      	it	pl
 80095ca:	6962      	ldrpl	r2, [r4, #20]
 80095cc:	60a2      	str	r2, [r4, #8]
 80095ce:	e7f4      	b.n	80095ba <__swsetup_r+0x8e>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7f7      	b.n	80095c4 <__swsetup_r+0x98>
 80095d4:	20000018 	.word	0x20000018

080095d8 <memmove>:
 80095d8:	4288      	cmp	r0, r1
 80095da:	b510      	push	{r4, lr}
 80095dc:	eb01 0402 	add.w	r4, r1, r2
 80095e0:	d902      	bls.n	80095e8 <memmove+0x10>
 80095e2:	4284      	cmp	r4, r0
 80095e4:	4623      	mov	r3, r4
 80095e6:	d807      	bhi.n	80095f8 <memmove+0x20>
 80095e8:	1e43      	subs	r3, r0, #1
 80095ea:	42a1      	cmp	r1, r4
 80095ec:	d008      	beq.n	8009600 <memmove+0x28>
 80095ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095f6:	e7f8      	b.n	80095ea <memmove+0x12>
 80095f8:	4402      	add	r2, r0
 80095fa:	4601      	mov	r1, r0
 80095fc:	428a      	cmp	r2, r1
 80095fe:	d100      	bne.n	8009602 <memmove+0x2a>
 8009600:	bd10      	pop	{r4, pc}
 8009602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800960a:	e7f7      	b.n	80095fc <memmove+0x24>

0800960c <strncmp>:
 800960c:	b510      	push	{r4, lr}
 800960e:	b16a      	cbz	r2, 800962c <strncmp+0x20>
 8009610:	3901      	subs	r1, #1
 8009612:	1884      	adds	r4, r0, r2
 8009614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009618:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800961c:	429a      	cmp	r2, r3
 800961e:	d103      	bne.n	8009628 <strncmp+0x1c>
 8009620:	42a0      	cmp	r0, r4
 8009622:	d001      	beq.n	8009628 <strncmp+0x1c>
 8009624:	2a00      	cmp	r2, #0
 8009626:	d1f5      	bne.n	8009614 <strncmp+0x8>
 8009628:	1ad0      	subs	r0, r2, r3
 800962a:	bd10      	pop	{r4, pc}
 800962c:	4610      	mov	r0, r2
 800962e:	e7fc      	b.n	800962a <strncmp+0x1e>

08009630 <_sbrk_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d06      	ldr	r5, [pc, #24]	@ (800964c <_sbrk_r+0x1c>)
 8009634:	2300      	movs	r3, #0
 8009636:	4604      	mov	r4, r0
 8009638:	4608      	mov	r0, r1
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	f7f8 fff4 	bl	8002628 <_sbrk>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_sbrk_r+0x1a>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_sbrk_r+0x1a>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	2000048c 	.word	0x2000048c

08009650 <memcpy>:
 8009650:	440a      	add	r2, r1
 8009652:	4291      	cmp	r1, r2
 8009654:	f100 33ff 	add.w	r3, r0, #4294967295
 8009658:	d100      	bne.n	800965c <memcpy+0xc>
 800965a:	4770      	bx	lr
 800965c:	b510      	push	{r4, lr}
 800965e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009666:	4291      	cmp	r1, r2
 8009668:	d1f9      	bne.n	800965e <memcpy+0xe>
 800966a:	bd10      	pop	{r4, pc}
 800966c:	0000      	movs	r0, r0
	...

08009670 <nan>:
 8009670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009678 <nan+0x8>
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	00000000 	.word	0x00000000
 800967c:	7ff80000 	.word	0x7ff80000

08009680 <__assert_func>:
 8009680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009682:	4614      	mov	r4, r2
 8009684:	461a      	mov	r2, r3
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <__assert_func+0x2c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4605      	mov	r5, r0
 800968c:	68d8      	ldr	r0, [r3, #12]
 800968e:	b14c      	cbz	r4, 80096a4 <__assert_func+0x24>
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <__assert_func+0x30>)
 8009692:	9100      	str	r1, [sp, #0]
 8009694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009698:	4906      	ldr	r1, [pc, #24]	@ (80096b4 <__assert_func+0x34>)
 800969a:	462b      	mov	r3, r5
 800969c:	f000 fba8 	bl	8009df0 <fiprintf>
 80096a0:	f000 fc3c 	bl	8009f1c <abort>
 80096a4:	4b04      	ldr	r3, [pc, #16]	@ (80096b8 <__assert_func+0x38>)
 80096a6:	461c      	mov	r4, r3
 80096a8:	e7f3      	b.n	8009692 <__assert_func+0x12>
 80096aa:	bf00      	nop
 80096ac:	20000018 	.word	0x20000018
 80096b0:	0800b062 	.word	0x0800b062
 80096b4:	0800b06f 	.word	0x0800b06f
 80096b8:	0800b09d 	.word	0x0800b09d

080096bc <_calloc_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	fba1 5402 	umull	r5, r4, r1, r2
 80096c2:	b934      	cbnz	r4, 80096d2 <_calloc_r+0x16>
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7fd fff3 	bl	80076b0 <_malloc_r>
 80096ca:	4606      	mov	r6, r0
 80096cc:	b928      	cbnz	r0, 80096da <_calloc_r+0x1e>
 80096ce:	4630      	mov	r0, r6
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	220c      	movs	r2, #12
 80096d4:	6002      	str	r2, [r0, #0]
 80096d6:	2600      	movs	r6, #0
 80096d8:	e7f9      	b.n	80096ce <_calloc_r+0x12>
 80096da:	462a      	mov	r2, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7fd f894 	bl	800680a <memset>
 80096e2:	e7f4      	b.n	80096ce <_calloc_r+0x12>

080096e4 <rshift>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096f2:	f100 0414 	add.w	r4, r0, #20
 80096f6:	dd45      	ble.n	8009784 <rshift+0xa0>
 80096f8:	f011 011f 	ands.w	r1, r1, #31
 80096fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009704:	d10c      	bne.n	8009720 <rshift+0x3c>
 8009706:	f100 0710 	add.w	r7, r0, #16
 800970a:	4629      	mov	r1, r5
 800970c:	42b1      	cmp	r1, r6
 800970e:	d334      	bcc.n	800977a <rshift+0x96>
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	1eea      	subs	r2, r5, #3
 8009716:	4296      	cmp	r6, r2
 8009718:	bf38      	it	cc
 800971a:	2300      	movcc	r3, #0
 800971c:	4423      	add	r3, r4
 800971e:	e015      	b.n	800974c <rshift+0x68>
 8009720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009724:	f1c1 0820 	rsb	r8, r1, #32
 8009728:	40cf      	lsrs	r7, r1
 800972a:	f105 0e04 	add.w	lr, r5, #4
 800972e:	46a1      	mov	r9, r4
 8009730:	4576      	cmp	r6, lr
 8009732:	46f4      	mov	ip, lr
 8009734:	d815      	bhi.n	8009762 <rshift+0x7e>
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	3a04      	subs	r2, #4
 800973c:	3501      	adds	r5, #1
 800973e:	42ae      	cmp	r6, r5
 8009740:	bf38      	it	cc
 8009742:	2200      	movcc	r2, #0
 8009744:	18a3      	adds	r3, r4, r2
 8009746:	50a7      	str	r7, [r4, r2]
 8009748:	b107      	cbz	r7, 800974c <rshift+0x68>
 800974a:	3304      	adds	r3, #4
 800974c:	1b1a      	subs	r2, r3, r4
 800974e:	42a3      	cmp	r3, r4
 8009750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009754:	bf08      	it	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	6102      	str	r2, [r0, #16]
 800975a:	bf08      	it	eq
 800975c:	6143      	streq	r3, [r0, #20]
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009762:	f8dc c000 	ldr.w	ip, [ip]
 8009766:	fa0c fc08 	lsl.w	ip, ip, r8
 800976a:	ea4c 0707 	orr.w	r7, ip, r7
 800976e:	f849 7b04 	str.w	r7, [r9], #4
 8009772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009776:	40cf      	lsrs	r7, r1
 8009778:	e7da      	b.n	8009730 <rshift+0x4c>
 800977a:	f851 cb04 	ldr.w	ip, [r1], #4
 800977e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009782:	e7c3      	b.n	800970c <rshift+0x28>
 8009784:	4623      	mov	r3, r4
 8009786:	e7e1      	b.n	800974c <rshift+0x68>

08009788 <__hexdig_fun>:
 8009788:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d802      	bhi.n	8009796 <__hexdig_fun+0xe>
 8009790:	3820      	subs	r0, #32
 8009792:	b2c0      	uxtb	r0, r0
 8009794:	4770      	bx	lr
 8009796:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800979a:	2b05      	cmp	r3, #5
 800979c:	d801      	bhi.n	80097a2 <__hexdig_fun+0x1a>
 800979e:	3847      	subs	r0, #71	@ 0x47
 80097a0:	e7f7      	b.n	8009792 <__hexdig_fun+0xa>
 80097a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d801      	bhi.n	80097ae <__hexdig_fun+0x26>
 80097aa:	3827      	subs	r0, #39	@ 0x27
 80097ac:	e7f1      	b.n	8009792 <__hexdig_fun+0xa>
 80097ae:	2000      	movs	r0, #0
 80097b0:	4770      	bx	lr
	...

080097b4 <__gethex>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	b085      	sub	sp, #20
 80097ba:	468a      	mov	sl, r1
 80097bc:	9302      	str	r3, [sp, #8]
 80097be:	680b      	ldr	r3, [r1, #0]
 80097c0:	9001      	str	r0, [sp, #4]
 80097c2:	4690      	mov	r8, r2
 80097c4:	1c9c      	adds	r4, r3, #2
 80097c6:	46a1      	mov	r9, r4
 80097c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097cc:	2830      	cmp	r0, #48	@ 0x30
 80097ce:	d0fa      	beq.n	80097c6 <__gethex+0x12>
 80097d0:	eba9 0303 	sub.w	r3, r9, r3
 80097d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80097d8:	f7ff ffd6 	bl	8009788 <__hexdig_fun>
 80097dc:	4605      	mov	r5, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d168      	bne.n	80098b4 <__gethex+0x100>
 80097e2:	49a0      	ldr	r1, [pc, #640]	@ (8009a64 <__gethex+0x2b0>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	4648      	mov	r0, r9
 80097e8:	f7ff ff10 	bl	800960c <strncmp>
 80097ec:	4607      	mov	r7, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d167      	bne.n	80098c2 <__gethex+0x10e>
 80097f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80097f6:	4626      	mov	r6, r4
 80097f8:	f7ff ffc6 	bl	8009788 <__hexdig_fun>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d062      	beq.n	80098c6 <__gethex+0x112>
 8009800:	4623      	mov	r3, r4
 8009802:	7818      	ldrb	r0, [r3, #0]
 8009804:	2830      	cmp	r0, #48	@ 0x30
 8009806:	4699      	mov	r9, r3
 8009808:	f103 0301 	add.w	r3, r3, #1
 800980c:	d0f9      	beq.n	8009802 <__gethex+0x4e>
 800980e:	f7ff ffbb 	bl	8009788 <__hexdig_fun>
 8009812:	fab0 f580 	clz	r5, r0
 8009816:	096d      	lsrs	r5, r5, #5
 8009818:	f04f 0b01 	mov.w	fp, #1
 800981c:	464a      	mov	r2, r9
 800981e:	4616      	mov	r6, r2
 8009820:	3201      	adds	r2, #1
 8009822:	7830      	ldrb	r0, [r6, #0]
 8009824:	f7ff ffb0 	bl	8009788 <__hexdig_fun>
 8009828:	2800      	cmp	r0, #0
 800982a:	d1f8      	bne.n	800981e <__gethex+0x6a>
 800982c:	498d      	ldr	r1, [pc, #564]	@ (8009a64 <__gethex+0x2b0>)
 800982e:	2201      	movs	r2, #1
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff feeb 	bl	800960c <strncmp>
 8009836:	2800      	cmp	r0, #0
 8009838:	d13f      	bne.n	80098ba <__gethex+0x106>
 800983a:	b944      	cbnz	r4, 800984e <__gethex+0x9a>
 800983c:	1c74      	adds	r4, r6, #1
 800983e:	4622      	mov	r2, r4
 8009840:	4616      	mov	r6, r2
 8009842:	3201      	adds	r2, #1
 8009844:	7830      	ldrb	r0, [r6, #0]
 8009846:	f7ff ff9f 	bl	8009788 <__hexdig_fun>
 800984a:	2800      	cmp	r0, #0
 800984c:	d1f8      	bne.n	8009840 <__gethex+0x8c>
 800984e:	1ba4      	subs	r4, r4, r6
 8009850:	00a7      	lsls	r7, r4, #2
 8009852:	7833      	ldrb	r3, [r6, #0]
 8009854:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009858:	2b50      	cmp	r3, #80	@ 0x50
 800985a:	d13e      	bne.n	80098da <__gethex+0x126>
 800985c:	7873      	ldrb	r3, [r6, #1]
 800985e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009860:	d033      	beq.n	80098ca <__gethex+0x116>
 8009862:	2b2d      	cmp	r3, #45	@ 0x2d
 8009864:	d034      	beq.n	80098d0 <__gethex+0x11c>
 8009866:	1c71      	adds	r1, r6, #1
 8009868:	2400      	movs	r4, #0
 800986a:	7808      	ldrb	r0, [r1, #0]
 800986c:	f7ff ff8c 	bl	8009788 <__hexdig_fun>
 8009870:	1e43      	subs	r3, r0, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b18      	cmp	r3, #24
 8009876:	d830      	bhi.n	80098da <__gethex+0x126>
 8009878:	f1a0 0210 	sub.w	r2, r0, #16
 800987c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009880:	f7ff ff82 	bl	8009788 <__hexdig_fun>
 8009884:	f100 3cff 	add.w	ip, r0, #4294967295
 8009888:	fa5f fc8c 	uxtb.w	ip, ip
 800988c:	f1bc 0f18 	cmp.w	ip, #24
 8009890:	f04f 030a 	mov.w	r3, #10
 8009894:	d91e      	bls.n	80098d4 <__gethex+0x120>
 8009896:	b104      	cbz	r4, 800989a <__gethex+0xe6>
 8009898:	4252      	negs	r2, r2
 800989a:	4417      	add	r7, r2
 800989c:	f8ca 1000 	str.w	r1, [sl]
 80098a0:	b1ed      	cbz	r5, 80098de <__gethex+0x12a>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	bf0c      	ite	eq
 80098a8:	2506      	moveq	r5, #6
 80098aa:	2500      	movne	r5, #0
 80098ac:	4628      	mov	r0, r5
 80098ae:	b005      	add	sp, #20
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	2500      	movs	r5, #0
 80098b6:	462c      	mov	r4, r5
 80098b8:	e7b0      	b.n	800981c <__gethex+0x68>
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	d1c7      	bne.n	800984e <__gethex+0x9a>
 80098be:	4627      	mov	r7, r4
 80098c0:	e7c7      	b.n	8009852 <__gethex+0x9e>
 80098c2:	464e      	mov	r6, r9
 80098c4:	462f      	mov	r7, r5
 80098c6:	2501      	movs	r5, #1
 80098c8:	e7c3      	b.n	8009852 <__gethex+0x9e>
 80098ca:	2400      	movs	r4, #0
 80098cc:	1cb1      	adds	r1, r6, #2
 80098ce:	e7cc      	b.n	800986a <__gethex+0xb6>
 80098d0:	2401      	movs	r4, #1
 80098d2:	e7fb      	b.n	80098cc <__gethex+0x118>
 80098d4:	fb03 0002 	mla	r0, r3, r2, r0
 80098d8:	e7ce      	b.n	8009878 <__gethex+0xc4>
 80098da:	4631      	mov	r1, r6
 80098dc:	e7de      	b.n	800989c <__gethex+0xe8>
 80098de:	eba6 0309 	sub.w	r3, r6, r9
 80098e2:	3b01      	subs	r3, #1
 80098e4:	4629      	mov	r1, r5
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	dc0a      	bgt.n	8009900 <__gethex+0x14c>
 80098ea:	9801      	ldr	r0, [sp, #4]
 80098ec:	f7fd ff6c 	bl	80077c8 <_Balloc>
 80098f0:	4604      	mov	r4, r0
 80098f2:	b940      	cbnz	r0, 8009906 <__gethex+0x152>
 80098f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009a68 <__gethex+0x2b4>)
 80098f6:	4602      	mov	r2, r0
 80098f8:	21e4      	movs	r1, #228	@ 0xe4
 80098fa:	485c      	ldr	r0, [pc, #368]	@ (8009a6c <__gethex+0x2b8>)
 80098fc:	f7ff fec0 	bl	8009680 <__assert_func>
 8009900:	3101      	adds	r1, #1
 8009902:	105b      	asrs	r3, r3, #1
 8009904:	e7ef      	b.n	80098e6 <__gethex+0x132>
 8009906:	f100 0a14 	add.w	sl, r0, #20
 800990a:	2300      	movs	r3, #0
 800990c:	4655      	mov	r5, sl
 800990e:	469b      	mov	fp, r3
 8009910:	45b1      	cmp	r9, r6
 8009912:	d337      	bcc.n	8009984 <__gethex+0x1d0>
 8009914:	f845 bb04 	str.w	fp, [r5], #4
 8009918:	eba5 050a 	sub.w	r5, r5, sl
 800991c:	10ad      	asrs	r5, r5, #2
 800991e:	6125      	str	r5, [r4, #16]
 8009920:	4658      	mov	r0, fp
 8009922:	f7fe f843 	bl	80079ac <__hi0bits>
 8009926:	016d      	lsls	r5, r5, #5
 8009928:	f8d8 6000 	ldr.w	r6, [r8]
 800992c:	1a2d      	subs	r5, r5, r0
 800992e:	42b5      	cmp	r5, r6
 8009930:	dd54      	ble.n	80099dc <__gethex+0x228>
 8009932:	1bad      	subs	r5, r5, r6
 8009934:	4629      	mov	r1, r5
 8009936:	4620      	mov	r0, r4
 8009938:	f7fe fbcf 	bl	80080da <__any_on>
 800993c:	4681      	mov	r9, r0
 800993e:	b178      	cbz	r0, 8009960 <__gethex+0x1ac>
 8009940:	1e6b      	subs	r3, r5, #1
 8009942:	1159      	asrs	r1, r3, #5
 8009944:	f003 021f 	and.w	r2, r3, #31
 8009948:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800994c:	f04f 0901 	mov.w	r9, #1
 8009950:	fa09 f202 	lsl.w	r2, r9, r2
 8009954:	420a      	tst	r2, r1
 8009956:	d003      	beq.n	8009960 <__gethex+0x1ac>
 8009958:	454b      	cmp	r3, r9
 800995a:	dc36      	bgt.n	80099ca <__gethex+0x216>
 800995c:	f04f 0902 	mov.w	r9, #2
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff febe 	bl	80096e4 <rshift>
 8009968:	442f      	add	r7, r5
 800996a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800996e:	42bb      	cmp	r3, r7
 8009970:	da42      	bge.n	80099f8 <__gethex+0x244>
 8009972:	9801      	ldr	r0, [sp, #4]
 8009974:	4621      	mov	r1, r4
 8009976:	f7fd ff67 	bl	8007848 <_Bfree>
 800997a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800997c:	2300      	movs	r3, #0
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	25a3      	movs	r5, #163	@ 0xa3
 8009982:	e793      	b.n	80098ac <__gethex+0xf8>
 8009984:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009988:	2a2e      	cmp	r2, #46	@ 0x2e
 800998a:	d012      	beq.n	80099b2 <__gethex+0x1fe>
 800998c:	2b20      	cmp	r3, #32
 800998e:	d104      	bne.n	800999a <__gethex+0x1e6>
 8009990:	f845 bb04 	str.w	fp, [r5], #4
 8009994:	f04f 0b00 	mov.w	fp, #0
 8009998:	465b      	mov	r3, fp
 800999a:	7830      	ldrb	r0, [r6, #0]
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	f7ff fef3 	bl	8009788 <__hexdig_fun>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f000 000f 	and.w	r0, r0, #15
 80099a8:	4098      	lsls	r0, r3
 80099aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80099ae:	3304      	adds	r3, #4
 80099b0:	e7ae      	b.n	8009910 <__gethex+0x15c>
 80099b2:	45b1      	cmp	r9, r6
 80099b4:	d8ea      	bhi.n	800998c <__gethex+0x1d8>
 80099b6:	492b      	ldr	r1, [pc, #172]	@ (8009a64 <__gethex+0x2b0>)
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fe25 	bl	800960c <strncmp>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1e1      	bne.n	800998c <__gethex+0x1d8>
 80099c8:	e7a2      	b.n	8009910 <__gethex+0x15c>
 80099ca:	1ea9      	subs	r1, r5, #2
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7fe fb84 	bl	80080da <__any_on>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0c2      	beq.n	800995c <__gethex+0x1a8>
 80099d6:	f04f 0903 	mov.w	r9, #3
 80099da:	e7c1      	b.n	8009960 <__gethex+0x1ac>
 80099dc:	da09      	bge.n	80099f2 <__gethex+0x23e>
 80099de:	1b75      	subs	r5, r6, r5
 80099e0:	4621      	mov	r1, r4
 80099e2:	9801      	ldr	r0, [sp, #4]
 80099e4:	462a      	mov	r2, r5
 80099e6:	f7fe f93f 	bl	8007c68 <__lshift>
 80099ea:	1b7f      	subs	r7, r7, r5
 80099ec:	4604      	mov	r4, r0
 80099ee:	f100 0a14 	add.w	sl, r0, #20
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	e7b8      	b.n	800996a <__gethex+0x1b6>
 80099f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099fc:	42bd      	cmp	r5, r7
 80099fe:	dd6f      	ble.n	8009ae0 <__gethex+0x32c>
 8009a00:	1bed      	subs	r5, r5, r7
 8009a02:	42ae      	cmp	r6, r5
 8009a04:	dc34      	bgt.n	8009a70 <__gethex+0x2bc>
 8009a06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d022      	beq.n	8009a54 <__gethex+0x2a0>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d024      	beq.n	8009a5c <__gethex+0x2a8>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d115      	bne.n	8009a42 <__gethex+0x28e>
 8009a16:	42ae      	cmp	r6, r5
 8009a18:	d113      	bne.n	8009a42 <__gethex+0x28e>
 8009a1a:	2e01      	cmp	r6, #1
 8009a1c:	d10b      	bne.n	8009a36 <__gethex+0x282>
 8009a1e:	9a02      	ldr	r2, [sp, #8]
 8009a20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	2301      	movs	r3, #1
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	f8ca 3000 	str.w	r3, [sl]
 8009a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a30:	2562      	movs	r5, #98	@ 0x62
 8009a32:	601c      	str	r4, [r3, #0]
 8009a34:	e73a      	b.n	80098ac <__gethex+0xf8>
 8009a36:	1e71      	subs	r1, r6, #1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7fe fb4e 	bl	80080da <__any_on>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1ed      	bne.n	8009a1e <__gethex+0x26a>
 8009a42:	9801      	ldr	r0, [sp, #4]
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7fd feff 	bl	8007848 <_Bfree>
 8009a4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	2550      	movs	r5, #80	@ 0x50
 8009a52:	e72b      	b.n	80098ac <__gethex+0xf8>
 8009a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f3      	bne.n	8009a42 <__gethex+0x28e>
 8009a5a:	e7e0      	b.n	8009a1e <__gethex+0x26a>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1dd      	bne.n	8009a1e <__gethex+0x26a>
 8009a62:	e7ee      	b.n	8009a42 <__gethex+0x28e>
 8009a64:	0800b047 	.word	0x0800b047
 8009a68:	0800afdd 	.word	0x0800afdd
 8009a6c:	0800b09e 	.word	0x0800b09e
 8009a70:	1e6f      	subs	r7, r5, #1
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d130      	bne.n	8009ada <__gethex+0x326>
 8009a78:	b127      	cbz	r7, 8009a84 <__gethex+0x2d0>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7fe fb2c 	bl	80080da <__any_on>
 8009a82:	4681      	mov	r9, r0
 8009a84:	117a      	asrs	r2, r7, #5
 8009a86:	2301      	movs	r3, #1
 8009a88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a8c:	f007 071f 	and.w	r7, r7, #31
 8009a90:	40bb      	lsls	r3, r7
 8009a92:	4213      	tst	r3, r2
 8009a94:	4629      	mov	r1, r5
 8009a96:	4620      	mov	r0, r4
 8009a98:	bf18      	it	ne
 8009a9a:	f049 0902 	orrne.w	r9, r9, #2
 8009a9e:	f7ff fe21 	bl	80096e4 <rshift>
 8009aa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009aa6:	1b76      	subs	r6, r6, r5
 8009aa8:	2502      	movs	r5, #2
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	d047      	beq.n	8009b40 <__gethex+0x38c>
 8009ab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d015      	beq.n	8009ae4 <__gethex+0x330>
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d017      	beq.n	8009aec <__gethex+0x338>
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d109      	bne.n	8009ad4 <__gethex+0x320>
 8009ac0:	f019 0f02 	tst.w	r9, #2
 8009ac4:	d006      	beq.n	8009ad4 <__gethex+0x320>
 8009ac6:	f8da 3000 	ldr.w	r3, [sl]
 8009aca:	ea49 0903 	orr.w	r9, r9, r3
 8009ace:	f019 0f01 	tst.w	r9, #1
 8009ad2:	d10e      	bne.n	8009af2 <__gethex+0x33e>
 8009ad4:	f045 0510 	orr.w	r5, r5, #16
 8009ad8:	e032      	b.n	8009b40 <__gethex+0x38c>
 8009ada:	f04f 0901 	mov.w	r9, #1
 8009ade:	e7d1      	b.n	8009a84 <__gethex+0x2d0>
 8009ae0:	2501      	movs	r5, #1
 8009ae2:	e7e2      	b.n	8009aaa <__gethex+0x2f6>
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae6:	f1c3 0301 	rsb	r3, r3, #1
 8009aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0f0      	beq.n	8009ad4 <__gethex+0x320>
 8009af2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009af6:	f104 0314 	add.w	r3, r4, #20
 8009afa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009afe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b02:	f04f 0c00 	mov.w	ip, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b10:	d01b      	beq.n	8009b4a <__gethex+0x396>
 8009b12:	3201      	adds	r2, #1
 8009b14:	6002      	str	r2, [r0, #0]
 8009b16:	2d02      	cmp	r5, #2
 8009b18:	f104 0314 	add.w	r3, r4, #20
 8009b1c:	d13c      	bne.n	8009b98 <__gethex+0x3e4>
 8009b1e:	f8d8 2000 	ldr.w	r2, [r8]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	42b2      	cmp	r2, r6
 8009b26:	d109      	bne.n	8009b3c <__gethex+0x388>
 8009b28:	1171      	asrs	r1, r6, #5
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b30:	f006 061f 	and.w	r6, r6, #31
 8009b34:	fa02 f606 	lsl.w	r6, r2, r6
 8009b38:	421e      	tst	r6, r3
 8009b3a:	d13a      	bne.n	8009bb2 <__gethex+0x3fe>
 8009b3c:	f045 0520 	orr.w	r5, r5, #32
 8009b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b42:	601c      	str	r4, [r3, #0]
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	601f      	str	r7, [r3, #0]
 8009b48:	e6b0      	b.n	80098ac <__gethex+0xf8>
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b50:	d8d9      	bhi.n	8009b06 <__gethex+0x352>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	459b      	cmp	fp, r3
 8009b56:	db17      	blt.n	8009b88 <__gethex+0x3d4>
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	9801      	ldr	r0, [sp, #4]
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f7fd fe33 	bl	80077c8 <_Balloc>
 8009b62:	4681      	mov	r9, r0
 8009b64:	b918      	cbnz	r0, 8009b6e <__gethex+0x3ba>
 8009b66:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd0 <__gethex+0x41c>)
 8009b68:	4602      	mov	r2, r0
 8009b6a:	2184      	movs	r1, #132	@ 0x84
 8009b6c:	e6c5      	b.n	80098fa <__gethex+0x146>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	3202      	adds	r2, #2
 8009b72:	f104 010c 	add.w	r1, r4, #12
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7ff fd69 	bl	8009650 <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	9801      	ldr	r0, [sp, #4]
 8009b82:	f7fd fe61 	bl	8007848 <_Bfree>
 8009b86:	464c      	mov	r4, r9
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b90:	6122      	str	r2, [r4, #16]
 8009b92:	2201      	movs	r2, #1
 8009b94:	615a      	str	r2, [r3, #20]
 8009b96:	e7be      	b.n	8009b16 <__gethex+0x362>
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	455a      	cmp	r2, fp
 8009b9c:	dd0b      	ble.n	8009bb6 <__gethex+0x402>
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f7ff fd9f 	bl	80096e4 <rshift>
 8009ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009baa:	3701      	adds	r7, #1
 8009bac:	42bb      	cmp	r3, r7
 8009bae:	f6ff aee0 	blt.w	8009972 <__gethex+0x1be>
 8009bb2:	2501      	movs	r5, #1
 8009bb4:	e7c2      	b.n	8009b3c <__gethex+0x388>
 8009bb6:	f016 061f 	ands.w	r6, r6, #31
 8009bba:	d0fa      	beq.n	8009bb2 <__gethex+0x3fe>
 8009bbc:	4453      	add	r3, sl
 8009bbe:	f1c6 0620 	rsb	r6, r6, #32
 8009bc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bc6:	f7fd fef1 	bl	80079ac <__hi0bits>
 8009bca:	42b0      	cmp	r0, r6
 8009bcc:	dbe7      	blt.n	8009b9e <__gethex+0x3ea>
 8009bce:	e7f0      	b.n	8009bb2 <__gethex+0x3fe>
 8009bd0:	0800afdd 	.word	0x0800afdd

08009bd4 <L_shift>:
 8009bd4:	f1c2 0208 	rsb	r2, r2, #8
 8009bd8:	0092      	lsls	r2, r2, #2
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	f1c2 0620 	rsb	r6, r2, #32
 8009be0:	6843      	ldr	r3, [r0, #4]
 8009be2:	6804      	ldr	r4, [r0, #0]
 8009be4:	fa03 f506 	lsl.w	r5, r3, r6
 8009be8:	432c      	orrs	r4, r5
 8009bea:	40d3      	lsrs	r3, r2
 8009bec:	6004      	str	r4, [r0, #0]
 8009bee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bf2:	4288      	cmp	r0, r1
 8009bf4:	d3f4      	bcc.n	8009be0 <L_shift+0xc>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}

08009bf8 <__match>:
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	6803      	ldr	r3, [r0, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	b914      	cbnz	r4, 8009c0a <__match+0x12>
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	2001      	movs	r0, #1
 8009c08:	bd30      	pop	{r4, r5, pc}
 8009c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c12:	2d19      	cmp	r5, #25
 8009c14:	bf98      	it	ls
 8009c16:	3220      	addls	r2, #32
 8009c18:	42a2      	cmp	r2, r4
 8009c1a:	d0f0      	beq.n	8009bfe <__match+0x6>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7f3      	b.n	8009c08 <__match+0x10>

08009c20 <__hexnan>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	680b      	ldr	r3, [r1, #0]
 8009c26:	6801      	ldr	r1, [r0, #0]
 8009c28:	115e      	asrs	r6, r3, #5
 8009c2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c2e:	f013 031f 	ands.w	r3, r3, #31
 8009c32:	b087      	sub	sp, #28
 8009c34:	bf18      	it	ne
 8009c36:	3604      	addne	r6, #4
 8009c38:	2500      	movs	r5, #0
 8009c3a:	1f37      	subs	r7, r6, #4
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	4690      	mov	r8, r2
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c46:	46b9      	mov	r9, r7
 8009c48:	463c      	mov	r4, r7
 8009c4a:	9502      	str	r5, [sp, #8]
 8009c4c:	46ab      	mov	fp, r5
 8009c4e:	784a      	ldrb	r2, [r1, #1]
 8009c50:	1c4b      	adds	r3, r1, #1
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	b342      	cbz	r2, 8009ca8 <__hexnan+0x88>
 8009c56:	4610      	mov	r0, r2
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	9204      	str	r2, [sp, #16]
 8009c5c:	f7ff fd94 	bl	8009788 <__hexdig_fun>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d151      	bne.n	8009d08 <__hexnan+0xe8>
 8009c64:	9a04      	ldr	r2, [sp, #16]
 8009c66:	9905      	ldr	r1, [sp, #20]
 8009c68:	2a20      	cmp	r2, #32
 8009c6a:	d818      	bhi.n	8009c9e <__hexnan+0x7e>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	459b      	cmp	fp, r3
 8009c70:	dd13      	ble.n	8009c9a <__hexnan+0x7a>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0x64>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0x64>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ffa8 	bl	8009bd4 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d952      	bls.n	8009d2e <__hexnan+0x10e>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009c8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c92:	f8cd b008 	str.w	fp, [sp, #8]
 8009c96:	464c      	mov	r4, r9
 8009c98:	461d      	mov	r5, r3
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	e7d7      	b.n	8009c4e <__hexnan+0x2e>
 8009c9e:	2a29      	cmp	r2, #41	@ 0x29
 8009ca0:	d157      	bne.n	8009d52 <__hexnan+0x132>
 8009ca2:	3102      	adds	r1, #2
 8009ca4:	f8ca 1000 	str.w	r1, [sl]
 8009ca8:	f1bb 0f00 	cmp.w	fp, #0
 8009cac:	d051      	beq.n	8009d52 <__hexnan+0x132>
 8009cae:	454c      	cmp	r4, r9
 8009cb0:	d206      	bcs.n	8009cc0 <__hexnan+0xa0>
 8009cb2:	2d07      	cmp	r5, #7
 8009cb4:	dc04      	bgt.n	8009cc0 <__hexnan+0xa0>
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4649      	mov	r1, r9
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ff8a 	bl	8009bd4 <L_shift>
 8009cc0:	4544      	cmp	r4, r8
 8009cc2:	d936      	bls.n	8009d32 <__hexnan+0x112>
 8009cc4:	f1a8 0204 	sub.w	r2, r8, #4
 8009cc8:	4623      	mov	r3, r4
 8009cca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cce:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cd2:	429f      	cmp	r7, r3
 8009cd4:	d2f9      	bcs.n	8009cca <__hexnan+0xaa>
 8009cd6:	1b3b      	subs	r3, r7, r4
 8009cd8:	f023 0303 	bic.w	r3, r3, #3
 8009cdc:	3304      	adds	r3, #4
 8009cde:	3401      	adds	r4, #1
 8009ce0:	3e03      	subs	r6, #3
 8009ce2:	42b4      	cmp	r4, r6
 8009ce4:	bf88      	it	hi
 8009ce6:	2304      	movhi	r3, #4
 8009ce8:	4443      	add	r3, r8
 8009cea:	2200      	movs	r2, #0
 8009cec:	f843 2b04 	str.w	r2, [r3], #4
 8009cf0:	429f      	cmp	r7, r3
 8009cf2:	d2fb      	bcs.n	8009cec <__hexnan+0xcc>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	b91b      	cbnz	r3, 8009d00 <__hexnan+0xe0>
 8009cf8:	4547      	cmp	r7, r8
 8009cfa:	d128      	bne.n	8009d4e <__hexnan+0x12e>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	2005      	movs	r0, #5
 8009d02:	b007      	add	sp, #28
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	3501      	adds	r5, #1
 8009d0a:	2d08      	cmp	r5, #8
 8009d0c:	f10b 0b01 	add.w	fp, fp, #1
 8009d10:	dd06      	ble.n	8009d20 <__hexnan+0x100>
 8009d12:	4544      	cmp	r4, r8
 8009d14:	d9c1      	bls.n	8009c9a <__hexnan+0x7a>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d1c:	2501      	movs	r5, #1
 8009d1e:	3c04      	subs	r4, #4
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	f000 000f 	and.w	r0, r0, #15
 8009d26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d2a:	6020      	str	r0, [r4, #0]
 8009d2c:	e7b5      	b.n	8009c9a <__hexnan+0x7a>
 8009d2e:	2508      	movs	r5, #8
 8009d30:	e7b3      	b.n	8009c9a <__hexnan+0x7a>
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0dd      	beq.n	8009cf4 <__hexnan+0xd4>
 8009d38:	f1c3 0320 	rsb	r3, r3, #32
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	40da      	lsrs	r2, r3
 8009d42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d46:	4013      	ands	r3, r2
 8009d48:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d4c:	e7d2      	b.n	8009cf4 <__hexnan+0xd4>
 8009d4e:	3f04      	subs	r7, #4
 8009d50:	e7d0      	b.n	8009cf4 <__hexnan+0xd4>
 8009d52:	2004      	movs	r0, #4
 8009d54:	e7d5      	b.n	8009d02 <__hexnan+0xe2>

08009d56 <__ascii_mbtowc>:
 8009d56:	b082      	sub	sp, #8
 8009d58:	b901      	cbnz	r1, 8009d5c <__ascii_mbtowc+0x6>
 8009d5a:	a901      	add	r1, sp, #4
 8009d5c:	b142      	cbz	r2, 8009d70 <__ascii_mbtowc+0x1a>
 8009d5e:	b14b      	cbz	r3, 8009d74 <__ascii_mbtowc+0x1e>
 8009d60:	7813      	ldrb	r3, [r2, #0]
 8009d62:	600b      	str	r3, [r1, #0]
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	1e10      	subs	r0, r2, #0
 8009d68:	bf18      	it	ne
 8009d6a:	2001      	movne	r0, #1
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr
 8009d70:	4610      	mov	r0, r2
 8009d72:	e7fb      	b.n	8009d6c <__ascii_mbtowc+0x16>
 8009d74:	f06f 0001 	mvn.w	r0, #1
 8009d78:	e7f8      	b.n	8009d6c <__ascii_mbtowc+0x16>

08009d7a <_realloc_r>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	4607      	mov	r7, r0
 8009d80:	4614      	mov	r4, r2
 8009d82:	460d      	mov	r5, r1
 8009d84:	b921      	cbnz	r1, 8009d90 <_realloc_r+0x16>
 8009d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	f7fd bc90 	b.w	80076b0 <_malloc_r>
 8009d90:	b92a      	cbnz	r2, 8009d9e <_realloc_r+0x24>
 8009d92:	f7fd fc19 	bl	80075c8 <_free_r>
 8009d96:	4625      	mov	r5, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9e:	f000 f8c4 	bl	8009f2a <_malloc_usable_size_r>
 8009da2:	4284      	cmp	r4, r0
 8009da4:	4606      	mov	r6, r0
 8009da6:	d802      	bhi.n	8009dae <_realloc_r+0x34>
 8009da8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dac:	d8f4      	bhi.n	8009d98 <_realloc_r+0x1e>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7fd fc7d 	bl	80076b0 <_malloc_r>
 8009db6:	4680      	mov	r8, r0
 8009db8:	b908      	cbnz	r0, 8009dbe <_realloc_r+0x44>
 8009dba:	4645      	mov	r5, r8
 8009dbc:	e7ec      	b.n	8009d98 <_realloc_r+0x1e>
 8009dbe:	42b4      	cmp	r4, r6
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	bf28      	it	cs
 8009dc6:	4632      	movcs	r2, r6
 8009dc8:	f7ff fc42 	bl	8009650 <memcpy>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7fd fbfa 	bl	80075c8 <_free_r>
 8009dd4:	e7f1      	b.n	8009dba <_realloc_r+0x40>

08009dd6 <__ascii_wctomb>:
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	b141      	cbz	r1, 8009dee <__ascii_wctomb+0x18>
 8009ddc:	2aff      	cmp	r2, #255	@ 0xff
 8009dde:	d904      	bls.n	8009dea <__ascii_wctomb+0x14>
 8009de0:	228a      	movs	r2, #138	@ 0x8a
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	4770      	bx	lr
 8009dea:	700a      	strb	r2, [r1, #0]
 8009dec:	2001      	movs	r0, #1
 8009dee:	4770      	bx	lr

08009df0 <fiprintf>:
 8009df0:	b40e      	push	{r1, r2, r3}
 8009df2:	b503      	push	{r0, r1, lr}
 8009df4:	4601      	mov	r1, r0
 8009df6:	ab03      	add	r3, sp, #12
 8009df8:	4805      	ldr	r0, [pc, #20]	@ (8009e10 <fiprintf+0x20>)
 8009dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfe:	6800      	ldr	r0, [r0, #0]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f7ff f991 	bl	8009128 <_vfiprintf_r>
 8009e06:	b002      	add	sp, #8
 8009e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e0c:	b003      	add	sp, #12
 8009e0e:	4770      	bx	lr
 8009e10:	20000018 	.word	0x20000018

08009e14 <__swhatbuf_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	460c      	mov	r4, r1
 8009e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	b096      	sub	sp, #88	@ 0x58
 8009e20:	4615      	mov	r5, r2
 8009e22:	461e      	mov	r6, r3
 8009e24:	da0d      	bge.n	8009e42 <__swhatbuf_r+0x2e>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e2c:	f04f 0100 	mov.w	r1, #0
 8009e30:	bf14      	ite	ne
 8009e32:	2340      	movne	r3, #64	@ 0x40
 8009e34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e38:	2000      	movs	r0, #0
 8009e3a:	6031      	str	r1, [r6, #0]
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	b016      	add	sp, #88	@ 0x58
 8009e40:	bd70      	pop	{r4, r5, r6, pc}
 8009e42:	466a      	mov	r2, sp
 8009e44:	f000 f848 	bl	8009ed8 <_fstat_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	dbec      	blt.n	8009e26 <__swhatbuf_r+0x12>
 8009e4c:	9901      	ldr	r1, [sp, #4]
 8009e4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e56:	4259      	negs	r1, r3
 8009e58:	4159      	adcs	r1, r3
 8009e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e5e:	e7eb      	b.n	8009e38 <__swhatbuf_r+0x24>

08009e60 <__smakebuf_r>:
 8009e60:	898b      	ldrh	r3, [r1, #12]
 8009e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e64:	079d      	lsls	r5, r3, #30
 8009e66:	4606      	mov	r6, r0
 8009e68:	460c      	mov	r4, r1
 8009e6a:	d507      	bpl.n	8009e7c <__smakebuf_r+0x1c>
 8009e6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	2301      	movs	r3, #1
 8009e76:	6163      	str	r3, [r4, #20]
 8009e78:	b003      	add	sp, #12
 8009e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e7c:	ab01      	add	r3, sp, #4
 8009e7e:	466a      	mov	r2, sp
 8009e80:	f7ff ffc8 	bl	8009e14 <__swhatbuf_r>
 8009e84:	9f00      	ldr	r7, [sp, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f7fd fc10 	bl	80076b0 <_malloc_r>
 8009e90:	b948      	cbnz	r0, 8009ea6 <__smakebuf_r+0x46>
 8009e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e96:	059a      	lsls	r2, r3, #22
 8009e98:	d4ee      	bmi.n	8009e78 <__smakebuf_r+0x18>
 8009e9a:	f023 0303 	bic.w	r3, r3, #3
 8009e9e:	f043 0302 	orr.w	r3, r3, #2
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	e7e2      	b.n	8009e6c <__smakebuf_r+0xc>
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	6020      	str	r0, [r4, #0]
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009eb6:	b15b      	cbz	r3, 8009ed0 <__smakebuf_r+0x70>
 8009eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f000 f81d 	bl	8009efc <_isatty_r>
 8009ec2:	b128      	cbz	r0, 8009ed0 <__smakebuf_r+0x70>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f023 0303 	bic.w	r3, r3, #3
 8009eca:	f043 0301 	orr.w	r3, r3, #1
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	431d      	orrs	r5, r3
 8009ed4:	81a5      	strh	r5, [r4, #12]
 8009ed6:	e7cf      	b.n	8009e78 <__smakebuf_r+0x18>

08009ed8 <_fstat_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	@ (8009ef8 <_fstat_r+0x20>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f7f8 fb77 	bl	80025d8 <_fstat>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d102      	bne.n	8009ef4 <_fstat_r+0x1c>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	b103      	cbz	r3, 8009ef4 <_fstat_r+0x1c>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	2000048c 	.word	0x2000048c

08009efc <_isatty_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	@ (8009f18 <_isatty_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f8 fb76 	bl	80025f8 <_isatty>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_isatty_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_isatty_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	2000048c 	.word	0x2000048c

08009f1c <abort>:
 8009f1c:	b508      	push	{r3, lr}
 8009f1e:	2006      	movs	r0, #6
 8009f20:	f000 f834 	bl	8009f8c <raise>
 8009f24:	2001      	movs	r0, #1
 8009f26:	f7f8 fb07 	bl	8002538 <_exit>

08009f2a <_malloc_usable_size_r>:
 8009f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f2e:	1f18      	subs	r0, r3, #4
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bfbc      	itt	lt
 8009f34:	580b      	ldrlt	r3, [r1, r0]
 8009f36:	18c0      	addlt	r0, r0, r3
 8009f38:	4770      	bx	lr

08009f3a <_raise_r>:
 8009f3a:	291f      	cmp	r1, #31
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4605      	mov	r5, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	d904      	bls.n	8009f4e <_raise_r+0x14>
 8009f44:	2316      	movs	r3, #22
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f50:	b112      	cbz	r2, 8009f58 <_raise_r+0x1e>
 8009f52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f56:	b94b      	cbnz	r3, 8009f6c <_raise_r+0x32>
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f831 	bl	8009fc0 <_getpid_r>
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4601      	mov	r1, r0
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f000 b818 	b.w	8009f9c <_kill_r>
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <_raise_r+0x4c>
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	d103      	bne.n	8009f7c <_raise_r+0x42>
 8009f74:	2316      	movs	r3, #22
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7e7      	b.n	8009f4c <_raise_r+0x12>
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f82:	4620      	mov	r0, r4
 8009f84:	4798      	blx	r3
 8009f86:	2000      	movs	r0, #0
 8009f88:	e7e0      	b.n	8009f4c <_raise_r+0x12>
	...

08009f8c <raise>:
 8009f8c:	4b02      	ldr	r3, [pc, #8]	@ (8009f98 <raise+0xc>)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f7ff bfd2 	b.w	8009f3a <_raise_r>
 8009f96:	bf00      	nop
 8009f98:	20000018 	.word	0x20000018

08009f9c <_kill_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	@ (8009fbc <_kill_r+0x20>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f8 fab5 	bl	8002518 <_kill>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_kill_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_kill_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	2000048c 	.word	0x2000048c

08009fc0 <_getpid_r>:
 8009fc0:	f7f8 baa2 	b.w	8002508 <_getpid>

08009fc4 <_init>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr

08009fd0 <_fini>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr
