
Group3HSIW14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009284  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001244  08009428  08009428  0000a428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a66c  0800a66c  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a66c  0800a66c  0000b66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a674  0800a674  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a674  0800a674  0000b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a678  0800a678  0000b678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a67c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  0800a850  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800a850  0000c444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e6  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a97  00000000  00000000  0001aaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001d588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093c  00000000  00000000  0001e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a9  00000000  00000000  0001eafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010aed  00000000  00000000  000373a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a7e  00000000  00000000  00047e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  000de954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800940c 	.word	0x0800940c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800940c 	.word	0x0800940c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <DWT_Delay_Init+0x58>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <DWT_Delay_Init+0x58>)
 800103a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800103e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <DWT_Delay_Init+0x58>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <DWT_Delay_Init+0x58>)
 8001046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800104a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <DWT_Delay_Init+0x5c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <DWT_Delay_Init+0x5c>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <DWT_Delay_Init+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <DWT_Delay_Init+0x5c>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <DWT_Delay_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800106a:	bf00      	nop
     __ASM volatile ("NOP");
 800106c:	bf00      	nop
  __ASM volatile ("NOP");
 800106e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <DWT_Delay_Init+0x5c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001078:	2300      	movs	r3, #0
 800107a:	e000      	b.n	800107e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800107c:	2301      	movs	r3, #1
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000edf0 	.word	0xe000edf0
 800108c:	e0001000 	.word	0xe0001000

08001090 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <delay+0x40>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800109e:	f002 fe85 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <delay+0x44>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80010b4:	bf00      	nop
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <delay+0x40>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad2      	subs	r2, r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3f8      	bcc.n	80010b6 <delay+0x26>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e0001000 	.word	0xe0001000
 80010d4:	431bde83 	.word	0x431bde83

080010d8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f002 f836 	bl	8003178 <HAL_GPIO_Init>
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f002 f818 	bl	8003178 <HAL_GPIO_Init>
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <DHT_Start>:


void DHT_Start (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001154:	f7ff ff6c 	bl	8001030 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001158:	2102      	movs	r1, #2
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <DHT_Start+0x40>)
 800115c:	f7ff ffbc 	bl	80010d8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	480a      	ldr	r0, [pc, #40]	@ (8001190 <DHT_Start+0x40>)
 8001166:	f002 f9a3 	bl	80034b0 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 800116a:	f244 6050 	movw	r0, #18000	@ 0x4650
 800116e:	f7ff ff8f 	bl	8001090 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001172:	2201      	movs	r2, #1
 8001174:	2102      	movs	r1, #2
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <DHT_Start+0x40>)
 8001178:	f002 f99a 	bl	80034b0 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 800117c:	2014      	movs	r0, #20
 800117e:	f7ff ff87 	bl	8001090 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001182:	2102      	movs	r1, #2
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <DHT_Start+0x40>)
 8001186:	f7ff ffc5 	bl	8001114 <Set_Pin_Input>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800119e:	2028      	movs	r0, #40	@ 0x28
 80011a0:	f7ff ff76 	bl	8001090 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80011a4:	2102      	movs	r1, #2
 80011a6:	4811      	ldr	r0, [pc, #68]	@ (80011ec <DHT_Check_Response+0x58>)
 80011a8:	f002 f96a 	bl	8003480 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80011b2:	2050      	movs	r0, #80	@ 0x50
 80011b4:	f7ff ff6c 	bl	8001090 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80011b8:	2102      	movs	r1, #2
 80011ba:	480c      	ldr	r0, [pc, #48]	@ (80011ec <DHT_Check_Response+0x58>)
 80011bc:	f002 f960 	bl	8003480 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <DHT_Check_Response+0x38>
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e001      	b.n	80011d0 <DHT_Check_Response+0x3c>
		else Response = -1;
 80011cc:	23ff      	movs	r3, #255	@ 0xff
 80011ce:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80011d0:	bf00      	nop
 80011d2:	2102      	movs	r1, #2
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <DHT_Check_Response+0x58>)
 80011d6:	f002 f953 	bl	8003480 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f8      	bne.n	80011d2 <DHT_Check_Response+0x3e>

	return Response;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000

080011f0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	71bb      	strb	r3, [r7, #6]
 80011fa:	e037      	b.n	800126c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80011fc:	bf00      	nop
 80011fe:	2102      	movs	r1, #2
 8001200:	481e      	ldr	r0, [pc, #120]	@ (800127c <DHT_Read+0x8c>)
 8001202:	f002 f93d 	bl	8003480 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f8      	beq.n	80011fe <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f7ff ff3f 	bl	8001090 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001212:	2102      	movs	r1, #2
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <DHT_Read+0x8c>)
 8001216:	f002 f933 	bl	8003480 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10e      	bne.n	800123e <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2201      	movs	r2, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	b25b      	sxtb	r3, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	4013      	ands	r3, r2
 8001238:	b25b      	sxtb	r3, r3
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	e00b      	b.n	8001256 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	f1c3 0307 	rsb	r3, r3, #7
 8001244:	2201      	movs	r2, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	b25a      	sxtb	r2, r3
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4313      	orrs	r3, r2
 8001252:	b25b      	sxtb	r3, r3
 8001254:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001256:	bf00      	nop
 8001258:	2102      	movs	r1, #2
 800125a:	4808      	ldr	r0, [pc, #32]	@ (800127c <DHT_Read+0x8c>)
 800125c:	f002 f910 	bl	8003480 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f8      	bne.n	8001258 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	3301      	adds	r3, #1
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b07      	cmp	r3, #7
 8001270:	d9c4      	bls.n	80011fc <DHT_Read+0xc>
	}
	return i;
 8001272:	79fb      	ldrb	r3, [r7, #7]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020000 	.word	0x40020000

08001280 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001288:	f7ff ff62 	bl	8001150 <DHT_Start>
	Presence = DHT_Check_Response ();
 800128c:	f7ff ff82 	bl	8001194 <DHT_Check_Response>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <DHT_GetData+0xa4>)
 8001296:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001298:	f7ff ffaa 	bl	80011f0 <DHT_Read>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <DHT_GetData+0xa8>)
 80012a2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80012a4:	f7ff ffa4 	bl	80011f0 <DHT_Read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <DHT_GetData+0xac>)
 80012ae:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80012b0:	f7ff ff9e 	bl	80011f0 <DHT_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <DHT_GetData+0xb0>)
 80012ba:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80012bc:	f7ff ff98 	bl	80011f0 <DHT_Read>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <DHT_GetData+0xb4>)
 80012c6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80012c8:	f7ff ff92 	bl	80011f0 <DHT_Read>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <DHT_GetData+0xb8>)
 80012d2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <DHT_GetData+0xb8>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <DHT_GetData+0xa8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <DHT_GetData+0xac>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <DHT_GetData+0xb0>)
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <DHT_GetData+0xb4>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d111      	bne.n	800131a <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <DHT_GetData+0xb0>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <DHT_GetData+0xa8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001f6 	.word	0x200001f6
 8001328:	200001f0 	.word	0x200001f0
 800132c:	200001f1 	.word	0x200001f1
 8001330:	200001f2 	.word	0x200001f2
 8001334:	200001f3 	.word	0x200001f3
 8001338:	200001f4 	.word	0x200001f4

0800133c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134e:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001350:	4a2f      	ldr	r2, [pc, #188]	@ (8001410 <MX_ADC1_Init+0xd4>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001356:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800135a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <MX_ADC1_Init+0xd0>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001364:	2201      	movs	r2, #1
 8001366:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <MX_ADC1_Init+0xd0>)
 800136a:	2201      	movs	r2, #1
 800136c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136e:	4b27      	ldr	r3, [pc, #156]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_ADC1_Init+0xd0>)
 800137e:	4a25      	ldr	r2, [pc, #148]	@ (8001414 <MX_ADC1_Init+0xd8>)
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_ADC1_Init+0xd0>)
 800138a:	2203      	movs	r2, #3
 800138c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_ADC1_Init+0xd0>)
 8001398:	2201      	movs	r2, #1
 800139a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139c:	481b      	ldr	r0, [pc, #108]	@ (800140c <MX_ADC1_Init+0xd0>)
 800139e:	f001 f8af 	bl	8002500 <HAL_ADC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a8:	f000 fb52 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ac:	230a      	movs	r3, #10
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <MX_ADC1_Init+0xd0>)
 80013be:	f001 fb91 	bl	8002ae4 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c8:	f000 fb42 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013cc:	230b      	movs	r3, #11
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_ADC1_Init+0xd0>)
 80013da:	f001 fb83 	bl	8002ae4 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013e4:	f000 fb34 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80013e8:	230c      	movs	r3, #12
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013ec:	2303      	movs	r3, #3
 80013ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_ADC1_Init+0xd0>)
 80013f6:	f001 fb75 	bl	8002ae4 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001400:	f000 fb26 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200001f8 	.word	0x200001f8
 8001410:	40012000 	.word	0x40012000
 8001414:	0f000001 	.word	0x0f000001

08001418 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <HAL_ADC_MspInit+0x8c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12f      	bne.n	800149a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6453      	str	r3, [r2, #68]	@ 0x44
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_ADC_MspInit+0x90>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ANALOG_IN_1_Pin|ANALOG_IN_2_Pin|ANALOG_IN_3_Pin;
 8001472:	2307      	movs	r3, #7
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <HAL_ADC_MspInit+0x94>)
 8001486:	f001 fe77 	bl	8003178 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2012      	movs	r0, #18
 8001490:	f001 fe3b 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001494:	2012      	movs	r0, #18
 8001496:	f001 fe54 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012000 	.word	0x40012000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800

080014b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a42      	ldr	r2, [pc, #264]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a3b      	ldr	r2, [pc, #236]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <MX_GPIO_Init+0x128>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <MX_GPIO_Init+0x128>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <MX_GPIO_Init+0x128>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	4828      	ldr	r0, [pc, #160]	@ (80015dc <MX_GPIO_Init+0x12c>)
 800153c:	f001 ffb8 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2107      	movs	r1, #7
 8001544:	4826      	ldr	r0, [pc, #152]	@ (80015e0 <MX_GPIO_Init+0x130>)
 8001546:	f001 ffb3 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B0_Pin */
  GPIO_InitStruct.Pin = B0_Pin;
 800154a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001550:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B0_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4820      	ldr	r0, [pc, #128]	@ (80015e4 <MX_GPIO_Init+0x134>)
 8001562:	f001 fe09 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001566:	2302      	movs	r3, #2
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4818      	ldr	r0, [pc, #96]	@ (80015dc <MX_GPIO_Init+0x12c>)
 800157a:	f001 fdfd 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : ANALOG_OUT_Pin */
  GPIO_InitStruct.Pin = ANALOG_OUT_Pin;
 800157e:	2310      	movs	r3, #16
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001582:	2303      	movs	r3, #3
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ANALOG_OUT_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4812      	ldr	r0, [pc, #72]	@ (80015dc <MX_GPIO_Init+0x12c>)
 8001592:	f001 fdf1 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8001596:	2320      	movs	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	@ (80015dc <MX_GPIO_Init+0x12c>)
 80015ae:	f001 fde3 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin|OLED_CS_Pin;
 80015b2:	2307      	movs	r3, #7
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_GPIO_Init+0x130>)
 80015ca:	f001 fdd5 	bl	8003178 <HAL_GPIO_Init>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800

080015e8 <printMenu>:
 *    for each option. Called when user selects an option amongst the
 *    ones below, or at startup.
 * PARAMETERS : void
 * RETURNS : void
 */
void printMenu (void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	printf("Choose a module to test:\n\r");
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <printMenu+0x28>)
 80015ee:	f004 fa83 	bl	8005af8 <iprintf>
	printf("0: Show menu again\n\r");
 80015f2:	4808      	ldr	r0, [pc, #32]	@ (8001614 <printMenu+0x2c>)
 80015f4:	f004 fa80 	bl	8005af8 <iprintf>
	printf("1: DHT11\n\r");
 80015f8:	4807      	ldr	r0, [pc, #28]	@ (8001618 <printMenu+0x30>)
 80015fa:	f004 fa7d 	bl	8005af8 <iprintf>
	printf("2: OLED (SPI2)\n\r");
 80015fe:	4807      	ldr	r0, [pc, #28]	@ (800161c <printMenu+0x34>)
 8001600:	f004 fa7a 	bl	8005af8 <iprintf>
	printf("3: Potentiometer (ADC1 CH1)\n\r");
 8001604:	4806      	ldr	r0, [pc, #24]	@ (8001620 <printMenu+0x38>)
 8001606:	f004 fa77 	bl	8005af8 <iprintf>
	return;
 800160a:	bf00      	nop
} // end of func
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08009428 	.word	0x08009428
 8001614:	08009444 	.word	0x08009444
 8001618:	0800945c 	.word	0x0800945c
 800161c:	08009468 	.word	0x08009468
 8001620:	0800947c 	.word	0x0800947c

08001624 <runOledTest>:
 * FUNCTION : runOledTest
 * DESCRIPTION : Display a fixed string on the OLED
 * PARAMETERS : void
 * RETURNS : void
*/
void runOledTest (void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af02      	add	r7, sp, #8
	// Short description of the test
	printf("=== OLED Display Test ===\n\r");
 800162a:	480a      	ldr	r0, [pc, #40]	@ (8001654 <runOledTest+0x30>)
 800162c:	f004 fa64 	bl	8005af8 <iprintf>
	printf("This test displays a fixed message on the OLED screen.\n\r");
 8001630:	4809      	ldr	r0, [pc, #36]	@ (8001658 <runOledTest+0x34>)
 8001632:	f004 fa61 	bl	8005af8 <iprintf>

	const char *testString = {"Monica's OLED!"}; // the string
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <runOledTest+0x38>)
 8001638:	607b      	str	r3, [r7, #4]
	ssd1331_display_string(0, 0, testString, FONT_1206, WHITE); // don't need to think about string buffer here
 800163a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	230c      	movs	r3, #12
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	2100      	movs	r1, #0
 8001646:	2000      	movs	r0, #0
 8001648:	f000 fbaa 	bl	8001da0 <ssd1331_display_string>
} // end of func
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0800949c 	.word	0x0800949c
 8001658:	080094b8 	.word	0x080094b8
 800165c:	080094f4 	.word	0x080094f4

08001660 <runAdcTest>:
 *    and that the ADC is functioning. Values will be printed continuously.
 *    Type 'q' to quit the test and return to the main menu.
 * PARAMETERS : void
 * RETURNS : void
 */
void runAdcTest (void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	// Short description of the test:
	printf("=== ADC Input Test ===\n\r");
 8001666:	4827      	ldr	r0, [pc, #156]	@ (8001704 <runAdcTest+0xa4>)
 8001668:	f004 fa46 	bl	8005af8 <iprintf>
	printf("This test reads analog input from a potentiometer via ADC1.\n\r");
 800166c:	4826      	ldr	r0, [pc, #152]	@ (8001708 <runAdcTest+0xa8>)
 800166e:	f004 fa43 	bl	8005af8 <iprintf>
	printf("Ensure the potentiometer is connected to one of the ADC pins.\n\r");
 8001672:	4826      	ldr	r0, [pc, #152]	@ (800170c <runAdcTest+0xac>)
 8001674:	f004 fa40 	bl	8005af8 <iprintf>
	printf("Type 'Y' to continue or any other key to cancel...\n\r");
 8001678:	4825      	ldr	r0, [pc, #148]	@ (8001710 <runAdcTest+0xb0>)
 800167a:	f004 fa3d 	bl	8005af8 <iprintf>

	// Confirmation prompt:
	char confirm = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	71fb      	strb	r3, [r7, #7]
	while (confirm == 0) {
 8001682:	e003      	b.n	800168c <runAdcTest+0x2c>
		confirm = GetCharFromUART2(); // wait for user input via VCP
 8001684:	f000 fe52 	bl	800232c <GetCharFromUART2>
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
	while (confirm == 0) {
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f8      	beq.n	8001684 <runAdcTest+0x24>
	}

	if (confirm != 'Y' && confirm != 'y') {
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b59      	cmp	r3, #89	@ 0x59
 8001696:	d006      	beq.n	80016a6 <runAdcTest+0x46>
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b79      	cmp	r3, #121	@ 0x79
 800169c:	d003      	beq.n	80016a6 <runAdcTest+0x46>
		printf("Test aborted. Returning to main menu...\n\r");
 800169e:	481d      	ldr	r0, [pc, #116]	@ (8001714 <runAdcTest+0xb4>)
 80016a0:	f004 fa2a 	bl	8005af8 <iprintf>
		return;
 80016a4:	e02a      	b.n	80016fc <runAdcTest+0x9c>
	}

	// Begin ADC read loop
	printf("ADC test started. Type 'q' to quit.\n\r");
 80016a6:	481c      	ldr	r0, [pc, #112]	@ (8001718 <runAdcTest+0xb8>)
 80016a8:	f004 fa26 	bl	8005af8 <iprintf>
	while (1) {
		char exitChar = GetCharFromUART2(); // allow exit via VCP
 80016ac:	f000 fe3e 	bl	800232c <GetCharFromUART2>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71bb      	strb	r3, [r7, #6]
		if (exitChar == 'q' || exitChar == 'Q') {
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b71      	cmp	r3, #113	@ 0x71
 80016b8:	d002      	beq.n	80016c0 <runAdcTest+0x60>
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2b51      	cmp	r3, #81	@ 0x51
 80016be:	d104      	bne.n	80016ca <runAdcTest+0x6a>
			printf("Quitting ADC test. Returning to main menu...\n\r");
 80016c0:	4816      	ldr	r0, [pc, #88]	@ (800171c <runAdcTest+0xbc>)
 80016c2:	f004 fa19 	bl	8005af8 <iprintf>
			break;
 80016c6:	bf00      	nop
		HAL_ADC_Stop(&hadc1);

		HAL_Delay(200);
	}

	return;
 80016c8:	e018      	b.n	80016fc <runAdcTest+0x9c>
		HAL_ADC_Start(&hadc1);
 80016ca:	4815      	ldr	r0, [pc, #84]	@ (8001720 <runAdcTest+0xc0>)
 80016cc:	f000 ff5c 	bl	8002588 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80016d0:	210a      	movs	r1, #10
 80016d2:	4813      	ldr	r0, [pc, #76]	@ (8001720 <runAdcTest+0xc0>)
 80016d4:	f001 f83f 	bl	8002756 <HAL_ADC_PollForConversion>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d107      	bne.n	80016ee <runAdcTest+0x8e>
			uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80016de:	4810      	ldr	r0, [pc, #64]	@ (8001720 <runAdcTest+0xc0>)
 80016e0:	f001 f9d4 	bl	8002a8c <HAL_ADC_GetValue>
 80016e4:	6038      	str	r0, [r7, #0]
			printf("ADC Value: %lu\n\r", adcValue);
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	480e      	ldr	r0, [pc, #56]	@ (8001724 <runAdcTest+0xc4>)
 80016ea:	f004 fa05 	bl	8005af8 <iprintf>
		HAL_ADC_Stop(&hadc1);
 80016ee:	480c      	ldr	r0, [pc, #48]	@ (8001720 <runAdcTest+0xc0>)
 80016f0:	f000 fffe 	bl	80026f0 <HAL_ADC_Stop>
		HAL_Delay(200);
 80016f4:	20c8      	movs	r0, #200	@ 0xc8
 80016f6:	f000 fedf 	bl	80024b8 <HAL_Delay>
	while (1) {
 80016fa:	e7d7      	b.n	80016ac <runAdcTest+0x4c>
} // end of func
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	08009504 	.word	0x08009504
 8001708:	08009520 	.word	0x08009520
 800170c:	08009560 	.word	0x08009560
 8001710:	080095a0 	.word	0x080095a0
 8001714:	080095d8 	.word	0x080095d8
 8001718:	08009604 	.word	0x08009604
 800171c:	0800962c 	.word	0x0800962c
 8001720:	200001f8 	.word	0x200001f8
 8001724:	0800965c 	.word	0x0800965c

08001728 <runDhtTest>:
 *    Read analog input from DHT11 and display the value on the terminal & OLED.
 *    Type 'q' to quit the test and return to the main menu.
 * PARAMETERS : void
 * RETURNS : void
 */
void runDhtTest (void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	@ 0x38
 800172c:	af02      	add	r7, sp, #8
	printf("=== DHT11 Sensor Test ===\n\r");
 800172e:	4845      	ldr	r0, [pc, #276]	@ (8001844 <runDhtTest+0x11c>)
 8001730:	f004 f9e2 	bl	8005af8 <iprintf>
	printf("This test reads temperature and humidity from the DHT11 sensor.\n\r");
 8001734:	4844      	ldr	r0, [pc, #272]	@ (8001848 <runDhtTest+0x120>)
 8001736:	f004 f9df 	bl	8005af8 <iprintf>
	printf("Type 'q' to quit.\n\r");
 800173a:	4844      	ldr	r0, [pc, #272]	@ (800184c <runDhtTest+0x124>)
 800173c:	f004 f9dc 	bl	8005af8 <iprintf>

	char tempStr[20] = {0}; // format output to readable text (OLED prefers string) & init 1st byte to \0
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
	char humStr[20] = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

	while (1) {
		char exitChar = GetCharFromUART2();
 800175e:	f000 fde5 	bl	800232c <GetCharFromUART2>
 8001762:	4603      	mov	r3, r0
 8001764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (exitChar == 'q' || exitChar == 'Q') {
 8001768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800176c:	2b71      	cmp	r3, #113	@ 0x71
 800176e:	d003      	beq.n	8001778 <runDhtTest+0x50>
 8001770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001774:	2b51      	cmp	r3, #81	@ 0x51
 8001776:	d103      	bne.n	8001780 <runDhtTest+0x58>
			printf("Quitting DHT11 test. Returning to main menu...\n\r");
 8001778:	4835      	ldr	r0, [pc, #212]	@ (8001850 <runDhtTest+0x128>)
 800177a:	f004 f9bd 	bl	8005af8 <iprintf>
			break;
 800177e:	e05d      	b.n	800183c <runDhtTest+0x114>
		}

		DHT_GetData(&DHT11_Data);
 8001780:	4834      	ldr	r0, [pc, #208]	@ (8001854 <runDhtTest+0x12c>)
 8001782:	f7ff fd7d 	bl	8001280 <DHT_GetData>
		Temperature = DHT11_Data.Temperature;
 8001786:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <runDhtTest+0x12c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	@ (8001858 <runDhtTest+0x130>)
 800178c:	6013      	str	r3, [r2, #0]
		Humidity = DHT11_Data.Humidity;
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <runDhtTest+0x12c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a32      	ldr	r2, [pc, #200]	@ (800185c <runDhtTest+0x134>)
 8001794:	6013      	str	r3, [r2, #0]

//		printf("T: %d C, H: %d %%\n\r", (int)Temperature, (int)Humidity);

		snprintf(tempStr, sizeof(tempStr), "Temp: %d C", (int)Temperature); // cast to int instead of (uint16_t) for simplicity
 8001796:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <runDhtTest+0x130>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a0:	f107 0018 	add.w	r0, r7, #24
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <runDhtTest+0x138>)
 80017aa:	2114      	movs	r1, #20
 80017ac:	f004 f9b6 	bl	8005b1c <sniprintf>
		snprintf(humStr, sizeof(humStr), "Humidity: %d %%", (int)Humidity); // cast to int instead of (uint16_t) for simplicity
 80017b0:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <runDhtTest+0x134>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ba:	1d38      	adds	r0, r7, #4
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <runDhtTest+0x13c>)
 80017c2:	2114      	movs	r1, #20
 80017c4:	f004 f9aa 	bl	8005b1c <sniprintf>

		printf("T: %s, H: %s\n\r", tempStr, humStr);
 80017c8:	1d3a      	adds	r2, r7, #4
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4825      	ldr	r0, [pc, #148]	@ (8001868 <runDhtTest+0x140>)
 80017d2:	f004 f991 	bl	8005af8 <iprintf>

		// Clear top half of screen by drawing a black rectangle:
		ssd1331_fill_rect(0, 0, 96, 32, BLACK); // clear top half of screen
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2320      	movs	r3, #32
 80017dc:	2260      	movs	r2, #96	@ 0x60
 80017de:	2100      	movs	r1, #0
 80017e0:	2000      	movs	r0, #0
 80017e2:	f000 fa29 	bl	8001c38 <ssd1331_fill_rect>
		ssd1331_display_string(0, 0, tempStr, FONT_1206, WHITE);
 80017e6:	f107 0218 	add.w	r2, r7, #24
 80017ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	230c      	movs	r3, #12
 80017f2:	2100      	movs	r1, #0
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 fad3 	bl	8001da0 <ssd1331_display_string>
		ssd1331_display_string(0, 16, humStr, FONT_1206, WHITE);
 80017fa:	1d3a      	adds	r2, r7, #4
 80017fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	230c      	movs	r3, #12
 8001804:	2110      	movs	r1, #16
 8001806:	2000      	movs	r0, #0
 8001808:	f000 faca 	bl	8001da0 <ssd1331_display_string>


		// Display values
		ssd1331_display_string(0, 0, tempStr, FONT_1206, WHITE);
 800180c:	f107 0218 	add.w	r2, r7, #24
 8001810:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	230c      	movs	r3, #12
 8001818:	2100      	movs	r1, #0
 800181a:	2000      	movs	r0, #0
 800181c:	f000 fac0 	bl	8001da0 <ssd1331_display_string>
		ssd1331_display_string(0, 16, humStr, FONT_1206, WHITE);
 8001820:	1d3a      	adds	r2, r7, #4
 8001822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	230c      	movs	r3, #12
 800182a:	2110      	movs	r1, #16
 800182c:	2000      	movs	r0, #0
 800182e:	f000 fab7 	bl	8001da0 <ssd1331_display_string>

		HAL_Delay(1000); // 1 second delay
 8001832:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001836:	f000 fe3f 	bl	80024b8 <HAL_Delay>
	while (1) {
 800183a:	e790      	b.n	800175e <runDhtTest+0x36>
	}

	return;
 800183c:	bf00      	nop
} // end of func
 800183e:	3730      	adds	r7, #48	@ 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	08009670 	.word	0x08009670
 8001848:	0800968c 	.word	0x0800968c
 800184c:	080096d0 	.word	0x080096d0
 8001850:	080096e4 	.word	0x080096e4
 8001854:	20000240 	.word	0x20000240
 8001858:	20000248 	.word	0x20000248
 800185c:	2000024c 	.word	0x2000024c
 8001860:	08009718 	.word	0x08009718
 8001864:	08009724 	.word	0x08009724
 8001868:	08009734 	.word	0x08009734

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fdaf 	bl	80023d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f853 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f7ff fe19 	bl	80014b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800187e:	f000 fce3 	bl	8002248 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001882:	f7ff fd5b 	bl	800133c <MX_ADC1_Init>
  MX_SPI2_Init();
 8001886:	f000 f8e9 	bl	8001a5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\rGroup 3's Demo:\n\r===\n\r");
 800188a:	4822      	ldr	r0, [pc, #136]	@ (8001914 <main+0xa8>)
 800188c:	f004 f934 	bl	8005af8 <iprintf>

  // Init OLED:
  ssd1331_init();
 8001890:	f000 faf4 	bl	8001e7c <ssd1331_init>


  // Declare vars:
  uint8_t showMenu = 1; // flag that when set will output the menu prompt
 8001894:	2301      	movs	r3, #1
 8001896:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  runDhtTest();
	  // If menu hasn't been printed:
	  if(showMenu != 0)	{	// meaning menu flag isn't 0
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <main+0x3a>
		  printMenu();
 800189e:	f7ff fea3 	bl	80015e8 <printMenu>
		  showMenu = 0;		// reset flag
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
	  	  }

	  // Show user input:
	  char userInput = GetCharFromUART2(); // using VCP here to avoid module failure
 80018a6:	f000 fd41 	bl	800232c <GetCharFromUART2>
 80018aa:	4603      	mov	r3, r0
 80018ac:	71bb      	strb	r3, [r7, #6]
										  /* this declaration needs to be here to restrict
										   * its scope only to this loop */
	  if (userInput != 0) {
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <main+0x52>
		  printf("You entered: %c\n\r", userInput);
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4817      	ldr	r0, [pc, #92]	@ (8001918 <main+0xac>)
 80018ba:	f004 f91d 	bl	8005af8 <iprintf>
	  }

	  // Handle the menu input:
	  switch (userInput) {
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d025      	beq.n	8001910 <main+0xa4>
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db1d      	blt.n	8001904 <main+0x98>
 80018c8:	2b33      	cmp	r3, #51	@ 0x33
 80018ca:	dc1b      	bgt.n	8001904 <main+0x98>
 80018cc:	2b30      	cmp	r3, #48	@ 0x30
 80018ce:	db19      	blt.n	8001904 <main+0x98>
 80018d0:	3b30      	subs	r3, #48	@ 0x30
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d816      	bhi.n	8001904 <main+0x98>
 80018d6:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <main+0x70>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f3 	.word	0x080018f3
 80018e4:	080018f9 	.word	0x080018f9
 80018e8:	080018ff 	.word	0x080018ff
	  	  case 0: // (note this is 0 not '0') Nothing received from GetCharFromUART2()
	  		  break;

	  	  case '0': // show menu again
	  		  showMenu = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	71fb      	strb	r3, [r7, #7]
	  		  break;
 80018f0:	e00f      	b.n	8001912 <main+0xa6>

	  	  case '1': // test DHT11 measurements
	  		  runDhtTest();
 80018f2:	f7ff ff19 	bl	8001728 <runDhtTest>
	  		  break;
 80018f6:	e00c      	b.n	8001912 <main+0xa6>

	  	  case '2': // test OLED
	  		  runOledTest();
 80018f8:	f7ff fe94 	bl	8001624 <runOledTest>
	  		  break;
 80018fc:	e009      	b.n	8001912 <main+0xa6>

	  	  case '3': // test ADC
	  		  runAdcTest();
 80018fe:	f7ff feaf 	bl	8001660 <runAdcTest>
	  		  break;
 8001902:	e006      	b.n	8001912 <main+0xa6>

	  	  default:
	  		  printf("ERROR: invalid menu option!\n\rShowing menu again...\n\r");
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <main+0xb0>)
 8001906:	f004 f8f7 	bl	8005af8 <iprintf>
	  		  showMenu = 1; // show menu again
 800190a:	2301      	movs	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]
	  		  break;
 800190e:	e000      	b.n	8001912 <main+0xa6>
	  		  break;
 8001910:	bf00      	nop
  {
 8001912:	e7c1      	b.n	8001898 <main+0x2c>
 8001914:	08009744 	.word	0x08009744
 8001918:	08009760 	.word	0x08009760
 800191c:	08009774 	.word	0x08009774

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	@ 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2230      	movs	r2, #48	@ 0x30
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f004 f98f 	bl	8005c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <SystemClock_Config+0xc8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a26      	ldr	r2, [pc, #152]	@ (80019e8 <SystemClock_Config+0xc8>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <SystemClock_Config+0xc8>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <SystemClock_Config+0xcc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a20      	ldr	r2, [pc, #128]	@ (80019ec <SystemClock_Config+0xcc>)
 800196a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <SystemClock_Config+0xcc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197c:	2302      	movs	r3, #2
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001980:	2301      	movs	r3, #1
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001984:	2310      	movs	r3, #16
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001988:	2302      	movs	r3, #2
 800198a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001990:	2308      	movs	r3, #8
 8001992:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001994:	2364      	movs	r3, #100	@ 0x64
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001998:	2302      	movs	r3, #2
 800199a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800199c:	2304      	movs	r3, #4
 800199e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fd9d 	bl	80034e4 <HAL_RCC_OscConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019b0:	f000 f84e 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	230f      	movs	r3, #15
 80019b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b8:	2302      	movs	r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2103      	movs	r1, #3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 ffff 	bl	80039d4 <HAL_RCC_ClockConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019dc:	f000 f838 	bl	8001a50 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	@ 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80019f8:	1d39      	adds	r1, r7, #4
 80019fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019fe:	2201      	movs	r2, #1
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <__io_putchar+0x20>)
 8001a02:	f002 fd01 	bl	8004408 <HAL_UART_Transmit>
  return ch;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200002ac 	.word	0x200002ac

08001a14 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  // Clear the Overrun flag just before receiving the first character
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <__io_getchar+0x38>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <__io_getchar+0x38>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]

  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 5);
 8001a34:	1df9      	adds	r1, r7, #7
 8001a36:	2305      	movs	r3, #5
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <__io_getchar+0x38>)
 8001a3c:	f002 fd6f 	bl	800451e <HAL_UART_Receive>
  return ch;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200002ac 	.word	0x200002ac

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a60:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a62:	4a18      	ldr	r2, [pc, #96]	@ (8001ac4 <MX_SPI2_Init+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <MX_SPI2_Init+0x64>)
 8001aae:	f002 f9b1 	bl	8003e14 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ab8:	f7ff ffca 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000250 	.word	0x20000250
 8001ac4:	40003800 	.word	0x40003800

08001ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	@ (8001b4c <HAL_SPI_MspInit+0x84>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12b      	bne.n	8001b42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <HAL_SPI_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <HAL_SPI_MspInit+0x88>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_SPI_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <HAL_SPI_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a10      	ldr	r2, [pc, #64]	@ (8001b50 <HAL_SPI_MspInit+0x88>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_SPI_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001b22:	2388      	movs	r3, #136	@ 0x88
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b32:	2305      	movs	r3, #5
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <HAL_SPI_MspInit+0x8c>)
 8001b3e:	f001 fb1b 	bl	8003178 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	@ 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40003800 	.word	0x40003800
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020800 	.word	0x40020800

08001b58 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2102      	movs	r1, #2
 8001b72:	4811      	ldr	r0, [pc, #68]	@ (8001bb8 <ssd1331_write_byte+0x60>)
 8001b74:	f001 fc9c 	bl	80034b0 <HAL_GPIO_WritePin>
 8001b78:	e004      	b.n	8001b84 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <ssd1331_write_byte+0x60>)
 8001b80:	f001 fc96 	bl	80034b0 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8001b84:	2200      	movs	r2, #0
 8001b86:	2104      	movs	r1, #4
 8001b88:	480b      	ldr	r0, [pc, #44]	@ (8001bb8 <ssd1331_write_byte+0x60>)
 8001b8a:	f001 fc91 	bl	80034b0 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001b8e:	1df9      	adds	r1, r7, #7
 8001b90:	2364      	movs	r3, #100	@ 0x64
 8001b92:	2201      	movs	r2, #1
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <ssd1331_write_byte+0x64>)
 8001b96:	f002 f9c6 	bl	8003f26 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4806      	ldr	r0, [pc, #24]	@ (8001bb8 <ssd1331_write_byte+0x60>)
 8001ba0:	f001 fc86 	bl	80034b0 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <ssd1331_write_byte+0x60>)
 8001baa:	f001 fc81 	bl	80034b0 <HAL_GPIO_WritePin>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	20000250 	.word	0x20000250

08001bc0 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	71bb      	strb	r3, [r7, #6]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b5f      	cmp	r3, #95	@ 0x5f
 8001bd6:	d82b      	bhi.n	8001c30 <ssd1331_draw_point+0x70>
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bdc:	d828      	bhi.n	8001c30 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2015      	movs	r0, #21
 8001be2:	f7ff ffb9 	bl	8001b58 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffb4 	bl	8001b58 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	205f      	movs	r0, #95	@ 0x5f
 8001bf4:	f7ff ffb0 	bl	8001b58 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2075      	movs	r0, #117	@ 0x75
 8001bfc:	f7ff ffac 	bl	8001b58 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ffa7 	bl	8001b58 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	203f      	movs	r0, #63	@ 0x3f
 8001c0e:	f7ff ffa3 	bl	8001b58 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001c12:	88bb      	ldrh	r3, [r7, #4]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff9b 	bl	8001b58 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2101      	movs	r1, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff95 	bl	8001b58 <ssd1331_write_byte>
 8001c2e:	e000      	b.n	8001c32 <ssd1331_draw_point+0x72>
		return;
 8001c30:	bf00      	nop
}
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <ssd1331_fill_rect>:
	ssd1331_draw_v_line(chXpos, chYpos, chHeight, hwColor);
	ssd1331_draw_v_line(chXpos + chWidth, chYpos, chHeight + 1, hwColor);
}

void ssd1331_fill_rect(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint8_t chHeight, uint16_t hwColor)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71bb      	strb	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	717b      	strb	r3, [r7, #5]
 8001c52:	4613      	mov	r3, r2
 8001c54:	713b      	strb	r3, [r7, #4]
	uint16_t i, j;

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b5f      	cmp	r3, #95	@ 0x5f
 8001c5a:	d827      	bhi.n	8001cac <ssd1331_fill_rect+0x74>
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c60:	d824      	bhi.n	8001cac <ssd1331_fill_rect+0x74>
		return;
	}

	for(i = 0; i < chHeight; i ++){
 8001c62:	2300      	movs	r3, #0
 8001c64:	81fb      	strh	r3, [r7, #14]
 8001c66:	e01b      	b.n	8001ca0 <ssd1331_fill_rect+0x68>
		for(j = 0; j < chWidth; j ++){
 8001c68:	2300      	movs	r3, #0
 8001c6a:	81bb      	strh	r3, [r7, #12]
 8001c6c:	e010      	b.n	8001c90 <ssd1331_fill_rect+0x58>
			ssd1331_draw_point(chXpos + j, chYpos + i, hwColor);
 8001c6e:	89bb      	ldrh	r3, [r7, #12]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2d8      	uxtb	r0, r3
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	8c3a      	ldrh	r2, [r7, #32]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7ff ff9b 	bl	8001bc0 <ssd1331_draw_point>
		for(j = 0; j < chWidth; j ++){
 8001c8a:	89bb      	ldrh	r3, [r7, #12]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	81bb      	strh	r3, [r7, #12]
 8001c90:	797b      	ldrb	r3, [r7, #5]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	89ba      	ldrh	r2, [r7, #12]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3e9      	bcc.n	8001c6e <ssd1331_fill_rect+0x36>
	for(i = 0; i < chHeight; i ++){
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	81fb      	strh	r3, [r7, #14]
 8001ca0:	793b      	ldrb	r3, [r7, #4]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	89fa      	ldrh	r2, [r7, #14]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3de      	bcc.n	8001c68 <ssd1331_fill_rect+0x30>
 8001caa:	e000      	b.n	8001cae <ssd1331_fill_rect+0x76>
		return;
 8001cac:	bf00      	nop
		}
	}
}
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71bb      	strb	r3, [r7, #6]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	717b      	strb	r3, [r7, #5]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b5f      	cmp	r3, #95	@ 0x5f
 8001cde:	d857      	bhi.n	8001d90 <ssd1331_display_char+0xdc>
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ce4:	d854      	bhi.n	8001d90 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e04c      	b.n	8001d86 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001cec:	793b      	ldrb	r3, [r7, #4]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d10d      	bne.n	8001d0e <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8001cf2:	797b      	ldrb	r3, [r7, #5]
 8001cf4:	f1a3 0220 	sub.w	r2, r3, #32
 8001cf8:	7bf9      	ldrb	r1, [r7, #15]
 8001cfa:	4827      	ldr	r0, [pc, #156]	@ (8001d98 <ssd1331_display_char+0xe4>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4403      	add	r3, r0
 8001d06:	440b      	add	r3, r1
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	737b      	strb	r3, [r7, #13]
 8001d0c:	e00c      	b.n	8001d28 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8001d0e:	793b      	ldrb	r3, [r7, #4]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d109      	bne.n	8001d28 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001d14:	797b      	ldrb	r3, [r7, #5]
 8001d16:	f1a3 0220 	sub.w	r2, r3, #32
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	491f      	ldr	r1, [pc, #124]	@ (8001d9c <ssd1331_display_char+0xe8>)
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	440a      	add	r2, r1
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73bb      	strb	r3, [r7, #14]
 8001d2c:	e025      	b.n	8001d7a <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001d2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da06      	bge.n	8001d44 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001d36:	8c3a      	ldrh	r2, [r7, #32]
 8001d38:	79b9      	ldrb	r1, [r7, #6]
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff3f 	bl	8001bc0 <ssd1331_draw_point>
 8001d42:	e005      	b.n	8001d50 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001d44:	79b9      	ldrb	r1, [r7, #6]
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff38 	bl	8001bc0 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8001d50:	7b7b      	ldrb	r3, [r7, #13]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001d5c:	79ba      	ldrb	r2, [r7, #6]
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	793b      	ldrb	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d105      	bne.n	8001d74 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	71fb      	strb	r3, [r7, #7]
				break;
 8001d72:	e005      	b.n	8001d80 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73bb      	strb	r3, [r7, #14]
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	2b07      	cmp	r3, #7
 8001d7e:	d9d6      	bls.n	8001d2e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	3301      	adds	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	793b      	ldrb	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3ae      	bcc.n	8001cec <ssd1331_display_char+0x38>
 8001d8e:	e000      	b.n	8001d92 <ssd1331_display_char+0xde>
		return;
 8001d90:	bf00      	nop
			}
		}
    }
}
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	080097c8 	.word	0x080097c8
 8001d9c:	08009c3c 	.word	0x08009c3c

08001da0 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	603a      	str	r2, [r7, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	460b      	mov	r3, r1
 8001db0:	71bb      	strb	r3, [r7, #6]
 8001db2:	4613      	mov	r3, r2
 8001db4:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001dba:	d836      	bhi.n	8001e2a <ssd1331_display_string+0x8a>
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dc0:	d833      	bhi.n	8001e2a <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8001dc2:	e02d      	b.n	8001e20 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f1c3 0360 	rsb	r3, r3, #96	@ 0x60
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dd12      	ble.n	8001dfa <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	4413      	add	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001de0:	79ba      	ldrb	r2, [r7, #6]
 8001de2:	797b      	ldrb	r3, [r7, #5]
 8001de4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dd06      	ble.n	8001dfa <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f81c 	bl	8001e32 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	797c      	ldrb	r4, [r7, #5]
 8001e00:	79b9      	ldrb	r1, [r7, #6]
 8001e02:	79f8      	ldrb	r0, [r7, #7]
 8001e04:	8b3b      	ldrh	r3, [r7, #24]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4623      	mov	r3, r4
 8001e0a:	f7ff ff53 	bl	8001cb4 <ssd1331_display_char>
        chXpos += chSize / 2;
 8001e0e:	797b      	ldrb	r3, [r7, #5]
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4413      	add	r3, r2
 8001e18:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1cd      	bne.n	8001dc4 <ssd1331_display_string+0x24>
 8001e28:	e000      	b.n	8001e2c <ssd1331_display_string+0x8c>
		return;
 8001e2a:	bf00      	nop
    }
}
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}

08001e32 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]
 8001e40:	e013      	b.n	8001e6a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001e42:	2300      	movs	r3, #0
 8001e44:	81bb      	strh	r3, [r7, #12]
 8001e46:	e00a      	b.n	8001e5e <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	89fa      	ldrh	r2, [r7, #14]
 8001e4e:	b2d1      	uxtb	r1, r2
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff feb4 	bl	8001bc0 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001e58:	89bb      	ldrh	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	81bb      	strh	r3, [r7, #12]
 8001e5e:	89bb      	ldrh	r3, [r7, #12]
 8001e60:	2b5f      	cmp	r3, #95	@ 0x5f
 8001e62:	d9f1      	bls.n	8001e48 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001e64:	89fb      	ldrh	r3, [r7, #14]
 8001e66:	3301      	adds	r3, #1
 8001e68:	81fb      	strh	r3, [r7, #14]
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e6e:	d9e8      	bls.n	8001e42 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <ssd1331_init>:


void ssd1331_init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001e80:	2201      	movs	r2, #1
 8001e82:	2101      	movs	r1, #1
 8001e84:	4852      	ldr	r0, [pc, #328]	@ (8001fd0 <ssd1331_init+0x154>)
 8001e86:	f001 fb13 	bl	80034b0 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	4850      	ldr	r0, [pc, #320]	@ (8001fd0 <ssd1331_init+0x154>)
 8001e90:	f001 fb0e 	bl	80034b0 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001e94:	2100      	movs	r1, #0
 8001e96:	20ae      	movs	r0, #174	@ 0xae
 8001e98:	f7ff fe5e 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2081      	movs	r0, #129	@ 0x81
 8001ea0:	f7ff fe5a 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	20ff      	movs	r0, #255	@ 0xff
 8001ea8:	f7ff fe56 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001eac:	2100      	movs	r1, #0
 8001eae:	2082      	movs	r0, #130	@ 0x82
 8001eb0:	f7ff fe52 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	20ff      	movs	r0, #255	@ 0xff
 8001eb8:	f7ff fe4e 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2083      	movs	r0, #131	@ 0x83
 8001ec0:	f7ff fe4a 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	20ff      	movs	r0, #255	@ 0xff
 8001ec8:	f7ff fe46 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2087      	movs	r0, #135	@ 0x87
 8001ed0:	f7ff fe42 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2006      	movs	r0, #6
 8001ed8:	f7ff fe3e 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001edc:	2100      	movs	r1, #0
 8001ede:	208a      	movs	r0, #138	@ 0x8a
 8001ee0:	f7ff fe3a 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2064      	movs	r0, #100	@ 0x64
 8001ee8:	f7ff fe36 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001eec:	2100      	movs	r1, #0
 8001eee:	208b      	movs	r0, #139	@ 0x8b
 8001ef0:	f7ff fe32 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2078      	movs	r0, #120	@ 0x78
 8001ef8:	f7ff fe2e 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001efc:	2100      	movs	r1, #0
 8001efe:	208c      	movs	r0, #140	@ 0x8c
 8001f00:	f7ff fe2a 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001f04:	2100      	movs	r1, #0
 8001f06:	2064      	movs	r0, #100	@ 0x64
 8001f08:	f7ff fe26 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	20a0      	movs	r0, #160	@ 0xa0
 8001f10:	f7ff fe22 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x76, SSD1331_CMD);                     //0x72
 8001f14:	2100      	movs	r1, #0
 8001f16:	2076      	movs	r0, #118	@ 0x76
 8001f18:	f7ff fe1e 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	20a1      	movs	r0, #161	@ 0xa1
 8001f20:	f7ff fe1a 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fe16 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	20a2      	movs	r0, #162	@ 0xa2
 8001f30:	f7ff fe12 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fe0e 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	20a4      	movs	r0, #164	@ 0xa4
 8001f40:	f7ff fe0a 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001f44:	2100      	movs	r1, #0
 8001f46:	20a8      	movs	r0, #168	@ 0xa8
 8001f48:	f7ff fe06 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	203f      	movs	r0, #63	@ 0x3f
 8001f50:	f7ff fe02 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001f54:	2100      	movs	r1, #0
 8001f56:	20ad      	movs	r0, #173	@ 0xad
 8001f58:	f7ff fdfe 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	208e      	movs	r0, #142	@ 0x8e
 8001f60:	f7ff fdfa 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001f64:	2100      	movs	r1, #0
 8001f66:	20b0      	movs	r0, #176	@ 0xb0
 8001f68:	f7ff fdf6 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fdf2 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001f74:	2100      	movs	r1, #0
 8001f76:	20b1      	movs	r0, #177	@ 0xb1
 8001f78:	f7ff fdee 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2031      	movs	r0, #49	@ 0x31
 8001f80:	f7ff fdea 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001f84:	2100      	movs	r1, #0
 8001f86:	20b3      	movs	r0, #179	@ 0xb3
 8001f88:	f7ff fde6 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	20f0      	movs	r0, #240	@ 0xf0
 8001f90:	f7ff fde2 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001f94:	2100      	movs	r1, #0
 8001f96:	20bb      	movs	r0, #187	@ 0xbb
 8001f98:	f7ff fdde 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	203a      	movs	r0, #58	@ 0x3a
 8001fa0:	f7ff fdda 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	20be      	movs	r0, #190	@ 0xbe
 8001fa8:	f7ff fdd6 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001fac:	2100      	movs	r1, #0
 8001fae:	203e      	movs	r0, #62	@ 0x3e
 8001fb0:	f7ff fdd2 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	202e      	movs	r0, #46	@ 0x2e
 8001fb8:	f7ff fdce 	bl	8001b58 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	20af      	movs	r0, #175	@ 0xaf
 8001fc0:	f7ff fdca 	bl	8001b58 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff ff34 	bl	8001e32 <ssd1331_clear_screen>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <HAL_MspInit+0x4c>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	@ (8002020 <HAL_MspInit+0x4c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	@ 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002012:	2007      	movs	r0, #7
 8002014:	f001 f86e 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <NMI_Handler+0x4>

0800202c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <MemManage_Handler+0x4>

0800203c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <UsageFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207a:	f000 f9fd 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <ADC_IRQHandler+0x10>)
 800208a:	f000 fbef 	bl	800286c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200001f8 	.word	0x200001f8

08002098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return 1;
 800209c:	2301      	movs	r3, #1
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_kill>:

int _kill(int pid, int sig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b2:	f003 fe21 	bl	8005cf8 <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2216      	movs	r2, #22
 80020ba:	601a      	str	r2, [r3, #0]
  return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_exit>:

void _exit (int status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffe7 	bl	80020a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020da:	bf00      	nop
 80020dc:	e7fd      	b.n	80020da <_exit+0x12>

080020de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e00a      	b.n	8002106 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f0:	f7ff fc90 	bl	8001a14 <__io_getchar>
 80020f4:	4601      	mov	r1, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	60ba      	str	r2, [r7, #8]
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf0      	blt.n	80020f0 <_read+0x12>
  }

  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e009      	b.n	800213e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fc5c 	bl	80019f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbf1      	blt.n	800212a <_write+0x12>
  }
  return len;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_close>:

int _close(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002178:	605a      	str	r2, [r3, #4]
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_isatty>:

int _isatty(int file)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	@ (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f003 fd86 	bl	8005cf8 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20020000 	.word	0x20020000
 8002218:	00000400 	.word	0x00000400
 800221c:	200002a8 	.word	0x200002a8
 8002220:	20000448 	.word	0x20000448

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <MX_USART2_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002280:	f002 f872 	bl	8004368 <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f7ff fbe1 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002ac 	.word	0x200002ac
 8002298:	40004400 	.word	0x40004400

0800229c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_UART_MspInit+0x84>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d12b      	bne.n	8002316 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_UART_MspInit+0x88>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a17      	ldr	r2, [pc, #92]	@ (8002324 <HAL_UART_MspInit+0x88>)
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_UART_MspInit+0x88>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_UART_MspInit+0x88>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <HAL_UART_MspInit+0x88>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_UART_MspInit+0x88>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022f6:	230c      	movs	r3, #12
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002306:	2307      	movs	r3, #7
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	@ (8002328 <HAL_UART_MspInit+0x8c>)
 8002312:	f000 ff31 	bl	8003178 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	@ 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004400 	.word	0x40004400
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000

0800232c <GetCharFromUART2>:
// PARAMETERS    :
//   none
// RETURNS       :
//  character received
char GetCharFromUART2 ( void )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b09a      	sub	sp, #104	@ 0x68
 8002330:	af00      	add	r7, sp, #0
  char	RxBuffer[LENGTH_OF_INPUT_ARRAY] = {0};
 8002332:	463b      	mov	r3, r7
 8002334:	2264      	movs	r2, #100	@ 0x64
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fc8a 	bl	8005c52 <memset>

  HAL_StatusTypeDef UartStatus = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  UartStatus = HAL_UART_Receive(&huart2, (uint8_t *)RxBuffer, 1, 1);
 8002344:	4639      	mov	r1, r7
 8002346:	2301      	movs	r3, #1
 8002348:	2201      	movs	r2, #1
 800234a:	480b      	ldr	r0, [pc, #44]	@ (8002378 <GetCharFromUART2+0x4c>)
 800234c:	f002 f8e7 	bl	800451e <HAL_UART_Receive>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67


  // check if Receive got a character
  if( !((UartStatus == HAL_TIMEOUT) || (UartStatus == HAL_OK)) )
 8002356:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800235a:	2b03      	cmp	r3, #3
 800235c:	d006      	beq.n	800236c <GetCharFromUART2+0x40>
 800235e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <GetCharFromUART2+0x40>
  {
    printf("ERROR in GetCharFromUART2\n\r");  // nothing received or error so signal that via a print
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <GetCharFromUART2+0x50>)
 8002368:	f003 fbc6 	bl	8005af8 <iprintf>
  }

  return *RxBuffer;
 800236c:	783b      	ldrb	r3, [r7, #0]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3768      	adds	r7, #104	@ 0x68
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002ac 	.word	0x200002ac
 800237c:	080097ac 	.word	0x080097ac

08002380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002384:	f7ff ff4e 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	@ (80023bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	@ (80023c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	@ (80023cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f003 fca9 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023b2:	f7ff fa5b 	bl	800186c <main>
  bx  lr    
 80023b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023c4:	0800a67c 	.word	0x0800a67c
  ldr r2, =_sbss
 80023c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023cc:	20000444 	.word	0x20000444

080023d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <DMA1_Stream0_IRQHandler>
	...

080023d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <HAL_Init+0x40>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <HAL_Init+0x40>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_Init+0x40>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 fe79 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7ff fde4 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00

08002418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fe91 	bl	800315e <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f000 fe59 	bl	800310a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	@ (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000000 	.word	0x20000000
 8002470:	20000008 	.word	0x20000008
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	200002f4 	.word	0x200002f4

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200002f4 	.word	0x200002f4

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e033      	b.n	800257e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe ff7a 	bl	8001418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002546:	f023 0302 	bic.w	r3, r3, #2
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fbf8 	bl	8002d48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
 800256e:	e001      	b.n	8002574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Start+0x1a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e097      	b.n	80026d2 <HAL_ADC_Start+0x14a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d018      	beq.n	80025ea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025c8:	4b45      	ldr	r3, [pc, #276]	@ (80026e0 <HAL_ADC_Start+0x158>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a45      	ldr	r2, [pc, #276]	@ (80026e4 <HAL_ADC_Start+0x15c>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0c9a      	lsrs	r2, r3, #18
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d15f      	bne.n	80026b8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002622:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002636:	d106      	bne.n	8002646 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263c:	f023 0206 	bic.w	r2, r3, #6
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
 8002644:	e002      	b.n	800264c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002654:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <HAL_ADC_Start+0x160>)
 8002656:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002660:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d129      	bne.n	80026d0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	e020      	b.n	80026d0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a16      	ldr	r2, [pc, #88]	@ (80026ec <HAL_ADC_Start+0x164>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d11b      	bne.n	80026d0 <HAL_ADC_Start+0x148>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d114      	bne.n	80026d0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e00b      	b.n	80026d0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000000 	.word	0x20000000
 80026e4:	431bde83 	.word	0x431bde83
 80026e8:	40012300 	.word	0x40012300
 80026ec:	40012000 	.word	0x40012000

080026f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Stop+0x16>
 8002702:	2302      	movs	r3, #2
 8002704:	e021      	b.n	800274a <HAL_ADC_Stop+0x5a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002772:	d113      	bne.n	800279c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800277e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002782:	d10b      	bne.n	800279c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e063      	b.n	8002864 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800279c:	f7ff fe80 	bl	80024a0 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027a2:	e021      	b.n	80027e8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d01d      	beq.n	80027e8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_PollForConversion+0x6c>
 80027b2:	f7ff fe75 	bl	80024a0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d212      	bcs.n	80027e8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d00b      	beq.n	80027e8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e03d      	b.n	8002864 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d1d6      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f06f 0212 	mvn.w	r2, #18
 80027fe:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d123      	bne.n	8002862 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d111      	bne.n	8002862 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d049      	beq.n	8002936 <HAL_ADC_IRQHandler+0xca>
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d046      	beq.n	8002936 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d12b      	bne.n	8002926 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d127      	bne.n	8002926 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d119      	bne.n	8002926 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0220 	bic.w	r2, r2, #32
 8002900:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8bd 	bl	8002aa6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0212 	mvn.w	r2, #18
 8002934:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d057      	beq.n	80029fc <HAL_ADC_IRQHandler+0x190>
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d054      	beq.n	80029fc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d139      	bne.n	80029ec <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	d12b      	bne.n	80029ec <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d124      	bne.n	80029ec <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d11d      	bne.n	80029ec <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d119      	bne.n	80029ec <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 faa7 	bl	8002f40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f06f 020c 	mvn.w	r2, #12
 80029fa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10d      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f841 	bl	8002aba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0201 	mvn.w	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a50:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_ADC_IRQHandler+0x218>
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0220 	mvn.w	r2, #32
 8002a72:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f82a 	bl	8002ace <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0220 	mvn.w	r2, #32
 8002a82:	601a      	str	r2, [r3, #0]
  }
}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1c>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e113      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x244>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	d925      	bls.n	8002b5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68d9      	ldr	r1, [r3, #12]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	3b1e      	subs	r3, #30
 8002b26:	2207      	movs	r2, #7
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	400a      	ands	r2, r1
 8002b34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68d9      	ldr	r1, [r3, #12]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	4603      	mov	r3, r0
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4403      	add	r3, r0
 8002b4e:	3b1e      	subs	r3, #30
 8002b50:	409a      	lsls	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e022      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6919      	ldr	r1, [r3, #16]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	2207      	movs	r2, #7
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6919      	ldr	r1, [r3, #16]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4403      	add	r3, r0
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d824      	bhi.n	8002bf4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b05      	subs	r3, #5
 8002bbc:	221f      	movs	r2, #31
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	400a      	ands	r2, r1
 8002bca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	3b05      	subs	r3, #5
 8002be6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bf2:	e04c      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d824      	bhi.n	8002c46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b23      	subs	r3, #35	@ 0x23
 8002c0e:	221f      	movs	r2, #31
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43da      	mvns	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3b23      	subs	r3, #35	@ 0x23
 8002c38:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c44:	e023      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b41      	subs	r3, #65	@ 0x41
 8002c58:	221f      	movs	r2, #31
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b41      	subs	r3, #65	@ 0x41
 8002c82:	fa00 f203 	lsl.w	r2, r0, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c8e:	4b29      	ldr	r3, [pc, #164]	@ (8002d34 <HAL_ADC_ConfigChannel+0x250>)
 8002c90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a28      	ldr	r2, [pc, #160]	@ (8002d38 <HAL_ADC_ConfigChannel+0x254>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10f      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1d8>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d38 <HAL_ADC_ConfigChannel+0x254>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12b      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x23a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <HAL_ADC_ConfigChannel+0x258>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <HAL_ADC_ConfigChannel+0x1f4>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b11      	cmp	r3, #17
 8002cd6:	d122      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <HAL_ADC_ConfigChannel+0x258>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d111      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_ADC_ConfigChannel+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a11      	ldr	r2, [pc, #68]	@ (8002d44 <HAL_ADC_ConfigChannel+0x260>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9a      	lsrs	r2, r3, #18
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40012300 	.word	0x40012300
 8002d38:	40012000 	.word	0x40012000
 8002d3c:	10000012 	.word	0x10000012
 8002d40:	20000000 	.word	0x20000000
 8002d44:	431bde83 	.word	0x431bde83

08002d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d50:	4b79      	ldr	r3, [pc, #484]	@ (8002f38 <ADC_Init+0x1f0>)
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021a      	lsls	r2, r3, #8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6899      	ldr	r1, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	4a58      	ldr	r2, [pc, #352]	@ (8002f3c <ADC_Init+0x1f4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	e00f      	b.n	8002e46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0202 	bic.w	r2, r2, #2
 8002e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7e1b      	ldrb	r3, [r3, #24]
 8002e60:	005a      	lsls	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01b      	beq.n	8002eac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	035a      	lsls	r2, r3, #13
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e007      	b.n	8002ebc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	051a      	lsls	r2, r3, #20
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002efe:	025a      	lsls	r2, r3, #9
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6899      	ldr	r1, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	029a      	lsls	r2, r3, #10
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40012300 	.word	0x40012300
 8002f3c:	0f000001 	.word	0x0f000001

08002f40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	@ (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	@ (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	@ (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	@ 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	@ 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff8e 	bl	8002ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff29 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800311c:	f7ff ff3e 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 8003120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff8e 	bl	8003048 <NVIC_EncodePriority>
 800312c:	4602      	mov	r2, r0
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff5d 	bl	8002ff4 <__NVIC_SetPriority>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff31 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffa2 	bl	80030b0 <SysTick_Config>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	@ 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	e159      	b.n	8003448 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003194:	2201      	movs	r2, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	f040 8148 	bne.w	8003442 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d005      	beq.n	80031ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d130      	bne.n	800322c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 0201 	and.w	r2, r3, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b03      	cmp	r3, #3
 8003236:	d017      	beq.n	8003268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d123      	bne.n	80032bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	08da      	lsrs	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3208      	adds	r2, #8
 800327c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	08da      	lsrs	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3208      	adds	r2, #8
 80032b6:	69b9      	ldr	r1, [r7, #24]
 80032b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0203 	and.w	r2, r3, #3
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a2 	beq.w	8003442 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b57      	ldr	r3, [pc, #348]	@ (8003460 <HAL_GPIO_Init+0x2e8>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	4a56      	ldr	r2, [pc, #344]	@ (8003460 <HAL_GPIO_Init+0x2e8>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800330c:	6453      	str	r3, [r2, #68]	@ 0x44
 800330e:	4b54      	ldr	r3, [pc, #336]	@ (8003460 <HAL_GPIO_Init+0x2e8>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800331a:	4a52      	ldr	r2, [pc, #328]	@ (8003464 <HAL_GPIO_Init+0x2ec>)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	3302      	adds	r3, #2
 8003322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	220f      	movs	r2, #15
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a49      	ldr	r2, [pc, #292]	@ (8003468 <HAL_GPIO_Init+0x2f0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x202>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a48      	ldr	r2, [pc, #288]	@ (800346c <HAL_GPIO_Init+0x2f4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x1fe>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a47      	ldr	r2, [pc, #284]	@ (8003470 <HAL_GPIO_Init+0x2f8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x1fa>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a46      	ldr	r2, [pc, #280]	@ (8003474 <HAL_GPIO_Init+0x2fc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x1f6>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a45      	ldr	r2, [pc, #276]	@ (8003478 <HAL_GPIO_Init+0x300>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x1f2>
 8003366:	2304      	movs	r3, #4
 8003368:	e008      	b.n	800337c <HAL_GPIO_Init+0x204>
 800336a:	2307      	movs	r3, #7
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x204>
 800336e:	2303      	movs	r3, #3
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x204>
 8003372:	2302      	movs	r3, #2
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x204>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x204>
 800337a:	2300      	movs	r3, #0
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	f002 0203 	and.w	r2, r2, #3
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338c:	4935      	ldr	r1, [pc, #212]	@ (8003464 <HAL_GPIO_Init+0x2ec>)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339a:	4b38      	ldr	r3, [pc, #224]	@ (800347c <HAL_GPIO_Init+0x304>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033be:	4a2f      	ldr	r2, [pc, #188]	@ (800347c <HAL_GPIO_Init+0x304>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c4:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <HAL_GPIO_Init+0x304>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e8:	4a24      	ldr	r2, [pc, #144]	@ (800347c <HAL_GPIO_Init+0x304>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ee:	4b23      	ldr	r3, [pc, #140]	@ (800347c <HAL_GPIO_Init+0x304>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003412:	4a1a      	ldr	r2, [pc, #104]	@ (800347c <HAL_GPIO_Init+0x304>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003418:	4b18      	ldr	r3, [pc, #96]	@ (800347c <HAL_GPIO_Init+0x304>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343c:	4a0f      	ldr	r2, [pc, #60]	@ (800347c <HAL_GPIO_Init+0x304>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	f67f aea2 	bls.w	8003194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3724      	adds	r7, #36	@ 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	40013800 	.word	0x40013800
 8003468:	40020000 	.word	0x40020000
 800346c:	40020400 	.word	0x40020400
 8003470:	40020800 	.word	0x40020800
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40021000 	.word	0x40021000
 800347c:	40013c00 	.word	0x40013c00

08003480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e001      	b.n	80034a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
 80034bc:	4613      	mov	r3, r2
 80034be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c0:	787b      	ldrb	r3, [r7, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e267      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003502:	4b88      	ldr	r3, [pc, #544]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b85      	ldr	r3, [pc, #532]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003516:	2b08      	cmp	r3, #8
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b82      	ldr	r3, [pc, #520]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b7e      	ldr	r3, [pc, #504]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e242      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b76      	ldr	r3, [pc, #472]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b70      	ldr	r3, [pc, #448]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6f      	ldr	r2, [pc, #444]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b6d      	ldr	r3, [pc, #436]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6c      	ldr	r2, [pc, #432]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b69      	ldr	r3, [pc, #420]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a68      	ldr	r2, [pc, #416]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe ff80 	bl	80024a0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe ff7c 	bl	80024a0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e207      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe ff6c 	bl	80024a0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe ff68 	bl	80024a0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1f3      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b44      	ldr	r3, [pc, #272]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b41      	ldr	r3, [pc, #260]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c7      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4937      	ldr	r1, [pc, #220]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <HAL_RCC_OscConfig+0x244>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe ff21 	bl	80024a0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe ff1d 	bl	80024a0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1a8      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b2b      	ldr	r3, [pc, #172]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4925      	ldr	r1, [pc, #148]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <HAL_RCC_OscConfig+0x244>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe ff00 	bl	80024a0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fefc 	bl	80024a0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e187      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d036      	beq.n	800373c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <HAL_RCC_OscConfig+0x248>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fe fee0 	bl	80024a0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fe fedc 	bl	80024a0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e167      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_OscConfig+0x240>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
 8003702:	e01b      	b.n	800373c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCC_OscConfig+0x248>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe fec9 	bl	80024a0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e00e      	b.n	8003730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe fec5 	bl	80024a0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d907      	bls.n	8003730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e150      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
 8003724:	40023800 	.word	0x40023800
 8003728:	42470000 	.word	0x42470000
 800372c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	4b88      	ldr	r3, [pc, #544]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ea      	bne.n	8003712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8097 	beq.w	8003878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b81      	ldr	r3, [pc, #516]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b7d      	ldr	r3, [pc, #500]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a7c      	ldr	r2, [pc, #496]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b7a      	ldr	r3, [pc, #488]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4b77      	ldr	r3, [pc, #476]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003786:	4b74      	ldr	r3, [pc, #464]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a73      	ldr	r2, [pc, #460]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003792:	f7fe fe85 	bl	80024a0 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7fe fe81 	bl	80024a0 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e10c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_OscConfig+0x474>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x2ea>
 80037c0:	4b64      	ldr	r3, [pc, #400]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	4a63      	ldr	r2, [pc, #396]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80037cc:	e01c      	b.n	8003808 <HAL_RCC_OscConfig+0x324>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x30c>
 80037d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a5e      	ldr	r2, [pc, #376]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0x324>
 80037f0:	4b58      	ldr	r3, [pc, #352]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	4a57      	ldr	r2, [pc, #348]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fc:	4b55      	ldr	r3, [pc, #340]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	4a54      	ldr	r2, [pc, #336]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe fe46 	bl	80024a0 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe fe42 	bl	80024a0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0cb      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCC_OscConfig+0x334>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383c:	f7fe fe30 	bl	80024a0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fe fe2c 	bl	80024a0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0b5      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	4b3e      	ldr	r3, [pc, #248]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ee      	bne.n	8003844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	4a38      	ldr	r2, [pc, #224]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003876:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80a1 	beq.w	80039c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003882:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b08      	cmp	r3, #8
 800388c:	d05c      	beq.n	8003948 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d141      	bne.n	800391a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b31      	ldr	r3, [pc, #196]	@ (800395c <HAL_RCC_OscConfig+0x478>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe fe00 	bl	80024a0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe fdfc 	bl	80024a0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e087      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	491b      	ldr	r1, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x478>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe fdd5 	bl	80024a0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe fdd1 	bl	80024a0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e05c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x416>
 8003918:	e054      	b.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <HAL_RCC_OscConfig+0x478>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fdbe 	bl	80024a0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe fdba 	bl	80024a0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e045      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_OscConfig+0x470>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
 8003946:	e03d      	b.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e038      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
 8003954:	40023800 	.word	0x40023800
 8003958:	40007000 	.word	0x40007000
 800395c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003960:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d028      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d121      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d11a      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003998:	4293      	cmp	r3, r2
 800399a:	d111      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	3b01      	subs	r3, #1
 80039aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0cc      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b68      	ldr	r3, [pc, #416]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d90c      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b65      	ldr	r3, [pc, #404]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d044      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e067      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4934      	ldr	r1, [pc, #208]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fcec 	bl	80024a0 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe fce8 	bl	80024a0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fc4c 	bl	8002418 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0800a22c 	.word	0x0800a22c
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b094      	sub	sp, #80	@ 0x50
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b79      	ldr	r3, [pc, #484]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80e1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0db      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd8:	e0db      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b73      	ldr	r3, [pc, #460]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bde:	e0d8      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b6f      	ldr	r3, [pc, #444]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bea:	4b6d      	ldr	r3, [pc, #436]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	0159      	lsls	r1, r3, #5
 8003c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c24:	0150      	lsls	r0, r2, #5
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	1a51      	subs	r1, r2, r1
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	4629      	mov	r1, r5
 8003c32:	eb63 0301 	sbc.w	r3, r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	018b      	lsls	r3, r1, #6
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4e:	4651      	mov	r1, sl
 8003c50:	018a      	lsls	r2, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ebb2 0801 	subs.w	r8, r2, r1
 8003c58:	4659      	mov	r1, fp
 8003c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	eb49 0303 	adc.w	r3, r9, r3
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c92:	4629      	mov	r1, r5
 8003c94:	024b      	lsls	r3, r1, #9
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	024a      	lsls	r2, r1, #9
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb0:	f7fc fff2 	bl	8000c98 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b38      	ldr	r3, [pc, #224]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4611      	mov	r1, r2
 8003cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cea:	0150      	lsls	r0, r2, #5
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d10:	ebb2 040a 	subs.w	r4, r2, sl
 8003d14:	eb63 050b 	sbc.w	r5, r3, fp
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	464b      	mov	r3, r9
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	61fa      	str	r2, [r7, #28]
 8003d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d64:	f7fc ff98 	bl	8000c98 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3750      	adds	r7, #80	@ 0x50
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	@ (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000000 	.word	0x20000000

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0800a23c 	.word	0x0800a23c

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0800a23c 	.word	0x0800a23c

08003e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07b      	b.n	8003f1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e36:	d009      	beq.n	8003e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
 8003e3e:	e005      	b.n	8003e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fe2e 	bl	8001ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0104 	and.w	r1, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	f003 0210 	and.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b088      	sub	sp, #32
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f36:	f7fe fab3 	bl	80024a0 <HAL_GetTick>
 8003f3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d001      	beq.n	8003f50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e12a      	b.n	80041a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Transmit+0x36>
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e122      	b.n	80041a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_SPI_Transmit+0x48>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e11b      	b.n	80041a6 <HAL_SPI_Transmit+0x280>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	88fa      	ldrh	r2, [r7, #6]
 8003f8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fbc:	d10f      	bne.n	8003fde <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d007      	beq.n	8003ffc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004004:	d152      	bne.n	80040ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Transmit+0xee>
 800400e:	8b7b      	ldrh	r3, [r7, #26]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d145      	bne.n	80040a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004038:	e032      	b.n	80040a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d112      	bne.n	800406e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800406c:	e018      	b.n	80040a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fe fa17 	bl	80024a0 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Transmit+0x160>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_Transmit+0x166>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e082      	b.n	80041a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1c7      	bne.n	800403a <HAL_SPI_Transmit+0x114>
 80040aa:	e053      	b.n	8004154 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Transmit+0x194>
 80040b4:	8b7b      	ldrh	r3, [r7, #26]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d147      	bne.n	800414a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040e0:	e033      	b.n	800414a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d113      	bne.n	8004118 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004116:	e018      	b.n	800414a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004118:	f7fe f9c2 	bl	80024a0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d803      	bhi.n	8004130 <HAL_SPI_Transmit+0x20a>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Transmit+0x210>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e02d      	b.n	80041a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1c6      	bne.n	80040e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f8b1 	bl	80042c0 <SPI_EndRxTxTransaction>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041c0:	f7fe f96e 	bl	80024a0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d0:	f7fe f966 	bl	80024a0 <HAL_GetTick>
 80041d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041d6:	4b39      	ldr	r3, [pc, #228]	@ (80042bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	015b      	lsls	r3, r3, #5
 80041dc:	0d1b      	lsrs	r3, r3, #20
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041e6:	e055      	b.n	8004294 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d051      	beq.n	8004294 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041f0:	f7fe f956 	bl	80024a0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d902      	bls.n	8004206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d13d      	bne.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800421e:	d111      	bne.n	8004244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004228:	d004      	beq.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004232:	d107      	bne.n	8004244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424c:	d10f      	bne.n	800426e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800426c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e018      	b.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	e002      	b.n	8004294 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3b01      	subs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d19a      	bne.n	80041e8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000000 	.word	0x20000000

080042c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2201      	movs	r2, #1
 80042d4:	2102      	movs	r1, #2
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff6a 	bl	80041b0 <SPI_WaitFlagStateUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e032      	b.n	8004358 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <SPI_EndRxTxTransaction+0xa0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <SPI_EndRxTxTransaction+0xa4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	0d5b      	lsrs	r3, r3, #21
 80042fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004310:	d112      	bne.n	8004338 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	@ 0x80
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff ff47 	bl	80041b0 <SPI_WaitFlagStateUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d016      	beq.n	8004356 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e00f      	b.n	8004358 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3b01      	subs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434e:	2b80      	cmp	r3, #128	@ 0x80
 8004350:	d0f2      	beq.n	8004338 <SPI_EndRxTxTransaction+0x78>
 8004352:	e000      	b.n	8004356 <SPI_EndRxTxTransaction+0x96>
        break;
 8004354:	bf00      	nop
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000000 	.word	0x20000000
 8004364:	165e9f81 	.word	0x165e9f81

08004368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e042      	b.n	8004400 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd ff84 	bl	800229c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	@ 0x24
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa09 	bl	80047c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	@ 0x28
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	d175      	bne.n	8004514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_Transmit+0x2c>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e06e      	b.n	8004516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2221      	movs	r2, #33	@ 0x21
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004446:	f7fe f82b 	bl	80024a0 <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004460:	d108      	bne.n	8004474 <HAL_UART_Transmit+0x6c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e003      	b.n	800447c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800447c:	e02e      	b.n	80044dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	@ 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f8df 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e03a      	b.n	8004516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	3302      	adds	r3, #2
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	e007      	b.n	80044ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1cb      	bne.n	800447e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2140      	movs	r1, #64	@ 0x40
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f8ab 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08a      	sub	sp, #40	@ 0x28
 8004522:	af02      	add	r7, sp, #8
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b20      	cmp	r3, #32
 800453c:	f040 8081 	bne.w	8004642 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Receive+0x2e>
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e079      	b.n	8004644 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2222      	movs	r2, #34	@ 0x22
 800455a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004564:	f7fd ff9c 	bl	80024a0 <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457e:	d108      	bne.n	8004592 <HAL_UART_Receive+0x74>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	e003      	b.n	800459a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800459a:	e047      	b.n	800462c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2120      	movs	r1, #32
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f850 	bl	800464c <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e042      	b.n	8004644 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e01f      	b.n	800461e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e6:	d007      	beq.n	80045f8 <HAL_UART_Receive+0xda>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <HAL_UART_Receive+0xe8>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e008      	b.n	8004618 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004612:	b2da      	uxtb	r2, r3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	3301      	adds	r3, #1
 800461c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1b2      	bne.n	800459c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
  }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465c:	e03b      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d037      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004666:	f7fd ff1b 	bl	80024a0 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <UART_WaitOnFlagUntilTimeout+0x30>
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e03a      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d023      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b80      	cmp	r3, #128	@ 0x80
 8004692:	d020      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b40      	cmp	r3, #64	@ 0x40
 8004698:	d01d      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d116      	bne.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f81d 	bl	80046fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2208      	movs	r2, #8
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00f      	b.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4013      	ands	r3, r2
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d0b4      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fe:	b480      	push	{r7}
 8004700:	b095      	sub	sp, #84	@ 0x54
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800471c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004726:	643a      	str	r2, [r7, #64]	@ 0x40
 8004728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800472c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e5      	bne.n	8004706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3314      	adds	r3, #20
 8004740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	61fb      	str	r3, [r7, #28]
   return(result);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800475a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800475c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	2b01      	cmp	r3, #1
 8004774:	d119      	bne.n	80047aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	60bb      	str	r3, [r7, #8]
   return(result);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f023 0310 	bic.w	r3, r3, #16
 800478c:	647b      	str	r3, [r7, #68]	@ 0x44
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004796:	61ba      	str	r2, [r7, #24]
 8004798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6979      	ldr	r1, [r7, #20]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	613b      	str	r3, [r7, #16]
   return(result);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e5      	bne.n	8004776 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047b8:	bf00      	nop
 80047ba:	3754      	adds	r7, #84	@ 0x54
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b0c0      	sub	sp, #256	@ 0x100
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	ea40 0301 	orr.w	r3, r0, r1
 80047ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800481c:	f021 010c 	bic.w	r1, r1, #12
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800482a:	430b      	orrs	r3, r1
 800482c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	ea40 0301 	orr.w	r3, r0, r1
 800484a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8f      	ldr	r3, [pc, #572]	@ (8004a90 <UART_SetConfig+0x2cc>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d005      	beq.n	8004864 <UART_SetConfig+0xa0>
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a94 <UART_SetConfig+0x2d0>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d104      	bne.n	800486e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7ff fac2 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8004868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800486c:	e003      	b.n	8004876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7ff faa9 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8004872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004880:	f040 810c 	bne.w	8004a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800488e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	1891      	adds	r1, r2, r2
 800489c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800489e:	415b      	adcs	r3, r3
 80048a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048a6:	4621      	mov	r1, r4
 80048a8:	eb12 0801 	adds.w	r8, r2, r1
 80048ac:	4629      	mov	r1, r5
 80048ae:	eb43 0901 	adc.w	r9, r3, r1
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c6:	4690      	mov	r8, r2
 80048c8:	4699      	mov	r9, r3
 80048ca:	4623      	mov	r3, r4
 80048cc:	eb18 0303 	adds.w	r3, r8, r3
 80048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048d4:	462b      	mov	r3, r5
 80048d6:	eb49 0303 	adc.w	r3, r9, r3
 80048da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048f2:	460b      	mov	r3, r1
 80048f4:	18db      	adds	r3, r3, r3
 80048f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f8:	4613      	mov	r3, r2
 80048fa:	eb42 0303 	adc.w	r3, r2, r3
 80048fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004908:	f7fc f9c6 	bl	8000c98 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4b61      	ldr	r3, [pc, #388]	@ (8004a98 <UART_SetConfig+0x2d4>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	011c      	lsls	r4, r3, #4
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004934:	415b      	adcs	r3, r3
 8004936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800493c:	4641      	mov	r1, r8
 800493e:	eb12 0a01 	adds.w	sl, r2, r1
 8004942:	4649      	mov	r1, r9
 8004944:	eb43 0b01 	adc.w	fp, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495c:	4692      	mov	sl, r2
 800495e:	469b      	mov	fp, r3
 8004960:	4643      	mov	r3, r8
 8004962:	eb1a 0303 	adds.w	r3, sl, r3
 8004966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800496a:	464b      	mov	r3, r9
 800496c:	eb4b 0303 	adc.w	r3, fp, r3
 8004970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004988:	460b      	mov	r3, r1
 800498a:	18db      	adds	r3, r3, r3
 800498c:	643b      	str	r3, [r7, #64]	@ 0x40
 800498e:	4613      	mov	r3, r2
 8004990:	eb42 0303 	adc.w	r3, r2, r3
 8004994:	647b      	str	r3, [r7, #68]	@ 0x44
 8004996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800499a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800499e:	f7fc f97b 	bl	8000c98 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004a98 <UART_SetConfig+0x2d4>)
 80049aa:	fba3 2301 	umull	r2, r3, r3, r1
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2264      	movs	r2, #100	@ 0x64
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	1acb      	subs	r3, r1, r3
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049be:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <UART_SetConfig+0x2d4>)
 80049c0:	fba3 2302 	umull	r2, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049cc:	441c      	add	r4, r3
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049e8:	415b      	adcs	r3, r3
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a24:	464b      	mov	r3, r9
 8004a26:	460a      	mov	r2, r1
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a44:	460b      	mov	r3, r1
 8004a46:	18db      	adds	r3, r3, r3
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a5a:	f7fc f91d 	bl	8000c98 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <UART_SetConfig+0x2d4>)
 8004a64:	fba3 1302 	umull	r1, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	2164      	movs	r1, #100	@ 0x64
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	3332      	adds	r3, #50	@ 0x32
 8004a76:	4a08      	ldr	r2, [pc, #32]	@ (8004a98 <UART_SetConfig+0x2d4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 0207 	and.w	r2, r3, #7
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4422      	add	r2, r4
 8004a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a8c:	e106      	b.n	8004c9c <UART_SetConfig+0x4d8>
 8004a8e:	bf00      	nop
 8004a90:	40011000 	.word	0x40011000
 8004a94:	40011400 	.word	0x40011400
 8004a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	6239      	str	r1, [r7, #32]
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004abe:	4641      	mov	r1, r8
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb43 0501 	adc.w	r5, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	00eb      	lsls	r3, r5, #3
 8004ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad6:	00e2      	lsls	r2, r4, #3
 8004ad8:	4614      	mov	r4, r2
 8004ada:	461d      	mov	r5, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	18e3      	adds	r3, r4, r3
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	eb45 0303 	adc.w	r3, r5, r3
 8004aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b14:	4621      	mov	r1, r4
 8004b16:	008a      	lsls	r2, r1, #2
 8004b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b1c:	f7fc f8bc 	bl	8000c98 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b60      	ldr	r3, [pc, #384]	@ (8004ca8 <UART_SetConfig+0x4e4>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011c      	lsls	r4, r3, #4
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	61b9      	str	r1, [r7, #24]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6139      	str	r1, [r7, #16]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ba8:	4649      	mov	r1, r9
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	4641      	mov	r1, r8
 8004bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	008a      	lsls	r2, r1, #2
 8004bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bba:	f7fc f86d 	bl	8000c98 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4b38      	ldr	r3, [pc, #224]	@ (8004ca8 <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2264      	movs	r2, #100	@ 0x64
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	1acb      	subs	r3, r1, r3
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	3332      	adds	r3, #50	@ 0x32
 8004bd8:	4a33      	ldr	r2, [pc, #204]	@ (8004ca8 <UART_SetConfig+0x4e4>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be4:	441c      	add	r4, r3
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c36:	464b      	mov	r3, r9
 8004c38:	460a      	mov	r2, r1
 8004c3a:	eb42 0303 	adc.w	r3, r2, r3
 8004c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c58:	4649      	mov	r1, r9
 8004c5a:	008b      	lsls	r3, r1, #2
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c62:	4641      	mov	r1, r8
 8004c64:	008a      	lsls	r2, r1, #2
 8004c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c6a:	f7fc f815 	bl	8000c98 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <UART_SetConfig+0x4e4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	@ 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	3332      	adds	r3, #50	@ 0x32
 8004c86:	4a08      	ldr	r2, [pc, #32]	@ (8004ca8 <UART_SetConfig+0x4e4>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 020f 	and.w	r2, r3, #15
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4422      	add	r2, r4
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <__cvt>:
 8004cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	ec57 6b10 	vmov	r6, r7, d0
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4619      	mov	r1, r3
 8004cba:	463b      	mov	r3, r7
 8004cbc:	bfbb      	ittet	lt
 8004cbe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004cc2:	461f      	movlt	r7, r3
 8004cc4:	2300      	movge	r3, #0
 8004cc6:	232d      	movlt	r3, #45	@ 0x2d
 8004cc8:	700b      	strb	r3, [r1, #0]
 8004cca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ccc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004cd0:	4691      	mov	r9, r2
 8004cd2:	f023 0820 	bic.w	r8, r3, #32
 8004cd6:	bfbc      	itt	lt
 8004cd8:	4632      	movlt	r2, r6
 8004cda:	4616      	movlt	r6, r2
 8004cdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ce0:	d005      	beq.n	8004cee <__cvt+0x42>
 8004ce2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ce6:	d100      	bne.n	8004cea <__cvt+0x3e>
 8004ce8:	3401      	adds	r4, #1
 8004cea:	2102      	movs	r1, #2
 8004cec:	e000      	b.n	8004cf0 <__cvt+0x44>
 8004cee:	2103      	movs	r1, #3
 8004cf0:	ab03      	add	r3, sp, #12
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	ab02      	add	r3, sp, #8
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	ec47 6b10 	vmov	d0, r6, r7
 8004cfc:	4653      	mov	r3, sl
 8004cfe:	4622      	mov	r2, r4
 8004d00:	f001 f8b6 	bl	8005e70 <_dtoa_r>
 8004d04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d08:	4605      	mov	r5, r0
 8004d0a:	d119      	bne.n	8004d40 <__cvt+0x94>
 8004d0c:	f019 0f01 	tst.w	r9, #1
 8004d10:	d00e      	beq.n	8004d30 <__cvt+0x84>
 8004d12:	eb00 0904 	add.w	r9, r0, r4
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	f7fb fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d22:	b108      	cbz	r0, 8004d28 <__cvt+0x7c>
 8004d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d28:	2230      	movs	r2, #48	@ 0x30
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	454b      	cmp	r3, r9
 8004d2e:	d31e      	bcc.n	8004d6e <__cvt+0xc2>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d34:	1b5b      	subs	r3, r3, r5
 8004d36:	4628      	mov	r0, r5
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	b004      	add	sp, #16
 8004d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d44:	eb00 0904 	add.w	r9, r0, r4
 8004d48:	d1e5      	bne.n	8004d16 <__cvt+0x6a>
 8004d4a:	7803      	ldrb	r3, [r0, #0]
 8004d4c:	2b30      	cmp	r3, #48	@ 0x30
 8004d4e:	d10a      	bne.n	8004d66 <__cvt+0xba>
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	4630      	mov	r0, r6
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d5c:	b918      	cbnz	r0, 8004d66 <__cvt+0xba>
 8004d5e:	f1c4 0401 	rsb	r4, r4, #1
 8004d62:	f8ca 4000 	str.w	r4, [sl]
 8004d66:	f8da 3000 	ldr.w	r3, [sl]
 8004d6a:	4499      	add	r9, r3
 8004d6c:	e7d3      	b.n	8004d16 <__cvt+0x6a>
 8004d6e:	1c59      	adds	r1, r3, #1
 8004d70:	9103      	str	r1, [sp, #12]
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e7d9      	b.n	8004d2a <__cvt+0x7e>

08004d76 <__exponent>:
 8004d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	bfba      	itte	lt
 8004d7c:	4249      	neglt	r1, r1
 8004d7e:	232d      	movlt	r3, #45	@ 0x2d
 8004d80:	232b      	movge	r3, #43	@ 0x2b
 8004d82:	2909      	cmp	r1, #9
 8004d84:	7002      	strb	r2, [r0, #0]
 8004d86:	7043      	strb	r3, [r0, #1]
 8004d88:	dd29      	ble.n	8004dde <__exponent+0x68>
 8004d8a:	f10d 0307 	add.w	r3, sp, #7
 8004d8e:	461d      	mov	r5, r3
 8004d90:	270a      	movs	r7, #10
 8004d92:	461a      	mov	r2, r3
 8004d94:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d98:	fb07 1416 	mls	r4, r7, r6, r1
 8004d9c:	3430      	adds	r4, #48	@ 0x30
 8004d9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004da2:	460c      	mov	r4, r1
 8004da4:	2c63      	cmp	r4, #99	@ 0x63
 8004da6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004daa:	4631      	mov	r1, r6
 8004dac:	dcf1      	bgt.n	8004d92 <__exponent+0x1c>
 8004dae:	3130      	adds	r1, #48	@ 0x30
 8004db0:	1e94      	subs	r4, r2, #2
 8004db2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004db6:	1c41      	adds	r1, r0, #1
 8004db8:	4623      	mov	r3, r4
 8004dba:	42ab      	cmp	r3, r5
 8004dbc:	d30a      	bcc.n	8004dd4 <__exponent+0x5e>
 8004dbe:	f10d 0309 	add.w	r3, sp, #9
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	42ac      	cmp	r4, r5
 8004dc6:	bf88      	it	hi
 8004dc8:	2300      	movhi	r3, #0
 8004dca:	3302      	adds	r3, #2
 8004dcc:	4403      	add	r3, r0
 8004dce:	1a18      	subs	r0, r3, r0
 8004dd0:	b003      	add	sp, #12
 8004dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004dd8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ddc:	e7ed      	b.n	8004dba <__exponent+0x44>
 8004dde:	2330      	movs	r3, #48	@ 0x30
 8004de0:	3130      	adds	r1, #48	@ 0x30
 8004de2:	7083      	strb	r3, [r0, #2]
 8004de4:	70c1      	strb	r1, [r0, #3]
 8004de6:	1d03      	adds	r3, r0, #4
 8004de8:	e7f1      	b.n	8004dce <__exponent+0x58>
	...

08004dec <_printf_float>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	b08d      	sub	sp, #52	@ 0x34
 8004df2:	460c      	mov	r4, r1
 8004df4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004df8:	4616      	mov	r6, r2
 8004dfa:	461f      	mov	r7, r3
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	f000 ff31 	bl	8005c64 <_localeconv_r>
 8004e02:	6803      	ldr	r3, [r0, #0]
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fb fa3a 	bl	8000280 <strlen>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e10:	f8d8 3000 	ldr.w	r3, [r8]
 8004e14:	9005      	str	r0, [sp, #20]
 8004e16:	3307      	adds	r3, #7
 8004e18:	f023 0307 	bic.w	r3, r3, #7
 8004e1c:	f103 0208 	add.w	r2, r3, #8
 8004e20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e24:	f8d4 b000 	ldr.w	fp, [r4]
 8004e28:	f8c8 2000 	str.w	r2, [r8]
 8004e2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e34:	9307      	str	r3, [sp, #28]
 8004e36:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e42:	4b9c      	ldr	r3, [pc, #624]	@ (80050b4 <_printf_float+0x2c8>)
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	f7fb fe78 	bl	8000b3c <__aeabi_dcmpun>
 8004e4c:	bb70      	cbnz	r0, 8004eac <_printf_float+0xc0>
 8004e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e52:	4b98      	ldr	r3, [pc, #608]	@ (80050b4 <_printf_float+0x2c8>)
 8004e54:	f04f 32ff 	mov.w	r2, #4294967295
 8004e58:	f7fb fe52 	bl	8000b00 <__aeabi_dcmple>
 8004e5c:	bb30      	cbnz	r0, 8004eac <_printf_float+0xc0>
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2300      	movs	r3, #0
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	f7fb fe41 	bl	8000aec <__aeabi_dcmplt>
 8004e6a:	b110      	cbz	r0, 8004e72 <_printf_float+0x86>
 8004e6c:	232d      	movs	r3, #45	@ 0x2d
 8004e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e72:	4a91      	ldr	r2, [pc, #580]	@ (80050b8 <_printf_float+0x2cc>)
 8004e74:	4b91      	ldr	r3, [pc, #580]	@ (80050bc <_printf_float+0x2d0>)
 8004e76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e7a:	bf8c      	ite	hi
 8004e7c:	4690      	movhi	r8, r2
 8004e7e:	4698      	movls	r8, r3
 8004e80:	2303      	movs	r3, #3
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f02b 0304 	bic.w	r3, fp, #4
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	f04f 0900 	mov.w	r9, #0
 8004e8e:	9700      	str	r7, [sp, #0]
 8004e90:	4633      	mov	r3, r6
 8004e92:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e94:	4621      	mov	r1, r4
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 f9d2 	bl	8005240 <_printf_common>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f040 808d 	bne.w	8004fbc <_printf_float+0x1d0>
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	b00d      	add	sp, #52	@ 0x34
 8004ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	f7fb fe42 	bl	8000b3c <__aeabi_dcmpun>
 8004eb8:	b140      	cbz	r0, 8004ecc <_printf_float+0xe0>
 8004eba:	464b      	mov	r3, r9
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bfbc      	itt	lt
 8004ec0:	232d      	movlt	r3, #45	@ 0x2d
 8004ec2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80050c0 <_printf_float+0x2d4>)
 8004ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80050c4 <_printf_float+0x2d8>)
 8004eca:	e7d4      	b.n	8004e76 <_printf_float+0x8a>
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ed2:	9206      	str	r2, [sp, #24]
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	d13b      	bne.n	8004f50 <_printf_float+0x164>
 8004ed8:	2306      	movs	r3, #6
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6022      	str	r2, [r4, #0]
 8004ee4:	9303      	str	r3, [sp, #12]
 8004ee6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004ee8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004eec:	ab09      	add	r3, sp, #36	@ 0x24
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	6861      	ldr	r1, [r4, #4]
 8004ef2:	ec49 8b10 	vmov	d0, r8, r9
 8004ef6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7ff fed6 	bl	8004cac <__cvt>
 8004f00:	9b06      	ldr	r3, [sp, #24]
 8004f02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f04:	2b47      	cmp	r3, #71	@ 0x47
 8004f06:	4680      	mov	r8, r0
 8004f08:	d129      	bne.n	8004f5e <_printf_float+0x172>
 8004f0a:	1cc8      	adds	r0, r1, #3
 8004f0c:	db02      	blt.n	8004f14 <_printf_float+0x128>
 8004f0e:	6863      	ldr	r3, [r4, #4]
 8004f10:	4299      	cmp	r1, r3
 8004f12:	dd41      	ble.n	8004f98 <_printf_float+0x1ac>
 8004f14:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f18:	fa5f fa8a 	uxtb.w	sl, sl
 8004f1c:	3901      	subs	r1, #1
 8004f1e:	4652      	mov	r2, sl
 8004f20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f24:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f26:	f7ff ff26 	bl	8004d76 <__exponent>
 8004f2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f2c:	1813      	adds	r3, r2, r0
 8004f2e:	2a01      	cmp	r2, #1
 8004f30:	4681      	mov	r9, r0
 8004f32:	6123      	str	r3, [r4, #16]
 8004f34:	dc02      	bgt.n	8004f3c <_printf_float+0x150>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	07d2      	lsls	r2, r2, #31
 8004f3a:	d501      	bpl.n	8004f40 <_printf_float+0x154>
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0a2      	beq.n	8004e8e <_printf_float+0xa2>
 8004f48:	232d      	movs	r3, #45	@ 0x2d
 8004f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f4e:	e79e      	b.n	8004e8e <_printf_float+0xa2>
 8004f50:	9a06      	ldr	r2, [sp, #24]
 8004f52:	2a47      	cmp	r2, #71	@ 0x47
 8004f54:	d1c2      	bne.n	8004edc <_printf_float+0xf0>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1c0      	bne.n	8004edc <_printf_float+0xf0>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7bd      	b.n	8004eda <_printf_float+0xee>
 8004f5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f62:	d9db      	bls.n	8004f1c <_printf_float+0x130>
 8004f64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f68:	d118      	bne.n	8004f9c <_printf_float+0x1b0>
 8004f6a:	2900      	cmp	r1, #0
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	dd0b      	ble.n	8004f88 <_printf_float+0x19c>
 8004f70:	6121      	str	r1, [r4, #16]
 8004f72:	b913      	cbnz	r3, 8004f7a <_printf_float+0x18e>
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	07d0      	lsls	r0, r2, #31
 8004f78:	d502      	bpl.n	8004f80 <_printf_float+0x194>
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	440b      	add	r3, r1
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f82:	f04f 0900 	mov.w	r9, #0
 8004f86:	e7db      	b.n	8004f40 <_printf_float+0x154>
 8004f88:	b913      	cbnz	r3, 8004f90 <_printf_float+0x1a4>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	07d2      	lsls	r2, r2, #31
 8004f8e:	d501      	bpl.n	8004f94 <_printf_float+0x1a8>
 8004f90:	3302      	adds	r3, #2
 8004f92:	e7f4      	b.n	8004f7e <_printf_float+0x192>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e7f2      	b.n	8004f7e <_printf_float+0x192>
 8004f98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f9e:	4299      	cmp	r1, r3
 8004fa0:	db05      	blt.n	8004fae <_printf_float+0x1c2>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6121      	str	r1, [r4, #16]
 8004fa6:	07d8      	lsls	r0, r3, #31
 8004fa8:	d5ea      	bpl.n	8004f80 <_printf_float+0x194>
 8004faa:	1c4b      	adds	r3, r1, #1
 8004fac:	e7e7      	b.n	8004f7e <_printf_float+0x192>
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	bfd4      	ite	le
 8004fb2:	f1c1 0202 	rsble	r2, r1, #2
 8004fb6:	2201      	movgt	r2, #1
 8004fb8:	4413      	add	r3, r2
 8004fba:	e7e0      	b.n	8004f7e <_printf_float+0x192>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	055a      	lsls	r2, r3, #21
 8004fc0:	d407      	bmi.n	8004fd2 <_printf_float+0x1e6>
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d12b      	bne.n	8005028 <_printf_float+0x23c>
 8004fd0:	e767      	b.n	8004ea2 <_printf_float+0xb6>
 8004fd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fd6:	f240 80dd 	bls.w	8005194 <_printf_float+0x3a8>
 8004fda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f7fb fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d033      	beq.n	8005052 <_printf_float+0x266>
 8004fea:	4a37      	ldr	r2, [pc, #220]	@ (80050c8 <_printf_float+0x2dc>)
 8004fec:	2301      	movs	r3, #1
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f af54 	beq.w	8004ea2 <_printf_float+0xb6>
 8004ffa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004ffe:	4543      	cmp	r3, r8
 8005000:	db02      	blt.n	8005008 <_printf_float+0x21c>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	07d8      	lsls	r0, r3, #31
 8005006:	d50f      	bpl.n	8005028 <_printf_float+0x23c>
 8005008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af45 	beq.w	8004ea2 <_printf_float+0xb6>
 8005018:	f04f 0900 	mov.w	r9, #0
 800501c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005020:	f104 0a1a 	add.w	sl, r4, #26
 8005024:	45c8      	cmp	r8, r9
 8005026:	dc09      	bgt.n	800503c <_printf_float+0x250>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	079b      	lsls	r3, r3, #30
 800502c:	f100 8103 	bmi.w	8005236 <_printf_float+0x44a>
 8005030:	68e0      	ldr	r0, [r4, #12]
 8005032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005034:	4298      	cmp	r0, r3
 8005036:	bfb8      	it	lt
 8005038:	4618      	movlt	r0, r3
 800503a:	e734      	b.n	8004ea6 <_printf_float+0xba>
 800503c:	2301      	movs	r3, #1
 800503e:	4652      	mov	r2, sl
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	f43f af2b 	beq.w	8004ea2 <_printf_float+0xb6>
 800504c:	f109 0901 	add.w	r9, r9, #1
 8005050:	e7e8      	b.n	8005024 <_printf_float+0x238>
 8005052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	dc39      	bgt.n	80050cc <_printf_float+0x2e0>
 8005058:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <_printf_float+0x2dc>)
 800505a:	2301      	movs	r3, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f af1d 	beq.w	8004ea2 <_printf_float+0xb6>
 8005068:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800506c:	ea59 0303 	orrs.w	r3, r9, r3
 8005070:	d102      	bne.n	8005078 <_printf_float+0x28c>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	07d9      	lsls	r1, r3, #31
 8005076:	d5d7      	bpl.n	8005028 <_printf_float+0x23c>
 8005078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af0d 	beq.w	8004ea2 <_printf_float+0xb6>
 8005088:	f04f 0a00 	mov.w	sl, #0
 800508c:	f104 0b1a 	add.w	fp, r4, #26
 8005090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005092:	425b      	negs	r3, r3
 8005094:	4553      	cmp	r3, sl
 8005096:	dc01      	bgt.n	800509c <_printf_float+0x2b0>
 8005098:	464b      	mov	r3, r9
 800509a:	e793      	b.n	8004fc4 <_printf_float+0x1d8>
 800509c:	2301      	movs	r3, #1
 800509e:	465a      	mov	r2, fp
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f aefb 	beq.w	8004ea2 <_printf_float+0xb6>
 80050ac:	f10a 0a01 	add.w	sl, sl, #1
 80050b0:	e7ee      	b.n	8005090 <_printf_float+0x2a4>
 80050b2:	bf00      	nop
 80050b4:	7fefffff 	.word	0x7fefffff
 80050b8:	0800a248 	.word	0x0800a248
 80050bc:	0800a244 	.word	0x0800a244
 80050c0:	0800a250 	.word	0x0800a250
 80050c4:	0800a24c 	.word	0x0800a24c
 80050c8:	0800a254 	.word	0x0800a254
 80050cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050d2:	4553      	cmp	r3, sl
 80050d4:	bfa8      	it	ge
 80050d6:	4653      	movge	r3, sl
 80050d8:	2b00      	cmp	r3, #0
 80050da:	4699      	mov	r9, r3
 80050dc:	dc36      	bgt.n	800514c <_printf_float+0x360>
 80050de:	f04f 0b00 	mov.w	fp, #0
 80050e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e6:	f104 021a 	add.w	r2, r4, #26
 80050ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050ec:	9306      	str	r3, [sp, #24]
 80050ee:	eba3 0309 	sub.w	r3, r3, r9
 80050f2:	455b      	cmp	r3, fp
 80050f4:	dc31      	bgt.n	800515a <_printf_float+0x36e>
 80050f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f8:	459a      	cmp	sl, r3
 80050fa:	dc3a      	bgt.n	8005172 <_printf_float+0x386>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07da      	lsls	r2, r3, #31
 8005100:	d437      	bmi.n	8005172 <_printf_float+0x386>
 8005102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005104:	ebaa 0903 	sub.w	r9, sl, r3
 8005108:	9b06      	ldr	r3, [sp, #24]
 800510a:	ebaa 0303 	sub.w	r3, sl, r3
 800510e:	4599      	cmp	r9, r3
 8005110:	bfa8      	it	ge
 8005112:	4699      	movge	r9, r3
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dc33      	bgt.n	8005182 <_printf_float+0x396>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005122:	f104 0b1a 	add.w	fp, r4, #26
 8005126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005128:	ebaa 0303 	sub.w	r3, sl, r3
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	4543      	cmp	r3, r8
 8005132:	f77f af79 	ble.w	8005028 <_printf_float+0x23c>
 8005136:	2301      	movs	r3, #1
 8005138:	465a      	mov	r2, fp
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f aeae 	beq.w	8004ea2 <_printf_float+0xb6>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e7ec      	b.n	8005126 <_printf_float+0x33a>
 800514c:	4642      	mov	r2, r8
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	d1c2      	bne.n	80050de <_printf_float+0x2f2>
 8005158:	e6a3      	b.n	8004ea2 <_printf_float+0xb6>
 800515a:	2301      	movs	r3, #1
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	9206      	str	r2, [sp, #24]
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae9c 	beq.w	8004ea2 <_printf_float+0xb6>
 800516a:	9a06      	ldr	r2, [sp, #24]
 800516c:	f10b 0b01 	add.w	fp, fp, #1
 8005170:	e7bb      	b.n	80050ea <_printf_float+0x2fe>
 8005172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	d1c0      	bne.n	8005102 <_printf_float+0x316>
 8005180:	e68f      	b.n	8004ea2 <_printf_float+0xb6>
 8005182:	9a06      	ldr	r2, [sp, #24]
 8005184:	464b      	mov	r3, r9
 8005186:	4442      	add	r2, r8
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	47b8      	blx	r7
 800518e:	3001      	adds	r0, #1
 8005190:	d1c3      	bne.n	800511a <_printf_float+0x32e>
 8005192:	e686      	b.n	8004ea2 <_printf_float+0xb6>
 8005194:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005198:	f1ba 0f01 	cmp.w	sl, #1
 800519c:	dc01      	bgt.n	80051a2 <_printf_float+0x3b6>
 800519e:	07db      	lsls	r3, r3, #31
 80051a0:	d536      	bpl.n	8005210 <_printf_float+0x424>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4642      	mov	r2, r8
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f ae78 	beq.w	8004ea2 <_printf_float+0xb6>
 80051b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b6:	4631      	mov	r1, r6
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b8      	blx	r7
 80051bc:	3001      	adds	r0, #1
 80051be:	f43f ae70 	beq.w	8004ea2 <_printf_float+0xb6>
 80051c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ce:	f7fb fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 80051d2:	b9c0      	cbnz	r0, 8005206 <_printf_float+0x41a>
 80051d4:	4653      	mov	r3, sl
 80051d6:	f108 0201 	add.w	r2, r8, #1
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	d10c      	bne.n	80051fe <_printf_float+0x412>
 80051e4:	e65d      	b.n	8004ea2 <_printf_float+0xb6>
 80051e6:	2301      	movs	r3, #1
 80051e8:	465a      	mov	r2, fp
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f ae56 	beq.w	8004ea2 <_printf_float+0xb6>
 80051f6:	f108 0801 	add.w	r8, r8, #1
 80051fa:	45d0      	cmp	r8, sl
 80051fc:	dbf3      	blt.n	80051e6 <_printf_float+0x3fa>
 80051fe:	464b      	mov	r3, r9
 8005200:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005204:	e6df      	b.n	8004fc6 <_printf_float+0x1da>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	f104 0b1a 	add.w	fp, r4, #26
 800520e:	e7f4      	b.n	80051fa <_printf_float+0x40e>
 8005210:	2301      	movs	r3, #1
 8005212:	4642      	mov	r2, r8
 8005214:	e7e1      	b.n	80051da <_printf_float+0x3ee>
 8005216:	2301      	movs	r3, #1
 8005218:	464a      	mov	r2, r9
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f ae3e 	beq.w	8004ea2 <_printf_float+0xb6>
 8005226:	f108 0801 	add.w	r8, r8, #1
 800522a:	68e3      	ldr	r3, [r4, #12]
 800522c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800522e:	1a5b      	subs	r3, r3, r1
 8005230:	4543      	cmp	r3, r8
 8005232:	dcf0      	bgt.n	8005216 <_printf_float+0x42a>
 8005234:	e6fc      	b.n	8005030 <_printf_float+0x244>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	f104 0919 	add.w	r9, r4, #25
 800523e:	e7f4      	b.n	800522a <_printf_float+0x43e>

08005240 <_printf_common>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	4698      	mov	r8, r3
 8005248:	688a      	ldr	r2, [r1, #8]
 800524a:	690b      	ldr	r3, [r1, #16]
 800524c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005250:	4293      	cmp	r3, r2
 8005252:	bfb8      	it	lt
 8005254:	4613      	movlt	r3, r2
 8005256:	6033      	str	r3, [r6, #0]
 8005258:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800525c:	4607      	mov	r7, r0
 800525e:	460c      	mov	r4, r1
 8005260:	b10a      	cbz	r2, 8005266 <_printf_common+0x26>
 8005262:	3301      	adds	r3, #1
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	0699      	lsls	r1, r3, #26
 800526a:	bf42      	ittt	mi
 800526c:	6833      	ldrmi	r3, [r6, #0]
 800526e:	3302      	addmi	r3, #2
 8005270:	6033      	strmi	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	f015 0506 	ands.w	r5, r5, #6
 8005278:	d106      	bne.n	8005288 <_printf_common+0x48>
 800527a:	f104 0a19 	add.w	sl, r4, #25
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	6832      	ldr	r2, [r6, #0]
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	42ab      	cmp	r3, r5
 8005286:	dc26      	bgt.n	80052d6 <_printf_common+0x96>
 8005288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800528c:	6822      	ldr	r2, [r4, #0]
 800528e:	3b00      	subs	r3, #0
 8005290:	bf18      	it	ne
 8005292:	2301      	movne	r3, #1
 8005294:	0692      	lsls	r2, r2, #26
 8005296:	d42b      	bmi.n	80052f0 <_printf_common+0xb0>
 8005298:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800529c:	4641      	mov	r1, r8
 800529e:	4638      	mov	r0, r7
 80052a0:	47c8      	blx	r9
 80052a2:	3001      	adds	r0, #1
 80052a4:	d01e      	beq.n	80052e4 <_printf_common+0xa4>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	f003 0306 	and.w	r3, r3, #6
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	bf02      	ittt	eq
 80052b2:	68e5      	ldreq	r5, [r4, #12]
 80052b4:	6833      	ldreq	r3, [r6, #0]
 80052b6:	1aed      	subeq	r5, r5, r3
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	bf0c      	ite	eq
 80052bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c0:	2500      	movne	r5, #0
 80052c2:	4293      	cmp	r3, r2
 80052c4:	bfc4      	itt	gt
 80052c6:	1a9b      	subgt	r3, r3, r2
 80052c8:	18ed      	addgt	r5, r5, r3
 80052ca:	2600      	movs	r6, #0
 80052cc:	341a      	adds	r4, #26
 80052ce:	42b5      	cmp	r5, r6
 80052d0:	d11a      	bne.n	8005308 <_printf_common+0xc8>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e008      	b.n	80052e8 <_printf_common+0xa8>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4652      	mov	r2, sl
 80052da:	4641      	mov	r1, r8
 80052dc:	4638      	mov	r0, r7
 80052de:	47c8      	blx	r9
 80052e0:	3001      	adds	r0, #1
 80052e2:	d103      	bne.n	80052ec <_printf_common+0xac>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ec:	3501      	adds	r5, #1
 80052ee:	e7c6      	b.n	800527e <_printf_common+0x3e>
 80052f0:	18e1      	adds	r1, r4, r3
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	2030      	movs	r0, #48	@ 0x30
 80052f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052fa:	4422      	add	r2, r4
 80052fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005300:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005304:	3302      	adds	r3, #2
 8005306:	e7c7      	b.n	8005298 <_printf_common+0x58>
 8005308:	2301      	movs	r3, #1
 800530a:	4622      	mov	r2, r4
 800530c:	4641      	mov	r1, r8
 800530e:	4638      	mov	r0, r7
 8005310:	47c8      	blx	r9
 8005312:	3001      	adds	r0, #1
 8005314:	d0e6      	beq.n	80052e4 <_printf_common+0xa4>
 8005316:	3601      	adds	r6, #1
 8005318:	e7d9      	b.n	80052ce <_printf_common+0x8e>
	...

0800531c <_printf_i>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	7e0f      	ldrb	r7, [r1, #24]
 8005322:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005324:	2f78      	cmp	r7, #120	@ 0x78
 8005326:	4691      	mov	r9, r2
 8005328:	4680      	mov	r8, r0
 800532a:	460c      	mov	r4, r1
 800532c:	469a      	mov	sl, r3
 800532e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005332:	d807      	bhi.n	8005344 <_printf_i+0x28>
 8005334:	2f62      	cmp	r7, #98	@ 0x62
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x32>
 8005338:	2f00      	cmp	r7, #0
 800533a:	f000 80d1 	beq.w	80054e0 <_printf_i+0x1c4>
 800533e:	2f58      	cmp	r7, #88	@ 0x58
 8005340:	f000 80b8 	beq.w	80054b4 <_printf_i+0x198>
 8005344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800534c:	e03a      	b.n	80053c4 <_printf_i+0xa8>
 800534e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005352:	2b15      	cmp	r3, #21
 8005354:	d8f6      	bhi.n	8005344 <_printf_i+0x28>
 8005356:	a101      	add	r1, pc, #4	@ (adr r1, 800535c <_printf_i+0x40>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053c9 	.word	0x080053c9
 8005364:	08005345 	.word	0x08005345
 8005368:	08005345 	.word	0x08005345
 800536c:	08005345 	.word	0x08005345
 8005370:	08005345 	.word	0x08005345
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005345 	.word	0x08005345
 800537c:	08005345 	.word	0x08005345
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	080054c7 	.word	0x080054c7
 800538c:	080053f3 	.word	0x080053f3
 8005390:	08005481 	.word	0x08005481
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054e9 	.word	0x080054e9
 80053a0:	08005345 	.word	0x08005345
 80053a4:	080053f3 	.word	0x080053f3
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	08005489 	.word	0x08005489
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6032      	str	r2, [r6, #0]
 80053bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053c4:	2301      	movs	r3, #1
 80053c6:	e09c      	b.n	8005502 <_printf_i+0x1e6>
 80053c8:	6833      	ldr	r3, [r6, #0]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	6031      	str	r1, [r6, #0]
 80053d0:	0606      	lsls	r6, r0, #24
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0xbc>
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	e003      	b.n	80053e0 <_printf_i+0xc4>
 80053d8:	0645      	lsls	r5, r0, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0xb8>
 80053dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	da03      	bge.n	80053ec <_printf_i+0xd0>
 80053e4:	232d      	movs	r3, #45	@ 0x2d
 80053e6:	426d      	negs	r5, r5
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ec:	4858      	ldr	r0, [pc, #352]	@ (8005550 <_printf_i+0x234>)
 80053ee:	230a      	movs	r3, #10
 80053f0:	e011      	b.n	8005416 <_printf_i+0xfa>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	0608      	lsls	r0, r1, #24
 80053f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053fc:	d402      	bmi.n	8005404 <_printf_i+0xe8>
 80053fe:	0649      	lsls	r1, r1, #25
 8005400:	bf48      	it	mi
 8005402:	b2ad      	uxthmi	r5, r5
 8005404:	2f6f      	cmp	r7, #111	@ 0x6f
 8005406:	4852      	ldr	r0, [pc, #328]	@ (8005550 <_printf_i+0x234>)
 8005408:	6033      	str	r3, [r6, #0]
 800540a:	bf14      	ite	ne
 800540c:	230a      	movne	r3, #10
 800540e:	2308      	moveq	r3, #8
 8005410:	2100      	movs	r1, #0
 8005412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005416:	6866      	ldr	r6, [r4, #4]
 8005418:	60a6      	str	r6, [r4, #8]
 800541a:	2e00      	cmp	r6, #0
 800541c:	db05      	blt.n	800542a <_printf_i+0x10e>
 800541e:	6821      	ldr	r1, [r4, #0]
 8005420:	432e      	orrs	r6, r5
 8005422:	f021 0104 	bic.w	r1, r1, #4
 8005426:	6021      	str	r1, [r4, #0]
 8005428:	d04b      	beq.n	80054c2 <_printf_i+0x1a6>
 800542a:	4616      	mov	r6, r2
 800542c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005430:	fb03 5711 	mls	r7, r3, r1, r5
 8005434:	5dc7      	ldrb	r7, [r0, r7]
 8005436:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800543a:	462f      	mov	r7, r5
 800543c:	42bb      	cmp	r3, r7
 800543e:	460d      	mov	r5, r1
 8005440:	d9f4      	bls.n	800542c <_printf_i+0x110>
 8005442:	2b08      	cmp	r3, #8
 8005444:	d10b      	bne.n	800545e <_printf_i+0x142>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	07df      	lsls	r7, r3, #31
 800544a:	d508      	bpl.n	800545e <_printf_i+0x142>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	6861      	ldr	r1, [r4, #4]
 8005450:	4299      	cmp	r1, r3
 8005452:	bfde      	ittt	le
 8005454:	2330      	movle	r3, #48	@ 0x30
 8005456:	f806 3c01 	strble.w	r3, [r6, #-1]
 800545a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800545e:	1b92      	subs	r2, r2, r6
 8005460:	6122      	str	r2, [r4, #16]
 8005462:	f8cd a000 	str.w	sl, [sp]
 8005466:	464b      	mov	r3, r9
 8005468:	aa03      	add	r2, sp, #12
 800546a:	4621      	mov	r1, r4
 800546c:	4640      	mov	r0, r8
 800546e:	f7ff fee7 	bl	8005240 <_printf_common>
 8005472:	3001      	adds	r0, #1
 8005474:	d14a      	bne.n	800550c <_printf_i+0x1f0>
 8005476:	f04f 30ff 	mov.w	r0, #4294967295
 800547a:	b004      	add	sp, #16
 800547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	f043 0320 	orr.w	r3, r3, #32
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	4832      	ldr	r0, [pc, #200]	@ (8005554 <_printf_i+0x238>)
 800548a:	2778      	movs	r7, #120	@ 0x78
 800548c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	6831      	ldr	r1, [r6, #0]
 8005494:	061f      	lsls	r7, r3, #24
 8005496:	f851 5b04 	ldr.w	r5, [r1], #4
 800549a:	d402      	bmi.n	80054a2 <_printf_i+0x186>
 800549c:	065f      	lsls	r7, r3, #25
 800549e:	bf48      	it	mi
 80054a0:	b2ad      	uxthmi	r5, r5
 80054a2:	6031      	str	r1, [r6, #0]
 80054a4:	07d9      	lsls	r1, r3, #31
 80054a6:	bf44      	itt	mi
 80054a8:	f043 0320 	orrmi.w	r3, r3, #32
 80054ac:	6023      	strmi	r3, [r4, #0]
 80054ae:	b11d      	cbz	r5, 80054b8 <_printf_i+0x19c>
 80054b0:	2310      	movs	r3, #16
 80054b2:	e7ad      	b.n	8005410 <_printf_i+0xf4>
 80054b4:	4826      	ldr	r0, [pc, #152]	@ (8005550 <_printf_i+0x234>)
 80054b6:	e7e9      	b.n	800548c <_printf_i+0x170>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	f023 0320 	bic.w	r3, r3, #32
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	e7f6      	b.n	80054b0 <_printf_i+0x194>
 80054c2:	4616      	mov	r6, r2
 80054c4:	e7bd      	b.n	8005442 <_printf_i+0x126>
 80054c6:	6833      	ldr	r3, [r6, #0]
 80054c8:	6825      	ldr	r5, [r4, #0]
 80054ca:	6961      	ldr	r1, [r4, #20]
 80054cc:	1d18      	adds	r0, r3, #4
 80054ce:	6030      	str	r0, [r6, #0]
 80054d0:	062e      	lsls	r6, r5, #24
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	d501      	bpl.n	80054da <_printf_i+0x1be>
 80054d6:	6019      	str	r1, [r3, #0]
 80054d8:	e002      	b.n	80054e0 <_printf_i+0x1c4>
 80054da:	0668      	lsls	r0, r5, #25
 80054dc:	d5fb      	bpl.n	80054d6 <_printf_i+0x1ba>
 80054de:	8019      	strh	r1, [r3, #0]
 80054e0:	2300      	movs	r3, #0
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	4616      	mov	r6, r2
 80054e6:	e7bc      	b.n	8005462 <_printf_i+0x146>
 80054e8:	6833      	ldr	r3, [r6, #0]
 80054ea:	1d1a      	adds	r2, r3, #4
 80054ec:	6032      	str	r2, [r6, #0]
 80054ee:	681e      	ldr	r6, [r3, #0]
 80054f0:	6862      	ldr	r2, [r4, #4]
 80054f2:	2100      	movs	r1, #0
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7fa fe73 	bl	80001e0 <memchr>
 80054fa:	b108      	cbz	r0, 8005500 <_printf_i+0x1e4>
 80054fc:	1b80      	subs	r0, r0, r6
 80054fe:	6060      	str	r0, [r4, #4]
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	2300      	movs	r3, #0
 8005506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550a:	e7aa      	b.n	8005462 <_printf_i+0x146>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	4632      	mov	r2, r6
 8005510:	4649      	mov	r1, r9
 8005512:	4640      	mov	r0, r8
 8005514:	47d0      	blx	sl
 8005516:	3001      	adds	r0, #1
 8005518:	d0ad      	beq.n	8005476 <_printf_i+0x15a>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	079b      	lsls	r3, r3, #30
 800551e:	d413      	bmi.n	8005548 <_printf_i+0x22c>
 8005520:	68e0      	ldr	r0, [r4, #12]
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	4298      	cmp	r0, r3
 8005526:	bfb8      	it	lt
 8005528:	4618      	movlt	r0, r3
 800552a:	e7a6      	b.n	800547a <_printf_i+0x15e>
 800552c:	2301      	movs	r3, #1
 800552e:	4632      	mov	r2, r6
 8005530:	4649      	mov	r1, r9
 8005532:	4640      	mov	r0, r8
 8005534:	47d0      	blx	sl
 8005536:	3001      	adds	r0, #1
 8005538:	d09d      	beq.n	8005476 <_printf_i+0x15a>
 800553a:	3501      	adds	r5, #1
 800553c:	68e3      	ldr	r3, [r4, #12]
 800553e:	9903      	ldr	r1, [sp, #12]
 8005540:	1a5b      	subs	r3, r3, r1
 8005542:	42ab      	cmp	r3, r5
 8005544:	dcf2      	bgt.n	800552c <_printf_i+0x210>
 8005546:	e7eb      	b.n	8005520 <_printf_i+0x204>
 8005548:	2500      	movs	r5, #0
 800554a:	f104 0619 	add.w	r6, r4, #25
 800554e:	e7f5      	b.n	800553c <_printf_i+0x220>
 8005550:	0800a256 	.word	0x0800a256
 8005554:	0800a267 	.word	0x0800a267

08005558 <_scanf_float>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	b087      	sub	sp, #28
 800555e:	4691      	mov	r9, r2
 8005560:	9303      	str	r3, [sp, #12]
 8005562:	688b      	ldr	r3, [r1, #8]
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800556a:	bf81      	itttt	hi
 800556c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005570:	eb03 0b05 	addhi.w	fp, r3, r5
 8005574:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005578:	608b      	strhi	r3, [r1, #8]
 800557a:	680b      	ldr	r3, [r1, #0]
 800557c:	460a      	mov	r2, r1
 800557e:	f04f 0500 	mov.w	r5, #0
 8005582:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005586:	f842 3b1c 	str.w	r3, [r2], #28
 800558a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800558e:	4680      	mov	r8, r0
 8005590:	460c      	mov	r4, r1
 8005592:	bf98      	it	ls
 8005594:	f04f 0b00 	movls.w	fp, #0
 8005598:	9201      	str	r2, [sp, #4]
 800559a:	4616      	mov	r6, r2
 800559c:	46aa      	mov	sl, r5
 800559e:	462f      	mov	r7, r5
 80055a0:	9502      	str	r5, [sp, #8]
 80055a2:	68a2      	ldr	r2, [r4, #8]
 80055a4:	b15a      	cbz	r2, 80055be <_scanf_float+0x66>
 80055a6:	f8d9 3000 	ldr.w	r3, [r9]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b4e      	cmp	r3, #78	@ 0x4e
 80055ae:	d863      	bhi.n	8005678 <_scanf_float+0x120>
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d83b      	bhi.n	800562c <_scanf_float+0xd4>
 80055b4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80055b8:	b2c8      	uxtb	r0, r1
 80055ba:	280e      	cmp	r0, #14
 80055bc:	d939      	bls.n	8005632 <_scanf_float+0xda>
 80055be:	b11f      	cbz	r7, 80055c8 <_scanf_float+0x70>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055cc:	f1ba 0f01 	cmp.w	sl, #1
 80055d0:	f200 8114 	bhi.w	80057fc <_scanf_float+0x2a4>
 80055d4:	9b01      	ldr	r3, [sp, #4]
 80055d6:	429e      	cmp	r6, r3
 80055d8:	f200 8105 	bhi.w	80057e6 <_scanf_float+0x28e>
 80055dc:	2001      	movs	r0, #1
 80055de:	b007      	add	sp, #28
 80055e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80055e8:	2a0d      	cmp	r2, #13
 80055ea:	d8e8      	bhi.n	80055be <_scanf_float+0x66>
 80055ec:	a101      	add	r1, pc, #4	@ (adr r1, 80055f4 <_scanf_float+0x9c>)
 80055ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	0800573d 	.word	0x0800573d
 80055f8:	080055bf 	.word	0x080055bf
 80055fc:	080055bf 	.word	0x080055bf
 8005600:	080055bf 	.word	0x080055bf
 8005604:	08005799 	.word	0x08005799
 8005608:	08005773 	.word	0x08005773
 800560c:	080055bf 	.word	0x080055bf
 8005610:	080055bf 	.word	0x080055bf
 8005614:	0800574b 	.word	0x0800574b
 8005618:	080055bf 	.word	0x080055bf
 800561c:	080055bf 	.word	0x080055bf
 8005620:	080055bf 	.word	0x080055bf
 8005624:	080055bf 	.word	0x080055bf
 8005628:	08005707 	.word	0x08005707
 800562c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005630:	e7da      	b.n	80055e8 <_scanf_float+0x90>
 8005632:	290e      	cmp	r1, #14
 8005634:	d8c3      	bhi.n	80055be <_scanf_float+0x66>
 8005636:	a001      	add	r0, pc, #4	@ (adr r0, 800563c <_scanf_float+0xe4>)
 8005638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800563c:	080056f7 	.word	0x080056f7
 8005640:	080055bf 	.word	0x080055bf
 8005644:	080056f7 	.word	0x080056f7
 8005648:	08005787 	.word	0x08005787
 800564c:	080055bf 	.word	0x080055bf
 8005650:	08005699 	.word	0x08005699
 8005654:	080056dd 	.word	0x080056dd
 8005658:	080056dd 	.word	0x080056dd
 800565c:	080056dd 	.word	0x080056dd
 8005660:	080056dd 	.word	0x080056dd
 8005664:	080056dd 	.word	0x080056dd
 8005668:	080056dd 	.word	0x080056dd
 800566c:	080056dd 	.word	0x080056dd
 8005670:	080056dd 	.word	0x080056dd
 8005674:	080056dd 	.word	0x080056dd
 8005678:	2b6e      	cmp	r3, #110	@ 0x6e
 800567a:	d809      	bhi.n	8005690 <_scanf_float+0x138>
 800567c:	2b60      	cmp	r3, #96	@ 0x60
 800567e:	d8b1      	bhi.n	80055e4 <_scanf_float+0x8c>
 8005680:	2b54      	cmp	r3, #84	@ 0x54
 8005682:	d07b      	beq.n	800577c <_scanf_float+0x224>
 8005684:	2b59      	cmp	r3, #89	@ 0x59
 8005686:	d19a      	bne.n	80055be <_scanf_float+0x66>
 8005688:	2d07      	cmp	r5, #7
 800568a:	d198      	bne.n	80055be <_scanf_float+0x66>
 800568c:	2508      	movs	r5, #8
 800568e:	e02f      	b.n	80056f0 <_scanf_float+0x198>
 8005690:	2b74      	cmp	r3, #116	@ 0x74
 8005692:	d073      	beq.n	800577c <_scanf_float+0x224>
 8005694:	2b79      	cmp	r3, #121	@ 0x79
 8005696:	e7f6      	b.n	8005686 <_scanf_float+0x12e>
 8005698:	6821      	ldr	r1, [r4, #0]
 800569a:	05c8      	lsls	r0, r1, #23
 800569c:	d51e      	bpl.n	80056dc <_scanf_float+0x184>
 800569e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80056a2:	6021      	str	r1, [r4, #0]
 80056a4:	3701      	adds	r7, #1
 80056a6:	f1bb 0f00 	cmp.w	fp, #0
 80056aa:	d003      	beq.n	80056b4 <_scanf_float+0x15c>
 80056ac:	3201      	adds	r2, #1
 80056ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056b2:	60a2      	str	r2, [r4, #8]
 80056b4:	68a3      	ldr	r3, [r4, #8]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	60a3      	str	r3, [r4, #8]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	3301      	adds	r3, #1
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80056cc:	f340 8082 	ble.w	80057d4 <_scanf_float+0x27c>
 80056d0:	f8d9 3000 	ldr.w	r3, [r9]
 80056d4:	3301      	adds	r3, #1
 80056d6:	f8c9 3000 	str.w	r3, [r9]
 80056da:	e762      	b.n	80055a2 <_scanf_float+0x4a>
 80056dc:	eb1a 0105 	adds.w	r1, sl, r5
 80056e0:	f47f af6d 	bne.w	80055be <_scanf_float+0x66>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80056ea:	6022      	str	r2, [r4, #0]
 80056ec:	460d      	mov	r5, r1
 80056ee:	468a      	mov	sl, r1
 80056f0:	f806 3b01 	strb.w	r3, [r6], #1
 80056f4:	e7de      	b.n	80056b4 <_scanf_float+0x15c>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	0610      	lsls	r0, r2, #24
 80056fa:	f57f af60 	bpl.w	80055be <_scanf_float+0x66>
 80056fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005702:	6022      	str	r2, [r4, #0]
 8005704:	e7f4      	b.n	80056f0 <_scanf_float+0x198>
 8005706:	f1ba 0f00 	cmp.w	sl, #0
 800570a:	d10c      	bne.n	8005726 <_scanf_float+0x1ce>
 800570c:	b977      	cbnz	r7, 800572c <_scanf_float+0x1d4>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005714:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005718:	d108      	bne.n	800572c <_scanf_float+0x1d4>
 800571a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800571e:	6022      	str	r2, [r4, #0]
 8005720:	f04f 0a01 	mov.w	sl, #1
 8005724:	e7e4      	b.n	80056f0 <_scanf_float+0x198>
 8005726:	f1ba 0f02 	cmp.w	sl, #2
 800572a:	d050      	beq.n	80057ce <_scanf_float+0x276>
 800572c:	2d01      	cmp	r5, #1
 800572e:	d002      	beq.n	8005736 <_scanf_float+0x1de>
 8005730:	2d04      	cmp	r5, #4
 8005732:	f47f af44 	bne.w	80055be <_scanf_float+0x66>
 8005736:	3501      	adds	r5, #1
 8005738:	b2ed      	uxtb	r5, r5
 800573a:	e7d9      	b.n	80056f0 <_scanf_float+0x198>
 800573c:	f1ba 0f01 	cmp.w	sl, #1
 8005740:	f47f af3d 	bne.w	80055be <_scanf_float+0x66>
 8005744:	f04f 0a02 	mov.w	sl, #2
 8005748:	e7d2      	b.n	80056f0 <_scanf_float+0x198>
 800574a:	b975      	cbnz	r5, 800576a <_scanf_float+0x212>
 800574c:	2f00      	cmp	r7, #0
 800574e:	f47f af37 	bne.w	80055c0 <_scanf_float+0x68>
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005758:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800575c:	f040 8103 	bne.w	8005966 <_scanf_float+0x40e>
 8005760:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	2501      	movs	r5, #1
 8005768:	e7c2      	b.n	80056f0 <_scanf_float+0x198>
 800576a:	2d03      	cmp	r5, #3
 800576c:	d0e3      	beq.n	8005736 <_scanf_float+0x1de>
 800576e:	2d05      	cmp	r5, #5
 8005770:	e7df      	b.n	8005732 <_scanf_float+0x1da>
 8005772:	2d02      	cmp	r5, #2
 8005774:	f47f af23 	bne.w	80055be <_scanf_float+0x66>
 8005778:	2503      	movs	r5, #3
 800577a:	e7b9      	b.n	80056f0 <_scanf_float+0x198>
 800577c:	2d06      	cmp	r5, #6
 800577e:	f47f af1e 	bne.w	80055be <_scanf_float+0x66>
 8005782:	2507      	movs	r5, #7
 8005784:	e7b4      	b.n	80056f0 <_scanf_float+0x198>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	0591      	lsls	r1, r2, #22
 800578a:	f57f af18 	bpl.w	80055be <_scanf_float+0x66>
 800578e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	9702      	str	r7, [sp, #8]
 8005796:	e7ab      	b.n	80056f0 <_scanf_float+0x198>
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800579e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80057a2:	d005      	beq.n	80057b0 <_scanf_float+0x258>
 80057a4:	0550      	lsls	r0, r2, #21
 80057a6:	f57f af0a 	bpl.w	80055be <_scanf_float+0x66>
 80057aa:	2f00      	cmp	r7, #0
 80057ac:	f000 80db 	beq.w	8005966 <_scanf_float+0x40e>
 80057b0:	0591      	lsls	r1, r2, #22
 80057b2:	bf58      	it	pl
 80057b4:	9902      	ldrpl	r1, [sp, #8]
 80057b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057ba:	bf58      	it	pl
 80057bc:	1a79      	subpl	r1, r7, r1
 80057be:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80057c2:	bf58      	it	pl
 80057c4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	2700      	movs	r7, #0
 80057cc:	e790      	b.n	80056f0 <_scanf_float+0x198>
 80057ce:	f04f 0a03 	mov.w	sl, #3
 80057d2:	e78d      	b.n	80056f0 <_scanf_float+0x198>
 80057d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80057d8:	4649      	mov	r1, r9
 80057da:	4640      	mov	r0, r8
 80057dc:	4798      	blx	r3
 80057de:	2800      	cmp	r0, #0
 80057e0:	f43f aedf 	beq.w	80055a2 <_scanf_float+0x4a>
 80057e4:	e6eb      	b.n	80055be <_scanf_float+0x66>
 80057e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057ee:	464a      	mov	r2, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	4798      	blx	r3
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	e6eb      	b.n	80055d4 <_scanf_float+0x7c>
 80057fc:	1e6b      	subs	r3, r5, #1
 80057fe:	2b06      	cmp	r3, #6
 8005800:	d824      	bhi.n	800584c <_scanf_float+0x2f4>
 8005802:	2d02      	cmp	r5, #2
 8005804:	d836      	bhi.n	8005874 <_scanf_float+0x31c>
 8005806:	9b01      	ldr	r3, [sp, #4]
 8005808:	429e      	cmp	r6, r3
 800580a:	f67f aee7 	bls.w	80055dc <_scanf_float+0x84>
 800580e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005816:	464a      	mov	r2, r9
 8005818:	4640      	mov	r0, r8
 800581a:	4798      	blx	r3
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	3b01      	subs	r3, #1
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	e7f0      	b.n	8005806 <_scanf_float+0x2ae>
 8005824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005828:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800582c:	464a      	mov	r2, r9
 800582e:	4640      	mov	r0, r8
 8005830:	4798      	blx	r3
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	3b01      	subs	r3, #1
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	f10a 3aff 	add.w	sl, sl, #4294967295
 800583c:	fa5f fa8a 	uxtb.w	sl, sl
 8005840:	f1ba 0f02 	cmp.w	sl, #2
 8005844:	d1ee      	bne.n	8005824 <_scanf_float+0x2cc>
 8005846:	3d03      	subs	r5, #3
 8005848:	b2ed      	uxtb	r5, r5
 800584a:	1b76      	subs	r6, r6, r5
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	05da      	lsls	r2, r3, #23
 8005850:	d530      	bpl.n	80058b4 <_scanf_float+0x35c>
 8005852:	055b      	lsls	r3, r3, #21
 8005854:	d511      	bpl.n	800587a <_scanf_float+0x322>
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	429e      	cmp	r6, r3
 800585a:	f67f aebf 	bls.w	80055dc <_scanf_float+0x84>
 800585e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005866:	464a      	mov	r2, r9
 8005868:	4640      	mov	r0, r8
 800586a:	4798      	blx	r3
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	3b01      	subs	r3, #1
 8005870:	6123      	str	r3, [r4, #16]
 8005872:	e7f0      	b.n	8005856 <_scanf_float+0x2fe>
 8005874:	46aa      	mov	sl, r5
 8005876:	46b3      	mov	fp, r6
 8005878:	e7de      	b.n	8005838 <_scanf_float+0x2e0>
 800587a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	2965      	cmp	r1, #101	@ 0x65
 8005882:	f103 33ff 	add.w	r3, r3, #4294967295
 8005886:	f106 35ff 	add.w	r5, r6, #4294967295
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	d00c      	beq.n	80058a8 <_scanf_float+0x350>
 800588e:	2945      	cmp	r1, #69	@ 0x45
 8005890:	d00a      	beq.n	80058a8 <_scanf_float+0x350>
 8005892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005896:	464a      	mov	r2, r9
 8005898:	4640      	mov	r0, r8
 800589a:	4798      	blx	r3
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	1eb5      	subs	r5, r6, #2
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ac:	464a      	mov	r2, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	4798      	blx	r3
 80058b2:	462e      	mov	r6, r5
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	f012 0210 	ands.w	r2, r2, #16
 80058ba:	d001      	beq.n	80058c0 <_scanf_float+0x368>
 80058bc:	2000      	movs	r0, #0
 80058be:	e68e      	b.n	80055de <_scanf_float+0x86>
 80058c0:	7032      	strb	r2, [r6, #0]
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058cc:	d125      	bne.n	800591a <_scanf_float+0x3c2>
 80058ce:	9b02      	ldr	r3, [sp, #8]
 80058d0:	429f      	cmp	r7, r3
 80058d2:	d00a      	beq.n	80058ea <_scanf_float+0x392>
 80058d4:	1bda      	subs	r2, r3, r7
 80058d6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80058da:	429e      	cmp	r6, r3
 80058dc:	bf28      	it	cs
 80058de:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80058e2:	4922      	ldr	r1, [pc, #136]	@ (800596c <_scanf_float+0x414>)
 80058e4:	4630      	mov	r0, r6
 80058e6:	f000 f94f 	bl	8005b88 <siprintf>
 80058ea:	9901      	ldr	r1, [sp, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	4640      	mov	r0, r8
 80058f0:	f002 fc3a 	bl	8008168 <_strtod_r>
 80058f4:	9b03      	ldr	r3, [sp, #12]
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f011 0f02 	tst.w	r1, #2
 80058fe:	ec57 6b10 	vmov	r6, r7, d0
 8005902:	f103 0204 	add.w	r2, r3, #4
 8005906:	d015      	beq.n	8005934 <_scanf_float+0x3dc>
 8005908:	9903      	ldr	r1, [sp, #12]
 800590a:	600a      	str	r2, [r1, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	e9c3 6700 	strd	r6, r7, [r3]
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60e3      	str	r3, [r4, #12]
 8005918:	e7d0      	b.n	80058bc <_scanf_float+0x364>
 800591a:	9b04      	ldr	r3, [sp, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0e4      	beq.n	80058ea <_scanf_float+0x392>
 8005920:	9905      	ldr	r1, [sp, #20]
 8005922:	230a      	movs	r3, #10
 8005924:	3101      	adds	r1, #1
 8005926:	4640      	mov	r0, r8
 8005928:	f002 fc9e 	bl	8008268 <_strtol_r>
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	9e05      	ldr	r6, [sp, #20]
 8005930:	1ac2      	subs	r2, r0, r3
 8005932:	e7d0      	b.n	80058d6 <_scanf_float+0x37e>
 8005934:	f011 0f04 	tst.w	r1, #4
 8005938:	9903      	ldr	r1, [sp, #12]
 800593a:	600a      	str	r2, [r1, #0]
 800593c:	d1e6      	bne.n	800590c <_scanf_float+0x3b4>
 800593e:	681d      	ldr	r5, [r3, #0]
 8005940:	4632      	mov	r2, r6
 8005942:	463b      	mov	r3, r7
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fb f8f8 	bl	8000b3c <__aeabi_dcmpun>
 800594c:	b128      	cbz	r0, 800595a <_scanf_float+0x402>
 800594e:	4808      	ldr	r0, [pc, #32]	@ (8005970 <_scanf_float+0x418>)
 8005950:	f000 fa00 	bl	8005d54 <nanf>
 8005954:	ed85 0a00 	vstr	s0, [r5]
 8005958:	e7db      	b.n	8005912 <_scanf_float+0x3ba>
 800595a:	4630      	mov	r0, r6
 800595c:	4639      	mov	r1, r7
 800595e:	f7fb f94b 	bl	8000bf8 <__aeabi_d2f>
 8005962:	6028      	str	r0, [r5, #0]
 8005964:	e7d5      	b.n	8005912 <_scanf_float+0x3ba>
 8005966:	2700      	movs	r7, #0
 8005968:	e62e      	b.n	80055c8 <_scanf_float+0x70>
 800596a:	bf00      	nop
 800596c:	0800a278 	.word	0x0800a278
 8005970:	0800a3b9 	.word	0x0800a3b9

08005974 <std>:
 8005974:	2300      	movs	r3, #0
 8005976:	b510      	push	{r4, lr}
 8005978:	4604      	mov	r4, r0
 800597a:	e9c0 3300 	strd	r3, r3, [r0]
 800597e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005982:	6083      	str	r3, [r0, #8]
 8005984:	8181      	strh	r1, [r0, #12]
 8005986:	6643      	str	r3, [r0, #100]	@ 0x64
 8005988:	81c2      	strh	r2, [r0, #14]
 800598a:	6183      	str	r3, [r0, #24]
 800598c:	4619      	mov	r1, r3
 800598e:	2208      	movs	r2, #8
 8005990:	305c      	adds	r0, #92	@ 0x5c
 8005992:	f000 f95e 	bl	8005c52 <memset>
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x58>)
 8005998:	6263      	str	r3, [r4, #36]	@ 0x24
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x5c>)
 800599c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <std+0x60>)
 80059a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <std+0x64>)
 80059a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <std+0x68>)
 80059a8:	6224      	str	r4, [r4, #32]
 80059aa:	429c      	cmp	r4, r3
 80059ac:	d006      	beq.n	80059bc <std+0x48>
 80059ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059b2:	4294      	cmp	r4, r2
 80059b4:	d002      	beq.n	80059bc <std+0x48>
 80059b6:	33d0      	adds	r3, #208	@ 0xd0
 80059b8:	429c      	cmp	r4, r3
 80059ba:	d105      	bne.n	80059c8 <std+0x54>
 80059bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c4:	f000 b9c2 	b.w	8005d4c <__retarget_lock_init_recursive>
 80059c8:	bd10      	pop	{r4, pc}
 80059ca:	bf00      	nop
 80059cc:	08005bcd 	.word	0x08005bcd
 80059d0:	08005bef 	.word	0x08005bef
 80059d4:	08005c27 	.word	0x08005c27
 80059d8:	08005c4b 	.word	0x08005c4b
 80059dc:	200002f8 	.word	0x200002f8

080059e0 <stdio_exit_handler>:
 80059e0:	4a02      	ldr	r2, [pc, #8]	@ (80059ec <stdio_exit_handler+0xc>)
 80059e2:	4903      	ldr	r1, [pc, #12]	@ (80059f0 <stdio_exit_handler+0x10>)
 80059e4:	4803      	ldr	r0, [pc, #12]	@ (80059f4 <stdio_exit_handler+0x14>)
 80059e6:	f000 b869 	b.w	8005abc <_fwalk_sglue>
 80059ea:	bf00      	nop
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	080088a9 	.word	0x080088a9
 80059f4:	2000001c 	.word	0x2000001c

080059f8 <cleanup_stdio>:
 80059f8:	6841      	ldr	r1, [r0, #4]
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <cleanup_stdio+0x34>)
 80059fc:	4299      	cmp	r1, r3
 80059fe:	b510      	push	{r4, lr}
 8005a00:	4604      	mov	r4, r0
 8005a02:	d001      	beq.n	8005a08 <cleanup_stdio+0x10>
 8005a04:	f002 ff50 	bl	80088a8 <_fflush_r>
 8005a08:	68a1      	ldr	r1, [r4, #8]
 8005a0a:	4b09      	ldr	r3, [pc, #36]	@ (8005a30 <cleanup_stdio+0x38>)
 8005a0c:	4299      	cmp	r1, r3
 8005a0e:	d002      	beq.n	8005a16 <cleanup_stdio+0x1e>
 8005a10:	4620      	mov	r0, r4
 8005a12:	f002 ff49 	bl	80088a8 <_fflush_r>
 8005a16:	68e1      	ldr	r1, [r4, #12]
 8005a18:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <cleanup_stdio+0x3c>)
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	d004      	beq.n	8005a28 <cleanup_stdio+0x30>
 8005a1e:	4620      	mov	r0, r4
 8005a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a24:	f002 bf40 	b.w	80088a8 <_fflush_r>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200002f8 	.word	0x200002f8
 8005a30:	20000360 	.word	0x20000360
 8005a34:	200003c8 	.word	0x200003c8

08005a38 <global_stdio_init.part.0>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <global_stdio_init.part.0+0x30>)
 8005a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8005a6c <global_stdio_init.part.0+0x34>)
 8005a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a70 <global_stdio_init.part.0+0x38>)
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	4620      	mov	r0, r4
 8005a44:	2200      	movs	r2, #0
 8005a46:	2104      	movs	r1, #4
 8005a48:	f7ff ff94 	bl	8005974 <std>
 8005a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a50:	2201      	movs	r2, #1
 8005a52:	2109      	movs	r1, #9
 8005a54:	f7ff ff8e 	bl	8005974 <std>
 8005a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a62:	2112      	movs	r1, #18
 8005a64:	f7ff bf86 	b.w	8005974 <std>
 8005a68:	20000430 	.word	0x20000430
 8005a6c:	200002f8 	.word	0x200002f8
 8005a70:	080059e1 	.word	0x080059e1

08005a74 <__sfp_lock_acquire>:
 8005a74:	4801      	ldr	r0, [pc, #4]	@ (8005a7c <__sfp_lock_acquire+0x8>)
 8005a76:	f000 b96a 	b.w	8005d4e <__retarget_lock_acquire_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000439 	.word	0x20000439

08005a80 <__sfp_lock_release>:
 8005a80:	4801      	ldr	r0, [pc, #4]	@ (8005a88 <__sfp_lock_release+0x8>)
 8005a82:	f000 b965 	b.w	8005d50 <__retarget_lock_release_recursive>
 8005a86:	bf00      	nop
 8005a88:	20000439 	.word	0x20000439

08005a8c <__sinit>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4604      	mov	r4, r0
 8005a90:	f7ff fff0 	bl	8005a74 <__sfp_lock_acquire>
 8005a94:	6a23      	ldr	r3, [r4, #32]
 8005a96:	b11b      	cbz	r3, 8005aa0 <__sinit+0x14>
 8005a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a9c:	f7ff bff0 	b.w	8005a80 <__sfp_lock_release>
 8005aa0:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <__sinit+0x28>)
 8005aa2:	6223      	str	r3, [r4, #32]
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <__sinit+0x2c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f5      	bne.n	8005a98 <__sinit+0xc>
 8005aac:	f7ff ffc4 	bl	8005a38 <global_stdio_init.part.0>
 8005ab0:	e7f2      	b.n	8005a98 <__sinit+0xc>
 8005ab2:	bf00      	nop
 8005ab4:	080059f9 	.word	0x080059f9
 8005ab8:	20000430 	.word	0x20000430

08005abc <_fwalk_sglue>:
 8005abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	4688      	mov	r8, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005acc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ad0:	d505      	bpl.n	8005ade <_fwalk_sglue+0x22>
 8005ad2:	6824      	ldr	r4, [r4, #0]
 8005ad4:	2c00      	cmp	r4, #0
 8005ad6:	d1f7      	bne.n	8005ac8 <_fwalk_sglue+0xc>
 8005ad8:	4630      	mov	r0, r6
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d907      	bls.n	8005af4 <_fwalk_sglue+0x38>
 8005ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	d003      	beq.n	8005af4 <_fwalk_sglue+0x38>
 8005aec:	4629      	mov	r1, r5
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c0      	blx	r8
 8005af2:	4306      	orrs	r6, r0
 8005af4:	3568      	adds	r5, #104	@ 0x68
 8005af6:	e7e9      	b.n	8005acc <_fwalk_sglue+0x10>

08005af8 <iprintf>:
 8005af8:	b40f      	push	{r0, r1, r2, r3}
 8005afa:	b507      	push	{r0, r1, r2, lr}
 8005afc:	4906      	ldr	r1, [pc, #24]	@ (8005b18 <iprintf+0x20>)
 8005afe:	ab04      	add	r3, sp, #16
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b06:	6881      	ldr	r1, [r0, #8]
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	f002 fd31 	bl	8008570 <_vfiprintf_r>
 8005b0e:	b003      	add	sp, #12
 8005b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b14:	b004      	add	sp, #16
 8005b16:	4770      	bx	lr
 8005b18:	20000018 	.word	0x20000018

08005b1c <sniprintf>:
 8005b1c:	b40c      	push	{r2, r3}
 8005b1e:	b530      	push	{r4, r5, lr}
 8005b20:	4b18      	ldr	r3, [pc, #96]	@ (8005b84 <sniprintf+0x68>)
 8005b22:	1e0c      	subs	r4, r1, #0
 8005b24:	681d      	ldr	r5, [r3, #0]
 8005b26:	b09d      	sub	sp, #116	@ 0x74
 8005b28:	da08      	bge.n	8005b3c <sniprintf+0x20>
 8005b2a:	238b      	movs	r3, #139	@ 0x8b
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b32:	b01d      	add	sp, #116	@ 0x74
 8005b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b38:	b002      	add	sp, #8
 8005b3a:	4770      	bx	lr
 8005b3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005b4a:	bf14      	ite	ne
 8005b4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b50:	4623      	moveq	r3, r4
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	9307      	str	r3, [sp, #28]
 8005b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b5a:	9002      	str	r0, [sp, #8]
 8005b5c:	9006      	str	r0, [sp, #24]
 8005b5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b64:	ab21      	add	r3, sp, #132	@ 0x84
 8005b66:	a902      	add	r1, sp, #8
 8005b68:	4628      	mov	r0, r5
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	f002 fbda 	bl	8008324 <_svfiprintf_r>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	bfbc      	itt	lt
 8005b74:	238b      	movlt	r3, #139	@ 0x8b
 8005b76:	602b      	strlt	r3, [r5, #0]
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	d0da      	beq.n	8005b32 <sniprintf+0x16>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	e7d6      	b.n	8005b32 <sniprintf+0x16>
 8005b84:	20000018 	.word	0x20000018

08005b88 <siprintf>:
 8005b88:	b40e      	push	{r1, r2, r3}
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	b09d      	sub	sp, #116	@ 0x74
 8005b8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b90:	9002      	str	r0, [sp, #8]
 8005b92:	9006      	str	r0, [sp, #24]
 8005b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b98:	480a      	ldr	r0, [pc, #40]	@ (8005bc4 <siprintf+0x3c>)
 8005b9a:	9107      	str	r1, [sp, #28]
 8005b9c:	9104      	str	r1, [sp, #16]
 8005b9e:	490a      	ldr	r1, [pc, #40]	@ (8005bc8 <siprintf+0x40>)
 8005ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba4:	9105      	str	r1, [sp, #20]
 8005ba6:	2400      	movs	r4, #0
 8005ba8:	a902      	add	r1, sp, #8
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005bb0:	f002 fbb8 	bl	8008324 <_svfiprintf_r>
 8005bb4:	9b02      	ldr	r3, [sp, #8]
 8005bb6:	701c      	strb	r4, [r3, #0]
 8005bb8:	b01d      	add	sp, #116	@ 0x74
 8005bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bbe:	b003      	add	sp, #12
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000018 	.word	0x20000018
 8005bc8:	ffff0208 	.word	0xffff0208

08005bcc <__sread>:
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	460c      	mov	r4, r1
 8005bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd4:	f000 f86c 	bl	8005cb0 <_read_r>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	bfab      	itete	ge
 8005bdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bde:	89a3      	ldrhlt	r3, [r4, #12]
 8005be0:	181b      	addge	r3, r3, r0
 8005be2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005be6:	bfac      	ite	ge
 8005be8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bea:	81a3      	strhlt	r3, [r4, #12]
 8005bec:	bd10      	pop	{r4, pc}

08005bee <__swrite>:
 8005bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf2:	461f      	mov	r7, r3
 8005bf4:	898b      	ldrh	r3, [r1, #12]
 8005bf6:	05db      	lsls	r3, r3, #23
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	d505      	bpl.n	8005c0c <__swrite+0x1e>
 8005c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c04:	2302      	movs	r3, #2
 8005c06:	2200      	movs	r2, #0
 8005c08:	f000 f840 	bl	8005c8c <_lseek_r>
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	f000 b857 	b.w	8005cd4 <_write_r>

08005c26 <__sseek>:
 8005c26:	b510      	push	{r4, lr}
 8005c28:	460c      	mov	r4, r1
 8005c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2e:	f000 f82d 	bl	8005c8c <_lseek_r>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	bf15      	itete	ne
 8005c38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c42:	81a3      	strheq	r3, [r4, #12]
 8005c44:	bf18      	it	ne
 8005c46:	81a3      	strhne	r3, [r4, #12]
 8005c48:	bd10      	pop	{r4, pc}

08005c4a <__sclose>:
 8005c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4e:	f000 b80d 	b.w	8005c6c <_close_r>

08005c52 <memset>:
 8005c52:	4402      	add	r2, r0
 8005c54:	4603      	mov	r3, r0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d100      	bne.n	8005c5c <memset+0xa>
 8005c5a:	4770      	bx	lr
 8005c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005c60:	e7f9      	b.n	8005c56 <memset+0x4>
	...

08005c64 <_localeconv_r>:
 8005c64:	4800      	ldr	r0, [pc, #0]	@ (8005c68 <_localeconv_r+0x4>)
 8005c66:	4770      	bx	lr
 8005c68:	20000158 	.word	0x20000158

08005c6c <_close_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	@ (8005c88 <_close_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fc fa6a 	bl	8002150 <_close>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_close_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_close_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20000434 	.word	0x20000434

08005c8c <_lseek_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	@ (8005cac <_lseek_r+0x20>)
 8005c90:	4604      	mov	r4, r0
 8005c92:	4608      	mov	r0, r1
 8005c94:	4611      	mov	r1, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	602a      	str	r2, [r5, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f7fc fa7f 	bl	800219e <_lseek>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_lseek_r+0x1e>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_lseek_r+0x1e>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20000434 	.word	0x20000434

08005cb0 <_read_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d07      	ldr	r5, [pc, #28]	@ (8005cd0 <_read_r+0x20>)
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	4608      	mov	r0, r1
 8005cb8:	4611      	mov	r1, r2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	602a      	str	r2, [r5, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fc fa0d 	bl	80020de <_read>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_read_r+0x1e>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_read_r+0x1e>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20000434 	.word	0x20000434

08005cd4 <_write_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	@ (8005cf4 <_write_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fc fa18 	bl	8002118 <_write>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_write_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_write_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000434 	.word	0x20000434

08005cf8 <__errno>:
 8005cf8:	4b01      	ldr	r3, [pc, #4]	@ (8005d00 <__errno+0x8>)
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000018 	.word	0x20000018

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4d0d      	ldr	r5, [pc, #52]	@ (8005d3c <__libc_init_array+0x38>)
 8005d08:	4c0d      	ldr	r4, [pc, #52]	@ (8005d40 <__libc_init_array+0x3c>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	2600      	movs	r6, #0
 8005d10:	42a6      	cmp	r6, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	4d0b      	ldr	r5, [pc, #44]	@ (8005d44 <__libc_init_array+0x40>)
 8005d16:	4c0c      	ldr	r4, [pc, #48]	@ (8005d48 <__libc_init_array+0x44>)
 8005d18:	f003 fb78 	bl	800940c <_init>
 8005d1c:	1b64      	subs	r4, r4, r5
 8005d1e:	10a4      	asrs	r4, r4, #2
 8005d20:	2600      	movs	r6, #0
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2c:	4798      	blx	r3
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d36:	4798      	blx	r3
 8005d38:	3601      	adds	r6, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	0800a674 	.word	0x0800a674
 8005d40:	0800a674 	.word	0x0800a674
 8005d44:	0800a674 	.word	0x0800a674
 8005d48:	0800a678 	.word	0x0800a678

08005d4c <__retarget_lock_init_recursive>:
 8005d4c:	4770      	bx	lr

08005d4e <__retarget_lock_acquire_recursive>:
 8005d4e:	4770      	bx	lr

08005d50 <__retarget_lock_release_recursive>:
 8005d50:	4770      	bx	lr
	...

08005d54 <nanf>:
 8005d54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005d5c <nanf+0x8>
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	7fc00000 	.word	0x7fc00000

08005d60 <quorem>:
 8005d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	6903      	ldr	r3, [r0, #16]
 8005d66:	690c      	ldr	r4, [r1, #16]
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	4607      	mov	r7, r0
 8005d6c:	db7e      	blt.n	8005e6c <quorem+0x10c>
 8005d6e:	3c01      	subs	r4, #1
 8005d70:	f101 0814 	add.w	r8, r1, #20
 8005d74:	00a3      	lsls	r3, r4, #2
 8005d76:	f100 0514 	add.w	r5, r0, #20
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d92:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d96:	d32e      	bcc.n	8005df6 <quorem+0x96>
 8005d98:	f04f 0a00 	mov.w	sl, #0
 8005d9c:	46c4      	mov	ip, r8
 8005d9e:	46ae      	mov	lr, r5
 8005da0:	46d3      	mov	fp, sl
 8005da2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005da6:	b298      	uxth	r0, r3
 8005da8:	fb06 a000 	mla	r0, r6, r0, sl
 8005dac:	0c02      	lsrs	r2, r0, #16
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	fb06 2303 	mla	r3, r6, r3, r2
 8005db4:	f8de 2000 	ldr.w	r2, [lr]
 8005db8:	b280      	uxth	r0, r0
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	1a12      	subs	r2, r2, r0
 8005dbe:	445a      	add	r2, fp
 8005dc0:	f8de 0000 	ldr.w	r0, [lr]
 8005dc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005dce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005dd8:	45e1      	cmp	r9, ip
 8005dda:	f84e 2b04 	str.w	r2, [lr], #4
 8005dde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005de2:	d2de      	bcs.n	8005da2 <quorem+0x42>
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	58eb      	ldr	r3, [r5, r3]
 8005de8:	b92b      	cbnz	r3, 8005df6 <quorem+0x96>
 8005dea:	9b01      	ldr	r3, [sp, #4]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	429d      	cmp	r5, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	d32f      	bcc.n	8005e54 <quorem+0xf4>
 8005df4:	613c      	str	r4, [r7, #16]
 8005df6:	4638      	mov	r0, r7
 8005df8:	f001 f9c6 	bl	8007188 <__mcmp>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	db25      	blt.n	8005e4c <quorem+0xec>
 8005e00:	4629      	mov	r1, r5
 8005e02:	2000      	movs	r0, #0
 8005e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e08:	f8d1 c000 	ldr.w	ip, [r1]
 8005e0c:	fa1f fe82 	uxth.w	lr, r2
 8005e10:	fa1f f38c 	uxth.w	r3, ip
 8005e14:	eba3 030e 	sub.w	r3, r3, lr
 8005e18:	4403      	add	r3, r0
 8005e1a:	0c12      	lsrs	r2, r2, #16
 8005e1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e2a:	45c1      	cmp	r9, r8
 8005e2c:	f841 3b04 	str.w	r3, [r1], #4
 8005e30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e34:	d2e6      	bcs.n	8005e04 <quorem+0xa4>
 8005e36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e3e:	b922      	cbnz	r2, 8005e4a <quorem+0xea>
 8005e40:	3b04      	subs	r3, #4
 8005e42:	429d      	cmp	r5, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	d30b      	bcc.n	8005e60 <quorem+0x100>
 8005e48:	613c      	str	r4, [r7, #16]
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	b003      	add	sp, #12
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	3b04      	subs	r3, #4
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d1cb      	bne.n	8005df4 <quorem+0x94>
 8005e5c:	3c01      	subs	r4, #1
 8005e5e:	e7c6      	b.n	8005dee <quorem+0x8e>
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	3b04      	subs	r3, #4
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	d1ef      	bne.n	8005e48 <quorem+0xe8>
 8005e68:	3c01      	subs	r4, #1
 8005e6a:	e7ea      	b.n	8005e42 <quorem+0xe2>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e7ee      	b.n	8005e4e <quorem+0xee>

08005e70 <_dtoa_r>:
 8005e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	69c7      	ldr	r7, [r0, #28]
 8005e76:	b097      	sub	sp, #92	@ 0x5c
 8005e78:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005e7c:	ec55 4b10 	vmov	r4, r5, d0
 8005e80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005e82:	9107      	str	r1, [sp, #28]
 8005e84:	4681      	mov	r9, r0
 8005e86:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e88:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e8a:	b97f      	cbnz	r7, 8005eac <_dtoa_r+0x3c>
 8005e8c:	2010      	movs	r0, #16
 8005e8e:	f000 fe09 	bl	8006aa4 <malloc>
 8005e92:	4602      	mov	r2, r0
 8005e94:	f8c9 001c 	str.w	r0, [r9, #28]
 8005e98:	b920      	cbnz	r0, 8005ea4 <_dtoa_r+0x34>
 8005e9a:	4ba9      	ldr	r3, [pc, #676]	@ (8006140 <_dtoa_r+0x2d0>)
 8005e9c:	21ef      	movs	r1, #239	@ 0xef
 8005e9e:	48a9      	ldr	r0, [pc, #676]	@ (8006144 <_dtoa_r+0x2d4>)
 8005ea0:	f002 fe12 	bl	8008ac8 <__assert_func>
 8005ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ea8:	6007      	str	r7, [r0, #0]
 8005eaa:	60c7      	str	r7, [r0, #12]
 8005eac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005eb0:	6819      	ldr	r1, [r3, #0]
 8005eb2:	b159      	cbz	r1, 8005ecc <_dtoa_r+0x5c>
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	604a      	str	r2, [r1, #4]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4093      	lsls	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
 8005ebe:	4648      	mov	r0, r9
 8005ec0:	f000 fee6 	bl	8006c90 <_Bfree>
 8005ec4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	1e2b      	subs	r3, r5, #0
 8005ece:	bfb9      	ittee	lt
 8005ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ed4:	9305      	strlt	r3, [sp, #20]
 8005ed6:	2300      	movge	r3, #0
 8005ed8:	6033      	strge	r3, [r6, #0]
 8005eda:	9f05      	ldr	r7, [sp, #20]
 8005edc:	4b9a      	ldr	r3, [pc, #616]	@ (8006148 <_dtoa_r+0x2d8>)
 8005ede:	bfbc      	itt	lt
 8005ee0:	2201      	movlt	r2, #1
 8005ee2:	6032      	strlt	r2, [r6, #0]
 8005ee4:	43bb      	bics	r3, r7
 8005ee6:	d112      	bne.n	8005f0e <_dtoa_r+0x9e>
 8005ee8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ef4:	4323      	orrs	r3, r4
 8005ef6:	f000 855a 	beq.w	80069ae <_dtoa_r+0xb3e>
 8005efa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005efc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800615c <_dtoa_r+0x2ec>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 855c 	beq.w	80069be <_dtoa_r+0xb4e>
 8005f06:	f10a 0303 	add.w	r3, sl, #3
 8005f0a:	f000 bd56 	b.w	80069ba <_dtoa_r+0xb4a>
 8005f0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005f12:	2200      	movs	r2, #0
 8005f14:	ec51 0b17 	vmov	r0, r1, d7
 8005f18:	2300      	movs	r3, #0
 8005f1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005f1e:	f7fa fddb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f22:	4680      	mov	r8, r0
 8005f24:	b158      	cbz	r0, 8005f3e <_dtoa_r+0xce>
 8005f26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f28:	2301      	movs	r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f2e:	b113      	cbz	r3, 8005f36 <_dtoa_r+0xc6>
 8005f30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f32:	4b86      	ldr	r3, [pc, #536]	@ (800614c <_dtoa_r+0x2dc>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006160 <_dtoa_r+0x2f0>
 8005f3a:	f000 bd40 	b.w	80069be <_dtoa_r+0xb4e>
 8005f3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005f42:	aa14      	add	r2, sp, #80	@ 0x50
 8005f44:	a915      	add	r1, sp, #84	@ 0x54
 8005f46:	4648      	mov	r0, r9
 8005f48:	f001 fa3e 	bl	80073c8 <__d2b>
 8005f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f50:	9002      	str	r0, [sp, #8]
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d078      	beq.n	8006048 <_dtoa_r+0x1d8>
 8005f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f70:	4619      	mov	r1, r3
 8005f72:	2200      	movs	r2, #0
 8005f74:	4b76      	ldr	r3, [pc, #472]	@ (8006150 <_dtoa_r+0x2e0>)
 8005f76:	f7fa f98f 	bl	8000298 <__aeabi_dsub>
 8005f7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006128 <_dtoa_r+0x2b8>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa fb42 	bl	8000608 <__aeabi_dmul>
 8005f84:	a36a      	add	r3, pc, #424	@ (adr r3, 8006130 <_dtoa_r+0x2c0>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa f987 	bl	800029c <__adddf3>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4630      	mov	r0, r6
 8005f92:	460d      	mov	r5, r1
 8005f94:	f7fa face 	bl	8000534 <__aeabi_i2d>
 8005f98:	a367      	add	r3, pc, #412	@ (adr r3, 8006138 <_dtoa_r+0x2c8>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fb33 	bl	8000608 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa f977 	bl	800029c <__adddf3>
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	f7fa fdd9 	bl	8000b68 <__aeabi_d2iz>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4607      	mov	r7, r0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f7fa fd94 	bl	8000aec <__aeabi_dcmplt>
 8005fc4:	b140      	cbz	r0, 8005fd8 <_dtoa_r+0x168>
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7fa fab4 	bl	8000534 <__aeabi_i2d>
 8005fcc:	4622      	mov	r2, r4
 8005fce:	462b      	mov	r3, r5
 8005fd0:	f7fa fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fd4:	b900      	cbnz	r0, 8005fd8 <_dtoa_r+0x168>
 8005fd6:	3f01      	subs	r7, #1
 8005fd8:	2f16      	cmp	r7, #22
 8005fda:	d852      	bhi.n	8006082 <_dtoa_r+0x212>
 8005fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8006154 <_dtoa_r+0x2e4>)
 8005fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fea:	f7fa fd7f 	bl	8000aec <__aeabi_dcmplt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d049      	beq.n	8006086 <_dtoa_r+0x216>
 8005ff2:	3f01      	subs	r7, #1
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ff8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ffa:	1b9b      	subs	r3, r3, r6
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	bf45      	ittet	mi
 8006000:	f1c3 0301 	rsbmi	r3, r3, #1
 8006004:	9300      	strmi	r3, [sp, #0]
 8006006:	2300      	movpl	r3, #0
 8006008:	2300      	movmi	r3, #0
 800600a:	9206      	str	r2, [sp, #24]
 800600c:	bf54      	ite	pl
 800600e:	9300      	strpl	r3, [sp, #0]
 8006010:	9306      	strmi	r3, [sp, #24]
 8006012:	2f00      	cmp	r7, #0
 8006014:	db39      	blt.n	800608a <_dtoa_r+0x21a>
 8006016:	9b06      	ldr	r3, [sp, #24]
 8006018:	970d      	str	r7, [sp, #52]	@ 0x34
 800601a:	443b      	add	r3, r7
 800601c:	9306      	str	r3, [sp, #24]
 800601e:	2300      	movs	r3, #0
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	9b07      	ldr	r3, [sp, #28]
 8006024:	2b09      	cmp	r3, #9
 8006026:	d863      	bhi.n	80060f0 <_dtoa_r+0x280>
 8006028:	2b05      	cmp	r3, #5
 800602a:	bfc4      	itt	gt
 800602c:	3b04      	subgt	r3, #4
 800602e:	9307      	strgt	r3, [sp, #28]
 8006030:	9b07      	ldr	r3, [sp, #28]
 8006032:	f1a3 0302 	sub.w	r3, r3, #2
 8006036:	bfcc      	ite	gt
 8006038:	2400      	movgt	r4, #0
 800603a:	2401      	movle	r4, #1
 800603c:	2b03      	cmp	r3, #3
 800603e:	d863      	bhi.n	8006108 <_dtoa_r+0x298>
 8006040:	e8df f003 	tbb	[pc, r3]
 8006044:	2b375452 	.word	0x2b375452
 8006048:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800604c:	441e      	add	r6, r3
 800604e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006052:	2b20      	cmp	r3, #32
 8006054:	bfc1      	itttt	gt
 8006056:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800605a:	409f      	lslgt	r7, r3
 800605c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006060:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006064:	bfd6      	itet	le
 8006066:	f1c3 0320 	rsble	r3, r3, #32
 800606a:	ea47 0003 	orrgt.w	r0, r7, r3
 800606e:	fa04 f003 	lslle.w	r0, r4, r3
 8006072:	f7fa fa4f 	bl	8000514 <__aeabi_ui2d>
 8006076:	2201      	movs	r2, #1
 8006078:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800607c:	3e01      	subs	r6, #1
 800607e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006080:	e776      	b.n	8005f70 <_dtoa_r+0x100>
 8006082:	2301      	movs	r3, #1
 8006084:	e7b7      	b.n	8005ff6 <_dtoa_r+0x186>
 8006086:	9010      	str	r0, [sp, #64]	@ 0x40
 8006088:	e7b6      	b.n	8005ff8 <_dtoa_r+0x188>
 800608a:	9b00      	ldr	r3, [sp, #0]
 800608c:	1bdb      	subs	r3, r3, r7
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	427b      	negs	r3, r7
 8006092:	9308      	str	r3, [sp, #32]
 8006094:	2300      	movs	r3, #0
 8006096:	930d      	str	r3, [sp, #52]	@ 0x34
 8006098:	e7c3      	b.n	8006022 <_dtoa_r+0x1b2>
 800609a:	2301      	movs	r3, #1
 800609c:	9309      	str	r3, [sp, #36]	@ 0x24
 800609e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060a0:	eb07 0b03 	add.w	fp, r7, r3
 80060a4:	f10b 0301 	add.w	r3, fp, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	9303      	str	r3, [sp, #12]
 80060ac:	bfb8      	it	lt
 80060ae:	2301      	movlt	r3, #1
 80060b0:	e006      	b.n	80060c0 <_dtoa_r+0x250>
 80060b2:	2301      	movs	r3, #1
 80060b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	dd28      	ble.n	800610e <_dtoa_r+0x29e>
 80060bc:	469b      	mov	fp, r3
 80060be:	9303      	str	r3, [sp, #12]
 80060c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80060c4:	2100      	movs	r1, #0
 80060c6:	2204      	movs	r2, #4
 80060c8:	f102 0514 	add.w	r5, r2, #20
 80060cc:	429d      	cmp	r5, r3
 80060ce:	d926      	bls.n	800611e <_dtoa_r+0x2ae>
 80060d0:	6041      	str	r1, [r0, #4]
 80060d2:	4648      	mov	r0, r9
 80060d4:	f000 fd9c 	bl	8006c10 <_Balloc>
 80060d8:	4682      	mov	sl, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d142      	bne.n	8006164 <_dtoa_r+0x2f4>
 80060de:	4b1e      	ldr	r3, [pc, #120]	@ (8006158 <_dtoa_r+0x2e8>)
 80060e0:	4602      	mov	r2, r0
 80060e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80060e6:	e6da      	b.n	8005e9e <_dtoa_r+0x2e>
 80060e8:	2300      	movs	r3, #0
 80060ea:	e7e3      	b.n	80060b4 <_dtoa_r+0x244>
 80060ec:	2300      	movs	r3, #0
 80060ee:	e7d5      	b.n	800609c <_dtoa_r+0x22c>
 80060f0:	2401      	movs	r4, #1
 80060f2:	2300      	movs	r3, #0
 80060f4:	9307      	str	r3, [sp, #28]
 80060f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80060f8:	f04f 3bff 	mov.w	fp, #4294967295
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006102:	2312      	movs	r3, #18
 8006104:	920c      	str	r2, [sp, #48]	@ 0x30
 8006106:	e7db      	b.n	80060c0 <_dtoa_r+0x250>
 8006108:	2301      	movs	r3, #1
 800610a:	9309      	str	r3, [sp, #36]	@ 0x24
 800610c:	e7f4      	b.n	80060f8 <_dtoa_r+0x288>
 800610e:	f04f 0b01 	mov.w	fp, #1
 8006112:	f8cd b00c 	str.w	fp, [sp, #12]
 8006116:	465b      	mov	r3, fp
 8006118:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800611c:	e7d0      	b.n	80060c0 <_dtoa_r+0x250>
 800611e:	3101      	adds	r1, #1
 8006120:	0052      	lsls	r2, r2, #1
 8006122:	e7d1      	b.n	80060c8 <_dtoa_r+0x258>
 8006124:	f3af 8000 	nop.w
 8006128:	636f4361 	.word	0x636f4361
 800612c:	3fd287a7 	.word	0x3fd287a7
 8006130:	8b60c8b3 	.word	0x8b60c8b3
 8006134:	3fc68a28 	.word	0x3fc68a28
 8006138:	509f79fb 	.word	0x509f79fb
 800613c:	3fd34413 	.word	0x3fd34413
 8006140:	0800a28a 	.word	0x0800a28a
 8006144:	0800a2a1 	.word	0x0800a2a1
 8006148:	7ff00000 	.word	0x7ff00000
 800614c:	0800a255 	.word	0x0800a255
 8006150:	3ff80000 	.word	0x3ff80000
 8006154:	0800a450 	.word	0x0800a450
 8006158:	0800a2f9 	.word	0x0800a2f9
 800615c:	0800a286 	.word	0x0800a286
 8006160:	0800a254 	.word	0x0800a254
 8006164:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006168:	6018      	str	r0, [r3, #0]
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	2b0e      	cmp	r3, #14
 800616e:	f200 80a1 	bhi.w	80062b4 <_dtoa_r+0x444>
 8006172:	2c00      	cmp	r4, #0
 8006174:	f000 809e 	beq.w	80062b4 <_dtoa_r+0x444>
 8006178:	2f00      	cmp	r7, #0
 800617a:	dd33      	ble.n	80061e4 <_dtoa_r+0x374>
 800617c:	4b9c      	ldr	r3, [pc, #624]	@ (80063f0 <_dtoa_r+0x580>)
 800617e:	f007 020f 	and.w	r2, r7, #15
 8006182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006186:	ed93 7b00 	vldr	d7, [r3]
 800618a:	05f8      	lsls	r0, r7, #23
 800618c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006190:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006194:	d516      	bpl.n	80061c4 <_dtoa_r+0x354>
 8006196:	4b97      	ldr	r3, [pc, #604]	@ (80063f4 <_dtoa_r+0x584>)
 8006198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800619c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061a0:	f7fa fb5c 	bl	800085c <__aeabi_ddiv>
 80061a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061a8:	f004 040f 	and.w	r4, r4, #15
 80061ac:	2603      	movs	r6, #3
 80061ae:	4d91      	ldr	r5, [pc, #580]	@ (80063f4 <_dtoa_r+0x584>)
 80061b0:	b954      	cbnz	r4, 80061c8 <_dtoa_r+0x358>
 80061b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ba:	f7fa fb4f 	bl	800085c <__aeabi_ddiv>
 80061be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c2:	e028      	b.n	8006216 <_dtoa_r+0x3a6>
 80061c4:	2602      	movs	r6, #2
 80061c6:	e7f2      	b.n	80061ae <_dtoa_r+0x33e>
 80061c8:	07e1      	lsls	r1, r4, #31
 80061ca:	d508      	bpl.n	80061de <_dtoa_r+0x36e>
 80061cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061d4:	f7fa fa18 	bl	8000608 <__aeabi_dmul>
 80061d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061dc:	3601      	adds	r6, #1
 80061de:	1064      	asrs	r4, r4, #1
 80061e0:	3508      	adds	r5, #8
 80061e2:	e7e5      	b.n	80061b0 <_dtoa_r+0x340>
 80061e4:	f000 80af 	beq.w	8006346 <_dtoa_r+0x4d6>
 80061e8:	427c      	negs	r4, r7
 80061ea:	4b81      	ldr	r3, [pc, #516]	@ (80063f0 <_dtoa_r+0x580>)
 80061ec:	4d81      	ldr	r5, [pc, #516]	@ (80063f4 <_dtoa_r+0x584>)
 80061ee:	f004 020f 	and.w	r2, r4, #15
 80061f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80061fe:	f7fa fa03 	bl	8000608 <__aeabi_dmul>
 8006202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006206:	1124      	asrs	r4, r4, #4
 8006208:	2300      	movs	r3, #0
 800620a:	2602      	movs	r6, #2
 800620c:	2c00      	cmp	r4, #0
 800620e:	f040 808f 	bne.w	8006330 <_dtoa_r+0x4c0>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1d3      	bne.n	80061be <_dtoa_r+0x34e>
 8006216:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006218:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8094 	beq.w	800634a <_dtoa_r+0x4da>
 8006222:	4b75      	ldr	r3, [pc, #468]	@ (80063f8 <_dtoa_r+0x588>)
 8006224:	2200      	movs	r2, #0
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa fc5f 	bl	8000aec <__aeabi_dcmplt>
 800622e:	2800      	cmp	r0, #0
 8006230:	f000 808b 	beq.w	800634a <_dtoa_r+0x4da>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 8087 	beq.w	800634a <_dtoa_r+0x4da>
 800623c:	f1bb 0f00 	cmp.w	fp, #0
 8006240:	dd34      	ble.n	80062ac <_dtoa_r+0x43c>
 8006242:	4620      	mov	r0, r4
 8006244:	4b6d      	ldr	r3, [pc, #436]	@ (80063fc <_dtoa_r+0x58c>)
 8006246:	2200      	movs	r2, #0
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa f9dd 	bl	8000608 <__aeabi_dmul>
 800624e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006252:	f107 38ff 	add.w	r8, r7, #4294967295
 8006256:	3601      	adds	r6, #1
 8006258:	465c      	mov	r4, fp
 800625a:	4630      	mov	r0, r6
 800625c:	f7fa f96a 	bl	8000534 <__aeabi_i2d>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	f7fa f9d0 	bl	8000608 <__aeabi_dmul>
 8006268:	4b65      	ldr	r3, [pc, #404]	@ (8006400 <_dtoa_r+0x590>)
 800626a:	2200      	movs	r2, #0
 800626c:	f7fa f816 	bl	800029c <__adddf3>
 8006270:	4605      	mov	r5, r0
 8006272:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006276:	2c00      	cmp	r4, #0
 8006278:	d16a      	bne.n	8006350 <_dtoa_r+0x4e0>
 800627a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800627e:	4b61      	ldr	r3, [pc, #388]	@ (8006404 <_dtoa_r+0x594>)
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f809 	bl	8000298 <__aeabi_dsub>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800628e:	462a      	mov	r2, r5
 8006290:	4633      	mov	r3, r6
 8006292:	f7fa fc49 	bl	8000b28 <__aeabi_dcmpgt>
 8006296:	2800      	cmp	r0, #0
 8006298:	f040 8298 	bne.w	80067cc <_dtoa_r+0x95c>
 800629c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a0:	462a      	mov	r2, r5
 80062a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062a6:	f7fa fc21 	bl	8000aec <__aeabi_dcmplt>
 80062aa:	bb38      	cbnz	r0, 80062fc <_dtoa_r+0x48c>
 80062ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80062b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f2c0 8157 	blt.w	800656a <_dtoa_r+0x6fa>
 80062bc:	2f0e      	cmp	r7, #14
 80062be:	f300 8154 	bgt.w	800656a <_dtoa_r+0x6fa>
 80062c2:	4b4b      	ldr	r3, [pc, #300]	@ (80063f0 <_dtoa_r+0x580>)
 80062c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062c8:	ed93 7b00 	vldr	d7, [r3]
 80062cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	ed8d 7b00 	vstr	d7, [sp]
 80062d4:	f280 80e5 	bge.w	80064a2 <_dtoa_r+0x632>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f300 80e1 	bgt.w	80064a2 <_dtoa_r+0x632>
 80062e0:	d10c      	bne.n	80062fc <_dtoa_r+0x48c>
 80062e2:	4b48      	ldr	r3, [pc, #288]	@ (8006404 <_dtoa_r+0x594>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	ec51 0b17 	vmov	r0, r1, d7
 80062ea:	f7fa f98d 	bl	8000608 <__aeabi_dmul>
 80062ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f2:	f7fa fc0f 	bl	8000b14 <__aeabi_dcmpge>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f000 8266 	beq.w	80067c8 <_dtoa_r+0x958>
 80062fc:	2400      	movs	r4, #0
 80062fe:	4625      	mov	r5, r4
 8006300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006302:	4656      	mov	r6, sl
 8006304:	ea6f 0803 	mvn.w	r8, r3
 8006308:	2700      	movs	r7, #0
 800630a:	4621      	mov	r1, r4
 800630c:	4648      	mov	r0, r9
 800630e:	f000 fcbf 	bl	8006c90 <_Bfree>
 8006312:	2d00      	cmp	r5, #0
 8006314:	f000 80bd 	beq.w	8006492 <_dtoa_r+0x622>
 8006318:	b12f      	cbz	r7, 8006326 <_dtoa_r+0x4b6>
 800631a:	42af      	cmp	r7, r5
 800631c:	d003      	beq.n	8006326 <_dtoa_r+0x4b6>
 800631e:	4639      	mov	r1, r7
 8006320:	4648      	mov	r0, r9
 8006322:	f000 fcb5 	bl	8006c90 <_Bfree>
 8006326:	4629      	mov	r1, r5
 8006328:	4648      	mov	r0, r9
 800632a:	f000 fcb1 	bl	8006c90 <_Bfree>
 800632e:	e0b0      	b.n	8006492 <_dtoa_r+0x622>
 8006330:	07e2      	lsls	r2, r4, #31
 8006332:	d505      	bpl.n	8006340 <_dtoa_r+0x4d0>
 8006334:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006338:	f7fa f966 	bl	8000608 <__aeabi_dmul>
 800633c:	3601      	adds	r6, #1
 800633e:	2301      	movs	r3, #1
 8006340:	1064      	asrs	r4, r4, #1
 8006342:	3508      	adds	r5, #8
 8006344:	e762      	b.n	800620c <_dtoa_r+0x39c>
 8006346:	2602      	movs	r6, #2
 8006348:	e765      	b.n	8006216 <_dtoa_r+0x3a6>
 800634a:	9c03      	ldr	r4, [sp, #12]
 800634c:	46b8      	mov	r8, r7
 800634e:	e784      	b.n	800625a <_dtoa_r+0x3ea>
 8006350:	4b27      	ldr	r3, [pc, #156]	@ (80063f0 <_dtoa_r+0x580>)
 8006352:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006354:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006358:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800635c:	4454      	add	r4, sl
 800635e:	2900      	cmp	r1, #0
 8006360:	d054      	beq.n	800640c <_dtoa_r+0x59c>
 8006362:	4929      	ldr	r1, [pc, #164]	@ (8006408 <_dtoa_r+0x598>)
 8006364:	2000      	movs	r0, #0
 8006366:	f7fa fa79 	bl	800085c <__aeabi_ddiv>
 800636a:	4633      	mov	r3, r6
 800636c:	462a      	mov	r2, r5
 800636e:	f7f9 ff93 	bl	8000298 <__aeabi_dsub>
 8006372:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006376:	4656      	mov	r6, sl
 8006378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800637c:	f7fa fbf4 	bl	8000b68 <__aeabi_d2iz>
 8006380:	4605      	mov	r5, r0
 8006382:	f7fa f8d7 	bl	8000534 <__aeabi_i2d>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800638e:	f7f9 ff83 	bl	8000298 <__aeabi_dsub>
 8006392:	3530      	adds	r5, #48	@ 0x30
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800639c:	f806 5b01 	strb.w	r5, [r6], #1
 80063a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063a4:	f7fa fba2 	bl	8000aec <__aeabi_dcmplt>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d172      	bne.n	8006492 <_dtoa_r+0x622>
 80063ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b0:	4911      	ldr	r1, [pc, #68]	@ (80063f8 <_dtoa_r+0x588>)
 80063b2:	2000      	movs	r0, #0
 80063b4:	f7f9 ff70 	bl	8000298 <__aeabi_dsub>
 80063b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063bc:	f7fa fb96 	bl	8000aec <__aeabi_dcmplt>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f040 80b4 	bne.w	800652e <_dtoa_r+0x6be>
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	f43f af70 	beq.w	80062ac <_dtoa_r+0x43c>
 80063cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80063d0:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <_dtoa_r+0x58c>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	f7fa f918 	bl	8000608 <__aeabi_dmul>
 80063d8:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <_dtoa_r+0x58c>)
 80063da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80063de:	2200      	movs	r2, #0
 80063e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063e4:	f7fa f910 	bl	8000608 <__aeabi_dmul>
 80063e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ec:	e7c4      	b.n	8006378 <_dtoa_r+0x508>
 80063ee:	bf00      	nop
 80063f0:	0800a450 	.word	0x0800a450
 80063f4:	0800a428 	.word	0x0800a428
 80063f8:	3ff00000 	.word	0x3ff00000
 80063fc:	40240000 	.word	0x40240000
 8006400:	401c0000 	.word	0x401c0000
 8006404:	40140000 	.word	0x40140000
 8006408:	3fe00000 	.word	0x3fe00000
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	f7fa f8fa 	bl	8000608 <__aeabi_dmul>
 8006414:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006418:	9413      	str	r4, [sp, #76]	@ 0x4c
 800641a:	4656      	mov	r6, sl
 800641c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006420:	f7fa fba2 	bl	8000b68 <__aeabi_d2iz>
 8006424:	4605      	mov	r5, r0
 8006426:	f7fa f885 	bl	8000534 <__aeabi_i2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006432:	f7f9 ff31 	bl	8000298 <__aeabi_dsub>
 8006436:	3530      	adds	r5, #48	@ 0x30
 8006438:	f806 5b01 	strb.w	r5, [r6], #1
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	42a6      	cmp	r6, r4
 8006442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	d124      	bne.n	8006496 <_dtoa_r+0x626>
 800644c:	4baf      	ldr	r3, [pc, #700]	@ (800670c <_dtoa_r+0x89c>)
 800644e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006452:	f7f9 ff23 	bl	800029c <__adddf3>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800645e:	f7fa fb63 	bl	8000b28 <__aeabi_dcmpgt>
 8006462:	2800      	cmp	r0, #0
 8006464:	d163      	bne.n	800652e <_dtoa_r+0x6be>
 8006466:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800646a:	49a8      	ldr	r1, [pc, #672]	@ (800670c <_dtoa_r+0x89c>)
 800646c:	2000      	movs	r0, #0
 800646e:	f7f9 ff13 	bl	8000298 <__aeabi_dsub>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800647a:	f7fa fb37 	bl	8000aec <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	f43f af14 	beq.w	80062ac <_dtoa_r+0x43c>
 8006484:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006486:	1e73      	subs	r3, r6, #1
 8006488:	9313      	str	r3, [sp, #76]	@ 0x4c
 800648a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800648e:	2b30      	cmp	r3, #48	@ 0x30
 8006490:	d0f8      	beq.n	8006484 <_dtoa_r+0x614>
 8006492:	4647      	mov	r7, r8
 8006494:	e03b      	b.n	800650e <_dtoa_r+0x69e>
 8006496:	4b9e      	ldr	r3, [pc, #632]	@ (8006710 <_dtoa_r+0x8a0>)
 8006498:	f7fa f8b6 	bl	8000608 <__aeabi_dmul>
 800649c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064a0:	e7bc      	b.n	800641c <_dtoa_r+0x5ac>
 80064a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80064a6:	4656      	mov	r6, sl
 80064a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7fa f9d4 	bl	800085c <__aeabi_ddiv>
 80064b4:	f7fa fb58 	bl	8000b68 <__aeabi_d2iz>
 80064b8:	4680      	mov	r8, r0
 80064ba:	f7fa f83b 	bl	8000534 <__aeabi_i2d>
 80064be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c2:	f7fa f8a1 	bl	8000608 <__aeabi_dmul>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064d2:	f7f9 fee1 	bl	8000298 <__aeabi_dsub>
 80064d6:	f806 4b01 	strb.w	r4, [r6], #1
 80064da:	9d03      	ldr	r5, [sp, #12]
 80064dc:	eba6 040a 	sub.w	r4, r6, sl
 80064e0:	42a5      	cmp	r5, r4
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	d133      	bne.n	8006550 <_dtoa_r+0x6e0>
 80064e8:	f7f9 fed8 	bl	800029c <__adddf3>
 80064ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064f0:	4604      	mov	r4, r0
 80064f2:	460d      	mov	r5, r1
 80064f4:	f7fa fb18 	bl	8000b28 <__aeabi_dcmpgt>
 80064f8:	b9c0      	cbnz	r0, 800652c <_dtoa_r+0x6bc>
 80064fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006506:	b110      	cbz	r0, 800650e <_dtoa_r+0x69e>
 8006508:	f018 0f01 	tst.w	r8, #1
 800650c:	d10e      	bne.n	800652c <_dtoa_r+0x6bc>
 800650e:	9902      	ldr	r1, [sp, #8]
 8006510:	4648      	mov	r0, r9
 8006512:	f000 fbbd 	bl	8006c90 <_Bfree>
 8006516:	2300      	movs	r3, #0
 8006518:	7033      	strb	r3, [r6, #0]
 800651a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800651c:	3701      	adds	r7, #1
 800651e:	601f      	str	r7, [r3, #0]
 8006520:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 824b 	beq.w	80069be <_dtoa_r+0xb4e>
 8006528:	601e      	str	r6, [r3, #0]
 800652a:	e248      	b.n	80069be <_dtoa_r+0xb4e>
 800652c:	46b8      	mov	r8, r7
 800652e:	4633      	mov	r3, r6
 8006530:	461e      	mov	r6, r3
 8006532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006536:	2a39      	cmp	r2, #57	@ 0x39
 8006538:	d106      	bne.n	8006548 <_dtoa_r+0x6d8>
 800653a:	459a      	cmp	sl, r3
 800653c:	d1f8      	bne.n	8006530 <_dtoa_r+0x6c0>
 800653e:	2230      	movs	r2, #48	@ 0x30
 8006540:	f108 0801 	add.w	r8, r8, #1
 8006544:	f88a 2000 	strb.w	r2, [sl]
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	3201      	adds	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e7a0      	b.n	8006492 <_dtoa_r+0x622>
 8006550:	4b6f      	ldr	r3, [pc, #444]	@ (8006710 <_dtoa_r+0x8a0>)
 8006552:	2200      	movs	r2, #0
 8006554:	f7fa f858 	bl	8000608 <__aeabi_dmul>
 8006558:	2200      	movs	r2, #0
 800655a:	2300      	movs	r3, #0
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	f7fa faba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006564:	2800      	cmp	r0, #0
 8006566:	d09f      	beq.n	80064a8 <_dtoa_r+0x638>
 8006568:	e7d1      	b.n	800650e <_dtoa_r+0x69e>
 800656a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800656c:	2a00      	cmp	r2, #0
 800656e:	f000 80ea 	beq.w	8006746 <_dtoa_r+0x8d6>
 8006572:	9a07      	ldr	r2, [sp, #28]
 8006574:	2a01      	cmp	r2, #1
 8006576:	f300 80cd 	bgt.w	8006714 <_dtoa_r+0x8a4>
 800657a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800657c:	2a00      	cmp	r2, #0
 800657e:	f000 80c1 	beq.w	8006704 <_dtoa_r+0x894>
 8006582:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006586:	9c08      	ldr	r4, [sp, #32]
 8006588:	9e00      	ldr	r6, [sp, #0]
 800658a:	9a00      	ldr	r2, [sp, #0]
 800658c:	441a      	add	r2, r3
 800658e:	9200      	str	r2, [sp, #0]
 8006590:	9a06      	ldr	r2, [sp, #24]
 8006592:	2101      	movs	r1, #1
 8006594:	441a      	add	r2, r3
 8006596:	4648      	mov	r0, r9
 8006598:	9206      	str	r2, [sp, #24]
 800659a:	f000 fc77 	bl	8006e8c <__i2b>
 800659e:	4605      	mov	r5, r0
 80065a0:	b166      	cbz	r6, 80065bc <_dtoa_r+0x74c>
 80065a2:	9b06      	ldr	r3, [sp, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd09      	ble.n	80065bc <_dtoa_r+0x74c>
 80065a8:	42b3      	cmp	r3, r6
 80065aa:	9a00      	ldr	r2, [sp, #0]
 80065ac:	bfa8      	it	ge
 80065ae:	4633      	movge	r3, r6
 80065b0:	1ad2      	subs	r2, r2, r3
 80065b2:	9200      	str	r2, [sp, #0]
 80065b4:	9a06      	ldr	r2, [sp, #24]
 80065b6:	1af6      	subs	r6, r6, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	9306      	str	r3, [sp, #24]
 80065bc:	9b08      	ldr	r3, [sp, #32]
 80065be:	b30b      	cbz	r3, 8006604 <_dtoa_r+0x794>
 80065c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80c6 	beq.w	8006754 <_dtoa_r+0x8e4>
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	f000 80c0 	beq.w	800674e <_dtoa_r+0x8de>
 80065ce:	4629      	mov	r1, r5
 80065d0:	4622      	mov	r2, r4
 80065d2:	4648      	mov	r0, r9
 80065d4:	f000 fd12 	bl	8006ffc <__pow5mult>
 80065d8:	9a02      	ldr	r2, [sp, #8]
 80065da:	4601      	mov	r1, r0
 80065dc:	4605      	mov	r5, r0
 80065de:	4648      	mov	r0, r9
 80065e0:	f000 fc6a 	bl	8006eb8 <__multiply>
 80065e4:	9902      	ldr	r1, [sp, #8]
 80065e6:	4680      	mov	r8, r0
 80065e8:	4648      	mov	r0, r9
 80065ea:	f000 fb51 	bl	8006c90 <_Bfree>
 80065ee:	9b08      	ldr	r3, [sp, #32]
 80065f0:	1b1b      	subs	r3, r3, r4
 80065f2:	9308      	str	r3, [sp, #32]
 80065f4:	f000 80b1 	beq.w	800675a <_dtoa_r+0x8ea>
 80065f8:	9a08      	ldr	r2, [sp, #32]
 80065fa:	4641      	mov	r1, r8
 80065fc:	4648      	mov	r0, r9
 80065fe:	f000 fcfd 	bl	8006ffc <__pow5mult>
 8006602:	9002      	str	r0, [sp, #8]
 8006604:	2101      	movs	r1, #1
 8006606:	4648      	mov	r0, r9
 8006608:	f000 fc40 	bl	8006e8c <__i2b>
 800660c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800660e:	4604      	mov	r4, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 81d8 	beq.w	80069c6 <_dtoa_r+0xb56>
 8006616:	461a      	mov	r2, r3
 8006618:	4601      	mov	r1, r0
 800661a:	4648      	mov	r0, r9
 800661c:	f000 fcee 	bl	8006ffc <__pow5mult>
 8006620:	9b07      	ldr	r3, [sp, #28]
 8006622:	2b01      	cmp	r3, #1
 8006624:	4604      	mov	r4, r0
 8006626:	f300 809f 	bgt.w	8006768 <_dtoa_r+0x8f8>
 800662a:	9b04      	ldr	r3, [sp, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8097 	bne.w	8006760 <_dtoa_r+0x8f0>
 8006632:	9b05      	ldr	r3, [sp, #20]
 8006634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 8093 	bne.w	8006764 <_dtoa_r+0x8f4>
 800663e:	9b05      	ldr	r3, [sp, #20]
 8006640:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006644:	0d1b      	lsrs	r3, r3, #20
 8006646:	051b      	lsls	r3, r3, #20
 8006648:	b133      	cbz	r3, 8006658 <_dtoa_r+0x7e8>
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	9b06      	ldr	r3, [sp, #24]
 8006652:	3301      	adds	r3, #1
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	2301      	movs	r3, #1
 8006658:	9308      	str	r3, [sp, #32]
 800665a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 81b8 	beq.w	80069d2 <_dtoa_r+0xb62>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006668:	6918      	ldr	r0, [r3, #16]
 800666a:	f000 fbc3 	bl	8006df4 <__hi0bits>
 800666e:	f1c0 0020 	rsb	r0, r0, #32
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	4418      	add	r0, r3
 8006676:	f010 001f 	ands.w	r0, r0, #31
 800667a:	f000 8082 	beq.w	8006782 <_dtoa_r+0x912>
 800667e:	f1c0 0320 	rsb	r3, r0, #32
 8006682:	2b04      	cmp	r3, #4
 8006684:	dd73      	ble.n	800676e <_dtoa_r+0x8fe>
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	f1c0 001c 	rsb	r0, r0, #28
 800668c:	4403      	add	r3, r0
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	9b06      	ldr	r3, [sp, #24]
 8006692:	4403      	add	r3, r0
 8006694:	4406      	add	r6, r0
 8006696:	9306      	str	r3, [sp, #24]
 8006698:	9b00      	ldr	r3, [sp, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	dd05      	ble.n	80066aa <_dtoa_r+0x83a>
 800669e:	9902      	ldr	r1, [sp, #8]
 80066a0:	461a      	mov	r2, r3
 80066a2:	4648      	mov	r0, r9
 80066a4:	f000 fd04 	bl	80070b0 <__lshift>
 80066a8:	9002      	str	r0, [sp, #8]
 80066aa:	9b06      	ldr	r3, [sp, #24]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dd05      	ble.n	80066bc <_dtoa_r+0x84c>
 80066b0:	4621      	mov	r1, r4
 80066b2:	461a      	mov	r2, r3
 80066b4:	4648      	mov	r0, r9
 80066b6:	f000 fcfb 	bl	80070b0 <__lshift>
 80066ba:	4604      	mov	r4, r0
 80066bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d061      	beq.n	8006786 <_dtoa_r+0x916>
 80066c2:	9802      	ldr	r0, [sp, #8]
 80066c4:	4621      	mov	r1, r4
 80066c6:	f000 fd5f 	bl	8007188 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	da5b      	bge.n	8006786 <_dtoa_r+0x916>
 80066ce:	2300      	movs	r3, #0
 80066d0:	9902      	ldr	r1, [sp, #8]
 80066d2:	220a      	movs	r2, #10
 80066d4:	4648      	mov	r0, r9
 80066d6:	f000 fafd 	bl	8006cd4 <__multadd>
 80066da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066dc:	9002      	str	r0, [sp, #8]
 80066de:	f107 38ff 	add.w	r8, r7, #4294967295
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8177 	beq.w	80069d6 <_dtoa_r+0xb66>
 80066e8:	4629      	mov	r1, r5
 80066ea:	2300      	movs	r3, #0
 80066ec:	220a      	movs	r2, #10
 80066ee:	4648      	mov	r0, r9
 80066f0:	f000 faf0 	bl	8006cd4 <__multadd>
 80066f4:	f1bb 0f00 	cmp.w	fp, #0
 80066f8:	4605      	mov	r5, r0
 80066fa:	dc6f      	bgt.n	80067dc <_dtoa_r+0x96c>
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	dc49      	bgt.n	8006796 <_dtoa_r+0x926>
 8006702:	e06b      	b.n	80067dc <_dtoa_r+0x96c>
 8006704:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006706:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800670a:	e73c      	b.n	8006586 <_dtoa_r+0x716>
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	40240000 	.word	0x40240000
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	1e5c      	subs	r4, r3, #1
 8006718:	9b08      	ldr	r3, [sp, #32]
 800671a:	42a3      	cmp	r3, r4
 800671c:	db09      	blt.n	8006732 <_dtoa_r+0x8c2>
 800671e:	1b1c      	subs	r4, r3, r4
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f6bf af30 	bge.w	8006588 <_dtoa_r+0x718>
 8006728:	9b00      	ldr	r3, [sp, #0]
 800672a:	9a03      	ldr	r2, [sp, #12]
 800672c:	1a9e      	subs	r6, r3, r2
 800672e:	2300      	movs	r3, #0
 8006730:	e72b      	b.n	800658a <_dtoa_r+0x71a>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006736:	9408      	str	r4, [sp, #32]
 8006738:	1ae3      	subs	r3, r4, r3
 800673a:	441a      	add	r2, r3
 800673c:	9e00      	ldr	r6, [sp, #0]
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	920d      	str	r2, [sp, #52]	@ 0x34
 8006742:	2400      	movs	r4, #0
 8006744:	e721      	b.n	800658a <_dtoa_r+0x71a>
 8006746:	9c08      	ldr	r4, [sp, #32]
 8006748:	9e00      	ldr	r6, [sp, #0]
 800674a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800674c:	e728      	b.n	80065a0 <_dtoa_r+0x730>
 800674e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006752:	e751      	b.n	80065f8 <_dtoa_r+0x788>
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	9902      	ldr	r1, [sp, #8]
 8006758:	e750      	b.n	80065fc <_dtoa_r+0x78c>
 800675a:	f8cd 8008 	str.w	r8, [sp, #8]
 800675e:	e751      	b.n	8006604 <_dtoa_r+0x794>
 8006760:	2300      	movs	r3, #0
 8006762:	e779      	b.n	8006658 <_dtoa_r+0x7e8>
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	e777      	b.n	8006658 <_dtoa_r+0x7e8>
 8006768:	2300      	movs	r3, #0
 800676a:	9308      	str	r3, [sp, #32]
 800676c:	e779      	b.n	8006662 <_dtoa_r+0x7f2>
 800676e:	d093      	beq.n	8006698 <_dtoa_r+0x828>
 8006770:	9a00      	ldr	r2, [sp, #0]
 8006772:	331c      	adds	r3, #28
 8006774:	441a      	add	r2, r3
 8006776:	9200      	str	r2, [sp, #0]
 8006778:	9a06      	ldr	r2, [sp, #24]
 800677a:	441a      	add	r2, r3
 800677c:	441e      	add	r6, r3
 800677e:	9206      	str	r2, [sp, #24]
 8006780:	e78a      	b.n	8006698 <_dtoa_r+0x828>
 8006782:	4603      	mov	r3, r0
 8006784:	e7f4      	b.n	8006770 <_dtoa_r+0x900>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	46b8      	mov	r8, r7
 800678c:	dc20      	bgt.n	80067d0 <_dtoa_r+0x960>
 800678e:	469b      	mov	fp, r3
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	2b02      	cmp	r3, #2
 8006794:	dd1e      	ble.n	80067d4 <_dtoa_r+0x964>
 8006796:	f1bb 0f00 	cmp.w	fp, #0
 800679a:	f47f adb1 	bne.w	8006300 <_dtoa_r+0x490>
 800679e:	4621      	mov	r1, r4
 80067a0:	465b      	mov	r3, fp
 80067a2:	2205      	movs	r2, #5
 80067a4:	4648      	mov	r0, r9
 80067a6:	f000 fa95 	bl	8006cd4 <__multadd>
 80067aa:	4601      	mov	r1, r0
 80067ac:	4604      	mov	r4, r0
 80067ae:	9802      	ldr	r0, [sp, #8]
 80067b0:	f000 fcea 	bl	8007188 <__mcmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f77f ada3 	ble.w	8006300 <_dtoa_r+0x490>
 80067ba:	4656      	mov	r6, sl
 80067bc:	2331      	movs	r3, #49	@ 0x31
 80067be:	f806 3b01 	strb.w	r3, [r6], #1
 80067c2:	f108 0801 	add.w	r8, r8, #1
 80067c6:	e59f      	b.n	8006308 <_dtoa_r+0x498>
 80067c8:	9c03      	ldr	r4, [sp, #12]
 80067ca:	46b8      	mov	r8, r7
 80067cc:	4625      	mov	r5, r4
 80067ce:	e7f4      	b.n	80067ba <_dtoa_r+0x94a>
 80067d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80067d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8101 	beq.w	80069de <_dtoa_r+0xb6e>
 80067dc:	2e00      	cmp	r6, #0
 80067de:	dd05      	ble.n	80067ec <_dtoa_r+0x97c>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4632      	mov	r2, r6
 80067e4:	4648      	mov	r0, r9
 80067e6:	f000 fc63 	bl	80070b0 <__lshift>
 80067ea:	4605      	mov	r5, r0
 80067ec:	9b08      	ldr	r3, [sp, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d05c      	beq.n	80068ac <_dtoa_r+0xa3c>
 80067f2:	6869      	ldr	r1, [r5, #4]
 80067f4:	4648      	mov	r0, r9
 80067f6:	f000 fa0b 	bl	8006c10 <_Balloc>
 80067fa:	4606      	mov	r6, r0
 80067fc:	b928      	cbnz	r0, 800680a <_dtoa_r+0x99a>
 80067fe:	4b82      	ldr	r3, [pc, #520]	@ (8006a08 <_dtoa_r+0xb98>)
 8006800:	4602      	mov	r2, r0
 8006802:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006806:	f7ff bb4a 	b.w	8005e9e <_dtoa_r+0x2e>
 800680a:	692a      	ldr	r2, [r5, #16]
 800680c:	3202      	adds	r2, #2
 800680e:	0092      	lsls	r2, r2, #2
 8006810:	f105 010c 	add.w	r1, r5, #12
 8006814:	300c      	adds	r0, #12
 8006816:	f002 f93f 	bl	8008a98 <memcpy>
 800681a:	2201      	movs	r2, #1
 800681c:	4631      	mov	r1, r6
 800681e:	4648      	mov	r0, r9
 8006820:	f000 fc46 	bl	80070b0 <__lshift>
 8006824:	f10a 0301 	add.w	r3, sl, #1
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	eb0a 030b 	add.w	r3, sl, fp
 800682e:	9308      	str	r3, [sp, #32]
 8006830:	9b04      	ldr	r3, [sp, #16]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	462f      	mov	r7, r5
 8006838:	9306      	str	r3, [sp, #24]
 800683a:	4605      	mov	r5, r0
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	9802      	ldr	r0, [sp, #8]
 8006840:	4621      	mov	r1, r4
 8006842:	f103 3bff 	add.w	fp, r3, #4294967295
 8006846:	f7ff fa8b 	bl	8005d60 <quorem>
 800684a:	4603      	mov	r3, r0
 800684c:	3330      	adds	r3, #48	@ 0x30
 800684e:	9003      	str	r0, [sp, #12]
 8006850:	4639      	mov	r1, r7
 8006852:	9802      	ldr	r0, [sp, #8]
 8006854:	9309      	str	r3, [sp, #36]	@ 0x24
 8006856:	f000 fc97 	bl	8007188 <__mcmp>
 800685a:	462a      	mov	r2, r5
 800685c:	9004      	str	r0, [sp, #16]
 800685e:	4621      	mov	r1, r4
 8006860:	4648      	mov	r0, r9
 8006862:	f000 fcad 	bl	80071c0 <__mdiff>
 8006866:	68c2      	ldr	r2, [r0, #12]
 8006868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686a:	4606      	mov	r6, r0
 800686c:	bb02      	cbnz	r2, 80068b0 <_dtoa_r+0xa40>
 800686e:	4601      	mov	r1, r0
 8006870:	9802      	ldr	r0, [sp, #8]
 8006872:	f000 fc89 	bl	8007188 <__mcmp>
 8006876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006878:	4602      	mov	r2, r0
 800687a:	4631      	mov	r1, r6
 800687c:	4648      	mov	r0, r9
 800687e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006880:	9309      	str	r3, [sp, #36]	@ 0x24
 8006882:	f000 fa05 	bl	8006c90 <_Bfree>
 8006886:	9b07      	ldr	r3, [sp, #28]
 8006888:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800688a:	9e00      	ldr	r6, [sp, #0]
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	9b06      	ldr	r3, [sp, #24]
 8006892:	4319      	orrs	r1, r3
 8006894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006896:	d10d      	bne.n	80068b4 <_dtoa_r+0xa44>
 8006898:	2b39      	cmp	r3, #57	@ 0x39
 800689a:	d027      	beq.n	80068ec <_dtoa_r+0xa7c>
 800689c:	9a04      	ldr	r2, [sp, #16]
 800689e:	2a00      	cmp	r2, #0
 80068a0:	dd01      	ble.n	80068a6 <_dtoa_r+0xa36>
 80068a2:	9b03      	ldr	r3, [sp, #12]
 80068a4:	3331      	adds	r3, #49	@ 0x31
 80068a6:	f88b 3000 	strb.w	r3, [fp]
 80068aa:	e52e      	b.n	800630a <_dtoa_r+0x49a>
 80068ac:	4628      	mov	r0, r5
 80068ae:	e7b9      	b.n	8006824 <_dtoa_r+0x9b4>
 80068b0:	2201      	movs	r2, #1
 80068b2:	e7e2      	b.n	800687a <_dtoa_r+0xa0a>
 80068b4:	9904      	ldr	r1, [sp, #16]
 80068b6:	2900      	cmp	r1, #0
 80068b8:	db04      	blt.n	80068c4 <_dtoa_r+0xa54>
 80068ba:	9807      	ldr	r0, [sp, #28]
 80068bc:	4301      	orrs	r1, r0
 80068be:	9806      	ldr	r0, [sp, #24]
 80068c0:	4301      	orrs	r1, r0
 80068c2:	d120      	bne.n	8006906 <_dtoa_r+0xa96>
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	ddee      	ble.n	80068a6 <_dtoa_r+0xa36>
 80068c8:	9902      	ldr	r1, [sp, #8]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2201      	movs	r2, #1
 80068ce:	4648      	mov	r0, r9
 80068d0:	f000 fbee 	bl	80070b0 <__lshift>
 80068d4:	4621      	mov	r1, r4
 80068d6:	9002      	str	r0, [sp, #8]
 80068d8:	f000 fc56 	bl	8007188 <__mcmp>
 80068dc:	2800      	cmp	r0, #0
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	dc02      	bgt.n	80068e8 <_dtoa_r+0xa78>
 80068e2:	d1e0      	bne.n	80068a6 <_dtoa_r+0xa36>
 80068e4:	07da      	lsls	r2, r3, #31
 80068e6:	d5de      	bpl.n	80068a6 <_dtoa_r+0xa36>
 80068e8:	2b39      	cmp	r3, #57	@ 0x39
 80068ea:	d1da      	bne.n	80068a2 <_dtoa_r+0xa32>
 80068ec:	2339      	movs	r3, #57	@ 0x39
 80068ee:	f88b 3000 	strb.w	r3, [fp]
 80068f2:	4633      	mov	r3, r6
 80068f4:	461e      	mov	r6, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068fc:	2a39      	cmp	r2, #57	@ 0x39
 80068fe:	d04e      	beq.n	800699e <_dtoa_r+0xb2e>
 8006900:	3201      	adds	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e501      	b.n	800630a <_dtoa_r+0x49a>
 8006906:	2a00      	cmp	r2, #0
 8006908:	dd03      	ble.n	8006912 <_dtoa_r+0xaa2>
 800690a:	2b39      	cmp	r3, #57	@ 0x39
 800690c:	d0ee      	beq.n	80068ec <_dtoa_r+0xa7c>
 800690e:	3301      	adds	r3, #1
 8006910:	e7c9      	b.n	80068a6 <_dtoa_r+0xa36>
 8006912:	9a00      	ldr	r2, [sp, #0]
 8006914:	9908      	ldr	r1, [sp, #32]
 8006916:	f802 3c01 	strb.w	r3, [r2, #-1]
 800691a:	428a      	cmp	r2, r1
 800691c:	d028      	beq.n	8006970 <_dtoa_r+0xb00>
 800691e:	9902      	ldr	r1, [sp, #8]
 8006920:	2300      	movs	r3, #0
 8006922:	220a      	movs	r2, #10
 8006924:	4648      	mov	r0, r9
 8006926:	f000 f9d5 	bl	8006cd4 <__multadd>
 800692a:	42af      	cmp	r7, r5
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	f04f 020a 	mov.w	r2, #10
 8006936:	4639      	mov	r1, r7
 8006938:	4648      	mov	r0, r9
 800693a:	d107      	bne.n	800694c <_dtoa_r+0xadc>
 800693c:	f000 f9ca 	bl	8006cd4 <__multadd>
 8006940:	4607      	mov	r7, r0
 8006942:	4605      	mov	r5, r0
 8006944:	9b00      	ldr	r3, [sp, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	e777      	b.n	800683c <_dtoa_r+0x9cc>
 800694c:	f000 f9c2 	bl	8006cd4 <__multadd>
 8006950:	4629      	mov	r1, r5
 8006952:	4607      	mov	r7, r0
 8006954:	2300      	movs	r3, #0
 8006956:	220a      	movs	r2, #10
 8006958:	4648      	mov	r0, r9
 800695a:	f000 f9bb 	bl	8006cd4 <__multadd>
 800695e:	4605      	mov	r5, r0
 8006960:	e7f0      	b.n	8006944 <_dtoa_r+0xad4>
 8006962:	f1bb 0f00 	cmp.w	fp, #0
 8006966:	bfcc      	ite	gt
 8006968:	465e      	movgt	r6, fp
 800696a:	2601      	movle	r6, #1
 800696c:	4456      	add	r6, sl
 800696e:	2700      	movs	r7, #0
 8006970:	9902      	ldr	r1, [sp, #8]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2201      	movs	r2, #1
 8006976:	4648      	mov	r0, r9
 8006978:	f000 fb9a 	bl	80070b0 <__lshift>
 800697c:	4621      	mov	r1, r4
 800697e:	9002      	str	r0, [sp, #8]
 8006980:	f000 fc02 	bl	8007188 <__mcmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	dcb4      	bgt.n	80068f2 <_dtoa_r+0xa82>
 8006988:	d102      	bne.n	8006990 <_dtoa_r+0xb20>
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	07db      	lsls	r3, r3, #31
 800698e:	d4b0      	bmi.n	80068f2 <_dtoa_r+0xa82>
 8006990:	4633      	mov	r3, r6
 8006992:	461e      	mov	r6, r3
 8006994:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006998:	2a30      	cmp	r2, #48	@ 0x30
 800699a:	d0fa      	beq.n	8006992 <_dtoa_r+0xb22>
 800699c:	e4b5      	b.n	800630a <_dtoa_r+0x49a>
 800699e:	459a      	cmp	sl, r3
 80069a0:	d1a8      	bne.n	80068f4 <_dtoa_r+0xa84>
 80069a2:	2331      	movs	r3, #49	@ 0x31
 80069a4:	f108 0801 	add.w	r8, r8, #1
 80069a8:	f88a 3000 	strb.w	r3, [sl]
 80069ac:	e4ad      	b.n	800630a <_dtoa_r+0x49a>
 80069ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006a0c <_dtoa_r+0xb9c>
 80069b4:	b11b      	cbz	r3, 80069be <_dtoa_r+0xb4e>
 80069b6:	f10a 0308 	add.w	r3, sl, #8
 80069ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4650      	mov	r0, sl
 80069c0:	b017      	add	sp, #92	@ 0x5c
 80069c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c6:	9b07      	ldr	r3, [sp, #28]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	f77f ae2e 	ble.w	800662a <_dtoa_r+0x7ba>
 80069ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	2001      	movs	r0, #1
 80069d4:	e64d      	b.n	8006672 <_dtoa_r+0x802>
 80069d6:	f1bb 0f00 	cmp.w	fp, #0
 80069da:	f77f aed9 	ble.w	8006790 <_dtoa_r+0x920>
 80069de:	4656      	mov	r6, sl
 80069e0:	9802      	ldr	r0, [sp, #8]
 80069e2:	4621      	mov	r1, r4
 80069e4:	f7ff f9bc 	bl	8005d60 <quorem>
 80069e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80069ec:	f806 3b01 	strb.w	r3, [r6], #1
 80069f0:	eba6 020a 	sub.w	r2, r6, sl
 80069f4:	4593      	cmp	fp, r2
 80069f6:	ddb4      	ble.n	8006962 <_dtoa_r+0xaf2>
 80069f8:	9902      	ldr	r1, [sp, #8]
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4648      	mov	r0, r9
 8006a00:	f000 f968 	bl	8006cd4 <__multadd>
 8006a04:	9002      	str	r0, [sp, #8]
 8006a06:	e7eb      	b.n	80069e0 <_dtoa_r+0xb70>
 8006a08:	0800a2f9 	.word	0x0800a2f9
 8006a0c:	0800a27d 	.word	0x0800a27d

08006a10 <_free_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d041      	beq.n	8006a9c <_free_r+0x8c>
 8006a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1c:	1f0c      	subs	r4, r1, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	18e4      	addlt	r4, r4, r3
 8006a24:	f000 f8e8 	bl	8006bf8 <__malloc_lock>
 8006a28:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <_free_r+0x90>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	b933      	cbnz	r3, 8006a3c <_free_r+0x2c>
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	6014      	str	r4, [r2, #0]
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a38:	f000 b8e4 	b.w	8006c04 <__malloc_unlock>
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d908      	bls.n	8006a52 <_free_r+0x42>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf01      	itttt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	e7ed      	b.n	8006a2e <_free_r+0x1e>
 8006a52:	461a      	mov	r2, r3
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b10b      	cbz	r3, 8006a5c <_free_r+0x4c>
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	d9fa      	bls.n	8006a52 <_free_r+0x42>
 8006a5c:	6811      	ldr	r1, [r2, #0]
 8006a5e:	1850      	adds	r0, r2, r1
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d10b      	bne.n	8006a7c <_free_r+0x6c>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	4401      	add	r1, r0
 8006a68:	1850      	adds	r0, r2, r1
 8006a6a:	4283      	cmp	r3, r0
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	d1e0      	bne.n	8006a32 <_free_r+0x22>
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	6053      	str	r3, [r2, #4]
 8006a76:	4408      	add	r0, r1
 8006a78:	6010      	str	r0, [r2, #0]
 8006a7a:	e7da      	b.n	8006a32 <_free_r+0x22>
 8006a7c:	d902      	bls.n	8006a84 <_free_r+0x74>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	e7d6      	b.n	8006a32 <_free_r+0x22>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	1821      	adds	r1, r4, r0
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf04      	itt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	bf04      	itt	eq
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	6054      	str	r4, [r2, #4]
 8006a9a:	e7ca      	b.n	8006a32 <_free_r+0x22>
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000440 	.word	0x20000440

08006aa4 <malloc>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	@ (8006ab0 <malloc+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f000 b825 	b.w	8006af8 <_malloc_r>
 8006aae:	bf00      	nop
 8006ab0:	20000018 	.word	0x20000018

08006ab4 <sbrk_aligned>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8006af4 <sbrk_aligned+0x40>)
 8006ab8:	460c      	mov	r4, r1
 8006aba:	6831      	ldr	r1, [r6, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	b911      	cbnz	r1, 8006ac6 <sbrk_aligned+0x12>
 8006ac0:	f001 ffda 	bl	8008a78 <_sbrk_r>
 8006ac4:	6030      	str	r0, [r6, #0]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f001 ffd5 	bl	8008a78 <_sbrk_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d103      	bne.n	8006ada <sbrk_aligned+0x26>
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0f8      	beq.n	8006ad6 <sbrk_aligned+0x22>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f001 ffc6 	bl	8008a78 <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1f2      	bne.n	8006ad6 <sbrk_aligned+0x22>
 8006af0:	e7ef      	b.n	8006ad2 <sbrk_aligned+0x1e>
 8006af2:	bf00      	nop
 8006af4:	2000043c 	.word	0x2000043c

08006af8 <_malloc_r>:
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	1ccd      	adds	r5, r1, #3
 8006afe:	f025 0503 	bic.w	r5, r5, #3
 8006b02:	3508      	adds	r5, #8
 8006b04:	2d0c      	cmp	r5, #12
 8006b06:	bf38      	it	cc
 8006b08:	250c      	movcc	r5, #12
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	db01      	blt.n	8006b14 <_malloc_r+0x1c>
 8006b10:	42a9      	cmp	r1, r5
 8006b12:	d904      	bls.n	8006b1e <_malloc_r+0x26>
 8006b14:	230c      	movs	r3, #12
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf4 <_malloc_r+0xfc>
 8006b22:	f000 f869 	bl	8006bf8 <__malloc_lock>
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	bb44      	cbnz	r4, 8006b80 <_malloc_r+0x88>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff ffbf 	bl	8006ab4 <sbrk_aligned>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	4604      	mov	r4, r0
 8006b3a:	d158      	bne.n	8006bee <_malloc_r+0xf6>
 8006b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b40:	4627      	mov	r7, r4
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d143      	bne.n	8006bce <_malloc_r+0xd6>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d04b      	beq.n	8006be2 <_malloc_r+0xea>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	eb04 0903 	add.w	r9, r4, r3
 8006b54:	f001 ff90 	bl	8008a78 <_sbrk_r>
 8006b58:	4581      	cmp	r9, r0
 8006b5a:	d142      	bne.n	8006be2 <_malloc_r+0xea>
 8006b5c:	6821      	ldr	r1, [r4, #0]
 8006b5e:	1a6d      	subs	r5, r5, r1
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffa6 	bl	8006ab4 <sbrk_aligned>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d03a      	beq.n	8006be2 <_malloc_r+0xea>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	442b      	add	r3, r5
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	bb62      	cbnz	r2, 8006bd4 <_malloc_r+0xdc>
 8006b7a:	f8c8 7000 	str.w	r7, [r8]
 8006b7e:	e00f      	b.n	8006ba0 <_malloc_r+0xa8>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	1b52      	subs	r2, r2, r5
 8006b84:	d420      	bmi.n	8006bc8 <_malloc_r+0xd0>
 8006b86:	2a0b      	cmp	r2, #11
 8006b88:	d917      	bls.n	8006bba <_malloc_r+0xc2>
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	bf18      	it	ne
 8006b92:	6059      	strne	r1, [r3, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	bf08      	it	eq
 8006b98:	f8c8 1000 	streq.w	r1, [r8]
 8006b9c:	5162      	str	r2, [r4, r5]
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f82f 	bl	8006c04 <__malloc_unlock>
 8006ba6:	f104 000b 	add.w	r0, r4, #11
 8006baa:	1d23      	adds	r3, r4, #4
 8006bac:	f020 0007 	bic.w	r0, r0, #7
 8006bb0:	1ac2      	subs	r2, r0, r3
 8006bb2:	bf1c      	itt	ne
 8006bb4:	1a1b      	subne	r3, r3, r0
 8006bb6:	50a3      	strne	r3, [r4, r2]
 8006bb8:	e7af      	b.n	8006b1a <_malloc_r+0x22>
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	f8c8 2000 	streq.w	r2, [r8]
 8006bc4:	605a      	strne	r2, [r3, #4]
 8006bc6:	e7eb      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bc8:	4623      	mov	r3, r4
 8006bca:	6864      	ldr	r4, [r4, #4]
 8006bcc:	e7ae      	b.n	8006b2c <_malloc_r+0x34>
 8006bce:	463c      	mov	r4, r7
 8006bd0:	687f      	ldr	r7, [r7, #4]
 8006bd2:	e7b6      	b.n	8006b42 <_malloc_r+0x4a>
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d1fb      	bne.n	8006bd4 <_malloc_r+0xdc>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6053      	str	r3, [r2, #4]
 8006be0:	e7de      	b.n	8006ba0 <_malloc_r+0xa8>
 8006be2:	230c      	movs	r3, #12
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 f80c 	bl	8006c04 <__malloc_unlock>
 8006bec:	e794      	b.n	8006b18 <_malloc_r+0x20>
 8006bee:	6005      	str	r5, [r0, #0]
 8006bf0:	e7d6      	b.n	8006ba0 <_malloc_r+0xa8>
 8006bf2:	bf00      	nop
 8006bf4:	20000440 	.word	0x20000440

08006bf8 <__malloc_lock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	@ (8006c00 <__malloc_lock+0x8>)
 8006bfa:	f7ff b8a8 	b.w	8005d4e <__retarget_lock_acquire_recursive>
 8006bfe:	bf00      	nop
 8006c00:	20000438 	.word	0x20000438

08006c04 <__malloc_unlock>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__malloc_unlock+0x8>)
 8006c06:	f7ff b8a3 	b.w	8005d50 <__retarget_lock_release_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20000438 	.word	0x20000438

08006c10 <_Balloc>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	69c6      	ldr	r6, [r0, #28]
 8006c14:	4604      	mov	r4, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	b976      	cbnz	r6, 8006c38 <_Balloc+0x28>
 8006c1a:	2010      	movs	r0, #16
 8006c1c:	f7ff ff42 	bl	8006aa4 <malloc>
 8006c20:	4602      	mov	r2, r0
 8006c22:	61e0      	str	r0, [r4, #28]
 8006c24:	b920      	cbnz	r0, 8006c30 <_Balloc+0x20>
 8006c26:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <_Balloc+0x78>)
 8006c28:	4818      	ldr	r0, [pc, #96]	@ (8006c8c <_Balloc+0x7c>)
 8006c2a:	216b      	movs	r1, #107	@ 0x6b
 8006c2c:	f001 ff4c 	bl	8008ac8 <__assert_func>
 8006c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c34:	6006      	str	r6, [r0, #0]
 8006c36:	60c6      	str	r6, [r0, #12]
 8006c38:	69e6      	ldr	r6, [r4, #28]
 8006c3a:	68f3      	ldr	r3, [r6, #12]
 8006c3c:	b183      	cbz	r3, 8006c60 <_Balloc+0x50>
 8006c3e:	69e3      	ldr	r3, [r4, #28]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c46:	b9b8      	cbnz	r0, 8006c78 <_Balloc+0x68>
 8006c48:	2101      	movs	r1, #1
 8006c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8006c4e:	1d72      	adds	r2, r6, #5
 8006c50:	0092      	lsls	r2, r2, #2
 8006c52:	4620      	mov	r0, r4
 8006c54:	f001 ff56 	bl	8008b04 <_calloc_r>
 8006c58:	b160      	cbz	r0, 8006c74 <_Balloc+0x64>
 8006c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c5e:	e00e      	b.n	8006c7e <_Balloc+0x6e>
 8006c60:	2221      	movs	r2, #33	@ 0x21
 8006c62:	2104      	movs	r1, #4
 8006c64:	4620      	mov	r0, r4
 8006c66:	f001 ff4d 	bl	8008b04 <_calloc_r>
 8006c6a:	69e3      	ldr	r3, [r4, #28]
 8006c6c:	60f0      	str	r0, [r6, #12]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e4      	bne.n	8006c3e <_Balloc+0x2e>
 8006c74:	2000      	movs	r0, #0
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	6802      	ldr	r2, [r0, #0]
 8006c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c84:	e7f7      	b.n	8006c76 <_Balloc+0x66>
 8006c86:	bf00      	nop
 8006c88:	0800a28a 	.word	0x0800a28a
 8006c8c:	0800a30a 	.word	0x0800a30a

08006c90 <_Bfree>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	69c6      	ldr	r6, [r0, #28]
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	b976      	cbnz	r6, 8006cb8 <_Bfree+0x28>
 8006c9a:	2010      	movs	r0, #16
 8006c9c:	f7ff ff02 	bl	8006aa4 <malloc>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	61e8      	str	r0, [r5, #28]
 8006ca4:	b920      	cbnz	r0, 8006cb0 <_Bfree+0x20>
 8006ca6:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <_Bfree+0x3c>)
 8006ca8:	4809      	ldr	r0, [pc, #36]	@ (8006cd0 <_Bfree+0x40>)
 8006caa:	218f      	movs	r1, #143	@ 0x8f
 8006cac:	f001 ff0c 	bl	8008ac8 <__assert_func>
 8006cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb4:	6006      	str	r6, [r0, #0]
 8006cb6:	60c6      	str	r6, [r0, #12]
 8006cb8:	b13c      	cbz	r4, 8006cca <_Bfree+0x3a>
 8006cba:	69eb      	ldr	r3, [r5, #28]
 8006cbc:	6862      	ldr	r2, [r4, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cc4:	6021      	str	r1, [r4, #0]
 8006cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	0800a28a 	.word	0x0800a28a
 8006cd0:	0800a30a 	.word	0x0800a30a

08006cd4 <__multadd>:
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	690d      	ldr	r5, [r1, #16]
 8006cda:	4607      	mov	r7, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	461e      	mov	r6, r3
 8006ce0:	f101 0c14 	add.w	ip, r1, #20
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8006cea:	b299      	uxth	r1, r3
 8006cec:	fb02 6101 	mla	r1, r2, r1, r6
 8006cf0:	0c1e      	lsrs	r6, r3, #16
 8006cf2:	0c0b      	lsrs	r3, r1, #16
 8006cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8006cf8:	b289      	uxth	r1, r1
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d00:	4285      	cmp	r5, r0
 8006d02:	f84c 1b04 	str.w	r1, [ip], #4
 8006d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d0a:	dcec      	bgt.n	8006ce6 <__multadd+0x12>
 8006d0c:	b30e      	cbz	r6, 8006d52 <__multadd+0x7e>
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dc19      	bgt.n	8006d48 <__multadd+0x74>
 8006d14:	6861      	ldr	r1, [r4, #4]
 8006d16:	4638      	mov	r0, r7
 8006d18:	3101      	adds	r1, #1
 8006d1a:	f7ff ff79 	bl	8006c10 <_Balloc>
 8006d1e:	4680      	mov	r8, r0
 8006d20:	b928      	cbnz	r0, 8006d2e <__multadd+0x5a>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b0c      	ldr	r3, [pc, #48]	@ (8006d58 <__multadd+0x84>)
 8006d26:	480d      	ldr	r0, [pc, #52]	@ (8006d5c <__multadd+0x88>)
 8006d28:	21ba      	movs	r1, #186	@ 0xba
 8006d2a:	f001 fecd 	bl	8008ac8 <__assert_func>
 8006d2e:	6922      	ldr	r2, [r4, #16]
 8006d30:	3202      	adds	r2, #2
 8006d32:	f104 010c 	add.w	r1, r4, #12
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	300c      	adds	r0, #12
 8006d3a:	f001 fead 	bl	8008a98 <memcpy>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff ffa5 	bl	8006c90 <_Bfree>
 8006d46:	4644      	mov	r4, r8
 8006d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	615e      	str	r6, [r3, #20]
 8006d50:	6125      	str	r5, [r4, #16]
 8006d52:	4620      	mov	r0, r4
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d58:	0800a2f9 	.word	0x0800a2f9
 8006d5c:	0800a30a 	.word	0x0800a30a

08006d60 <__s2b>:
 8006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	4615      	mov	r5, r2
 8006d68:	461f      	mov	r7, r3
 8006d6a:	2209      	movs	r2, #9
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	4606      	mov	r6, r0
 8006d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d74:	2100      	movs	r1, #0
 8006d76:	2201      	movs	r2, #1
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	db09      	blt.n	8006d90 <__s2b+0x30>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ff47 	bl	8006c10 <_Balloc>
 8006d82:	b940      	cbnz	r0, 8006d96 <__s2b+0x36>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4b19      	ldr	r3, [pc, #100]	@ (8006dec <__s2b+0x8c>)
 8006d88:	4819      	ldr	r0, [pc, #100]	@ (8006df0 <__s2b+0x90>)
 8006d8a:	21d3      	movs	r1, #211	@ 0xd3
 8006d8c:	f001 fe9c 	bl	8008ac8 <__assert_func>
 8006d90:	0052      	lsls	r2, r2, #1
 8006d92:	3101      	adds	r1, #1
 8006d94:	e7f0      	b.n	8006d78 <__s2b+0x18>
 8006d96:	9b08      	ldr	r3, [sp, #32]
 8006d98:	6143      	str	r3, [r0, #20]
 8006d9a:	2d09      	cmp	r5, #9
 8006d9c:	f04f 0301 	mov.w	r3, #1
 8006da0:	6103      	str	r3, [r0, #16]
 8006da2:	dd16      	ble.n	8006dd2 <__s2b+0x72>
 8006da4:	f104 0909 	add.w	r9, r4, #9
 8006da8:	46c8      	mov	r8, r9
 8006daa:	442c      	add	r4, r5
 8006dac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006db0:	4601      	mov	r1, r0
 8006db2:	3b30      	subs	r3, #48	@ 0x30
 8006db4:	220a      	movs	r2, #10
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff ff8c 	bl	8006cd4 <__multadd>
 8006dbc:	45a0      	cmp	r8, r4
 8006dbe:	d1f5      	bne.n	8006dac <__s2b+0x4c>
 8006dc0:	f1a5 0408 	sub.w	r4, r5, #8
 8006dc4:	444c      	add	r4, r9
 8006dc6:	1b2d      	subs	r5, r5, r4
 8006dc8:	1963      	adds	r3, r4, r5
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	db04      	blt.n	8006dd8 <__s2b+0x78>
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	340a      	adds	r4, #10
 8006dd4:	2509      	movs	r5, #9
 8006dd6:	e7f6      	b.n	8006dc6 <__s2b+0x66>
 8006dd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ddc:	4601      	mov	r1, r0
 8006dde:	3b30      	subs	r3, #48	@ 0x30
 8006de0:	220a      	movs	r2, #10
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ff76 	bl	8006cd4 <__multadd>
 8006de8:	e7ee      	b.n	8006dc8 <__s2b+0x68>
 8006dea:	bf00      	nop
 8006dec:	0800a2f9 	.word	0x0800a2f9
 8006df0:	0800a30a 	.word	0x0800a30a

08006df4 <__hi0bits>:
 8006df4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006df8:	4603      	mov	r3, r0
 8006dfa:	bf36      	itet	cc
 8006dfc:	0403      	lslcc	r3, r0, #16
 8006dfe:	2000      	movcs	r0, #0
 8006e00:	2010      	movcc	r0, #16
 8006e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e06:	bf3c      	itt	cc
 8006e08:	021b      	lslcc	r3, r3, #8
 8006e0a:	3008      	addcc	r0, #8
 8006e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e10:	bf3c      	itt	cc
 8006e12:	011b      	lslcc	r3, r3, #4
 8006e14:	3004      	addcc	r0, #4
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1a:	bf3c      	itt	cc
 8006e1c:	009b      	lslcc	r3, r3, #2
 8006e1e:	3002      	addcc	r0, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	db05      	blt.n	8006e30 <__hi0bits+0x3c>
 8006e24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e28:	f100 0001 	add.w	r0, r0, #1
 8006e2c:	bf08      	it	eq
 8006e2e:	2020      	moveq	r0, #32
 8006e30:	4770      	bx	lr

08006e32 <__lo0bits>:
 8006e32:	6803      	ldr	r3, [r0, #0]
 8006e34:	4602      	mov	r2, r0
 8006e36:	f013 0007 	ands.w	r0, r3, #7
 8006e3a:	d00b      	beq.n	8006e54 <__lo0bits+0x22>
 8006e3c:	07d9      	lsls	r1, r3, #31
 8006e3e:	d421      	bmi.n	8006e84 <__lo0bits+0x52>
 8006e40:	0798      	lsls	r0, r3, #30
 8006e42:	bf49      	itett	mi
 8006e44:	085b      	lsrmi	r3, r3, #1
 8006e46:	089b      	lsrpl	r3, r3, #2
 8006e48:	2001      	movmi	r0, #1
 8006e4a:	6013      	strmi	r3, [r2, #0]
 8006e4c:	bf5c      	itt	pl
 8006e4e:	6013      	strpl	r3, [r2, #0]
 8006e50:	2002      	movpl	r0, #2
 8006e52:	4770      	bx	lr
 8006e54:	b299      	uxth	r1, r3
 8006e56:	b909      	cbnz	r1, 8006e5c <__lo0bits+0x2a>
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	2010      	movs	r0, #16
 8006e5c:	b2d9      	uxtb	r1, r3
 8006e5e:	b909      	cbnz	r1, 8006e64 <__lo0bits+0x32>
 8006e60:	3008      	adds	r0, #8
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	0719      	lsls	r1, r3, #28
 8006e66:	bf04      	itt	eq
 8006e68:	091b      	lsreq	r3, r3, #4
 8006e6a:	3004      	addeq	r0, #4
 8006e6c:	0799      	lsls	r1, r3, #30
 8006e6e:	bf04      	itt	eq
 8006e70:	089b      	lsreq	r3, r3, #2
 8006e72:	3002      	addeq	r0, #2
 8006e74:	07d9      	lsls	r1, r3, #31
 8006e76:	d403      	bmi.n	8006e80 <__lo0bits+0x4e>
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	f100 0001 	add.w	r0, r0, #1
 8006e7e:	d003      	beq.n	8006e88 <__lo0bits+0x56>
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4770      	bx	lr
 8006e84:	2000      	movs	r0, #0
 8006e86:	4770      	bx	lr
 8006e88:	2020      	movs	r0, #32
 8006e8a:	4770      	bx	lr

08006e8c <__i2b>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	460c      	mov	r4, r1
 8006e90:	2101      	movs	r1, #1
 8006e92:	f7ff febd 	bl	8006c10 <_Balloc>
 8006e96:	4602      	mov	r2, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <__i2b+0x1a>
 8006e9a:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <__i2b+0x24>)
 8006e9c:	4805      	ldr	r0, [pc, #20]	@ (8006eb4 <__i2b+0x28>)
 8006e9e:	f240 1145 	movw	r1, #325	@ 0x145
 8006ea2:	f001 fe11 	bl	8008ac8 <__assert_func>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	6144      	str	r4, [r0, #20]
 8006eaa:	6103      	str	r3, [r0, #16]
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	0800a2f9 	.word	0x0800a2f9
 8006eb4:	0800a30a 	.word	0x0800a30a

08006eb8 <__multiply>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	4617      	mov	r7, r2
 8006ebe:	690a      	ldr	r2, [r1, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	bfa8      	it	ge
 8006ec6:	463b      	movge	r3, r7
 8006ec8:	4689      	mov	r9, r1
 8006eca:	bfa4      	itt	ge
 8006ecc:	460f      	movge	r7, r1
 8006ece:	4699      	movge	r9, r3
 8006ed0:	693d      	ldr	r5, [r7, #16]
 8006ed2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	eb05 060a 	add.w	r6, r5, sl
 8006ede:	42b3      	cmp	r3, r6
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	bfb8      	it	lt
 8006ee4:	3101      	addlt	r1, #1
 8006ee6:	f7ff fe93 	bl	8006c10 <_Balloc>
 8006eea:	b930      	cbnz	r0, 8006efa <__multiply+0x42>
 8006eec:	4602      	mov	r2, r0
 8006eee:	4b41      	ldr	r3, [pc, #260]	@ (8006ff4 <__multiply+0x13c>)
 8006ef0:	4841      	ldr	r0, [pc, #260]	@ (8006ff8 <__multiply+0x140>)
 8006ef2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ef6:	f001 fde7 	bl	8008ac8 <__assert_func>
 8006efa:	f100 0414 	add.w	r4, r0, #20
 8006efe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006f02:	4623      	mov	r3, r4
 8006f04:	2200      	movs	r2, #0
 8006f06:	4573      	cmp	r3, lr
 8006f08:	d320      	bcc.n	8006f4c <__multiply+0x94>
 8006f0a:	f107 0814 	add.w	r8, r7, #20
 8006f0e:	f109 0114 	add.w	r1, r9, #20
 8006f12:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006f16:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006f1a:	9302      	str	r3, [sp, #8]
 8006f1c:	1beb      	subs	r3, r5, r7
 8006f1e:	3b15      	subs	r3, #21
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	3304      	adds	r3, #4
 8006f26:	3715      	adds	r7, #21
 8006f28:	42bd      	cmp	r5, r7
 8006f2a:	bf38      	it	cc
 8006f2c:	2304      	movcc	r3, #4
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	9b02      	ldr	r3, [sp, #8]
 8006f32:	9103      	str	r1, [sp, #12]
 8006f34:	428b      	cmp	r3, r1
 8006f36:	d80c      	bhi.n	8006f52 <__multiply+0x9a>
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	dd03      	ble.n	8006f44 <__multiply+0x8c>
 8006f3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d055      	beq.n	8006ff0 <__multiply+0x138>
 8006f44:	6106      	str	r6, [r0, #16]
 8006f46:	b005      	add	sp, #20
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	f843 2b04 	str.w	r2, [r3], #4
 8006f50:	e7d9      	b.n	8006f06 <__multiply+0x4e>
 8006f52:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f56:	f1ba 0f00 	cmp.w	sl, #0
 8006f5a:	d01f      	beq.n	8006f9c <__multiply+0xe4>
 8006f5c:	46c4      	mov	ip, r8
 8006f5e:	46a1      	mov	r9, r4
 8006f60:	2700      	movs	r7, #0
 8006f62:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f66:	f8d9 3000 	ldr.w	r3, [r9]
 8006f6a:	fa1f fb82 	uxth.w	fp, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f74:	443b      	add	r3, r7
 8006f76:	f8d9 7000 	ldr.w	r7, [r9]
 8006f7a:	0c12      	lsrs	r2, r2, #16
 8006f7c:	0c3f      	lsrs	r7, r7, #16
 8006f7e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006f82:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8c:	4565      	cmp	r5, ip
 8006f8e:	f849 3b04 	str.w	r3, [r9], #4
 8006f92:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006f96:	d8e4      	bhi.n	8006f62 <__multiply+0xaa>
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	50e7      	str	r7, [r4, r3]
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006fa2:	3104      	adds	r1, #4
 8006fa4:	f1b9 0f00 	cmp.w	r9, #0
 8006fa8:	d020      	beq.n	8006fec <__multiply+0x134>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	4647      	mov	r7, r8
 8006fae:	46a4      	mov	ip, r4
 8006fb0:	f04f 0a00 	mov.w	sl, #0
 8006fb4:	f8b7 b000 	ldrh.w	fp, [r7]
 8006fb8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006fbc:	fb09 220b 	mla	r2, r9, fp, r2
 8006fc0:	4452      	add	r2, sl
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc8:	f84c 3b04 	str.w	r3, [ip], #4
 8006fcc:	f857 3b04 	ldr.w	r3, [r7], #4
 8006fd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fd4:	f8bc 3000 	ldrh.w	r3, [ip]
 8006fd8:	fb09 330a 	mla	r3, r9, sl, r3
 8006fdc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006fe0:	42bd      	cmp	r5, r7
 8006fe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fe6:	d8e5      	bhi.n	8006fb4 <__multiply+0xfc>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	50a3      	str	r3, [r4, r2]
 8006fec:	3404      	adds	r4, #4
 8006fee:	e79f      	b.n	8006f30 <__multiply+0x78>
 8006ff0:	3e01      	subs	r6, #1
 8006ff2:	e7a1      	b.n	8006f38 <__multiply+0x80>
 8006ff4:	0800a2f9 	.word	0x0800a2f9
 8006ff8:	0800a30a 	.word	0x0800a30a

08006ffc <__pow5mult>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4615      	mov	r5, r2
 8007002:	f012 0203 	ands.w	r2, r2, #3
 8007006:	4607      	mov	r7, r0
 8007008:	460e      	mov	r6, r1
 800700a:	d007      	beq.n	800701c <__pow5mult+0x20>
 800700c:	4c25      	ldr	r4, [pc, #148]	@ (80070a4 <__pow5mult+0xa8>)
 800700e:	3a01      	subs	r2, #1
 8007010:	2300      	movs	r3, #0
 8007012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007016:	f7ff fe5d 	bl	8006cd4 <__multadd>
 800701a:	4606      	mov	r6, r0
 800701c:	10ad      	asrs	r5, r5, #2
 800701e:	d03d      	beq.n	800709c <__pow5mult+0xa0>
 8007020:	69fc      	ldr	r4, [r7, #28]
 8007022:	b97c      	cbnz	r4, 8007044 <__pow5mult+0x48>
 8007024:	2010      	movs	r0, #16
 8007026:	f7ff fd3d 	bl	8006aa4 <malloc>
 800702a:	4602      	mov	r2, r0
 800702c:	61f8      	str	r0, [r7, #28]
 800702e:	b928      	cbnz	r0, 800703c <__pow5mult+0x40>
 8007030:	4b1d      	ldr	r3, [pc, #116]	@ (80070a8 <__pow5mult+0xac>)
 8007032:	481e      	ldr	r0, [pc, #120]	@ (80070ac <__pow5mult+0xb0>)
 8007034:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007038:	f001 fd46 	bl	8008ac8 <__assert_func>
 800703c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007040:	6004      	str	r4, [r0, #0]
 8007042:	60c4      	str	r4, [r0, #12]
 8007044:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800704c:	b94c      	cbnz	r4, 8007062 <__pow5mult+0x66>
 800704e:	f240 2171 	movw	r1, #625	@ 0x271
 8007052:	4638      	mov	r0, r7
 8007054:	f7ff ff1a 	bl	8006e8c <__i2b>
 8007058:	2300      	movs	r3, #0
 800705a:	f8c8 0008 	str.w	r0, [r8, #8]
 800705e:	4604      	mov	r4, r0
 8007060:	6003      	str	r3, [r0, #0]
 8007062:	f04f 0900 	mov.w	r9, #0
 8007066:	07eb      	lsls	r3, r5, #31
 8007068:	d50a      	bpl.n	8007080 <__pow5mult+0x84>
 800706a:	4631      	mov	r1, r6
 800706c:	4622      	mov	r2, r4
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff ff22 	bl	8006eb8 <__multiply>
 8007074:	4631      	mov	r1, r6
 8007076:	4680      	mov	r8, r0
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff fe09 	bl	8006c90 <_Bfree>
 800707e:	4646      	mov	r6, r8
 8007080:	106d      	asrs	r5, r5, #1
 8007082:	d00b      	beq.n	800709c <__pow5mult+0xa0>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	b938      	cbnz	r0, 8007098 <__pow5mult+0x9c>
 8007088:	4622      	mov	r2, r4
 800708a:	4621      	mov	r1, r4
 800708c:	4638      	mov	r0, r7
 800708e:	f7ff ff13 	bl	8006eb8 <__multiply>
 8007092:	6020      	str	r0, [r4, #0]
 8007094:	f8c0 9000 	str.w	r9, [r0]
 8007098:	4604      	mov	r4, r0
 800709a:	e7e4      	b.n	8007066 <__pow5mult+0x6a>
 800709c:	4630      	mov	r0, r6
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a2:	bf00      	nop
 80070a4:	0800a41c 	.word	0x0800a41c
 80070a8:	0800a28a 	.word	0x0800a28a
 80070ac:	0800a30a 	.word	0x0800a30a

080070b0 <__lshift>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	460c      	mov	r4, r1
 80070b6:	6849      	ldr	r1, [r1, #4]
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	4607      	mov	r7, r0
 80070c2:	4691      	mov	r9, r2
 80070c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070c8:	f108 0601 	add.w	r6, r8, #1
 80070cc:	42b3      	cmp	r3, r6
 80070ce:	db0b      	blt.n	80070e8 <__lshift+0x38>
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff fd9d 	bl	8006c10 <_Balloc>
 80070d6:	4605      	mov	r5, r0
 80070d8:	b948      	cbnz	r0, 80070ee <__lshift+0x3e>
 80070da:	4602      	mov	r2, r0
 80070dc:	4b28      	ldr	r3, [pc, #160]	@ (8007180 <__lshift+0xd0>)
 80070de:	4829      	ldr	r0, [pc, #164]	@ (8007184 <__lshift+0xd4>)
 80070e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070e4:	f001 fcf0 	bl	8008ac8 <__assert_func>
 80070e8:	3101      	adds	r1, #1
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	e7ee      	b.n	80070cc <__lshift+0x1c>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f100 0114 	add.w	r1, r0, #20
 80070f4:	f100 0210 	add.w	r2, r0, #16
 80070f8:	4618      	mov	r0, r3
 80070fa:	4553      	cmp	r3, sl
 80070fc:	db33      	blt.n	8007166 <__lshift+0xb6>
 80070fe:	6920      	ldr	r0, [r4, #16]
 8007100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007104:	f104 0314 	add.w	r3, r4, #20
 8007108:	f019 091f 	ands.w	r9, r9, #31
 800710c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007114:	d02b      	beq.n	800716e <__lshift+0xbe>
 8007116:	f1c9 0e20 	rsb	lr, r9, #32
 800711a:	468a      	mov	sl, r1
 800711c:	2200      	movs	r2, #0
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	fa00 f009 	lsl.w	r0, r0, r9
 8007124:	4310      	orrs	r0, r2
 8007126:	f84a 0b04 	str.w	r0, [sl], #4
 800712a:	f853 2b04 	ldr.w	r2, [r3], #4
 800712e:	459c      	cmp	ip, r3
 8007130:	fa22 f20e 	lsr.w	r2, r2, lr
 8007134:	d8f3      	bhi.n	800711e <__lshift+0x6e>
 8007136:	ebac 0304 	sub.w	r3, ip, r4
 800713a:	3b15      	subs	r3, #21
 800713c:	f023 0303 	bic.w	r3, r3, #3
 8007140:	3304      	adds	r3, #4
 8007142:	f104 0015 	add.w	r0, r4, #21
 8007146:	4560      	cmp	r0, ip
 8007148:	bf88      	it	hi
 800714a:	2304      	movhi	r3, #4
 800714c:	50ca      	str	r2, [r1, r3]
 800714e:	b10a      	cbz	r2, 8007154 <__lshift+0xa4>
 8007150:	f108 0602 	add.w	r6, r8, #2
 8007154:	3e01      	subs	r6, #1
 8007156:	4638      	mov	r0, r7
 8007158:	612e      	str	r6, [r5, #16]
 800715a:	4621      	mov	r1, r4
 800715c:	f7ff fd98 	bl	8006c90 <_Bfree>
 8007160:	4628      	mov	r0, r5
 8007162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007166:	f842 0f04 	str.w	r0, [r2, #4]!
 800716a:	3301      	adds	r3, #1
 800716c:	e7c5      	b.n	80070fa <__lshift+0x4a>
 800716e:	3904      	subs	r1, #4
 8007170:	f853 2b04 	ldr.w	r2, [r3], #4
 8007174:	f841 2f04 	str.w	r2, [r1, #4]!
 8007178:	459c      	cmp	ip, r3
 800717a:	d8f9      	bhi.n	8007170 <__lshift+0xc0>
 800717c:	e7ea      	b.n	8007154 <__lshift+0xa4>
 800717e:	bf00      	nop
 8007180:	0800a2f9 	.word	0x0800a2f9
 8007184:	0800a30a 	.word	0x0800a30a

08007188 <__mcmp>:
 8007188:	690a      	ldr	r2, [r1, #16]
 800718a:	4603      	mov	r3, r0
 800718c:	6900      	ldr	r0, [r0, #16]
 800718e:	1a80      	subs	r0, r0, r2
 8007190:	b530      	push	{r4, r5, lr}
 8007192:	d10e      	bne.n	80071b2 <__mcmp+0x2a>
 8007194:	3314      	adds	r3, #20
 8007196:	3114      	adds	r1, #20
 8007198:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800719c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071a8:	4295      	cmp	r5, r2
 80071aa:	d003      	beq.n	80071b4 <__mcmp+0x2c>
 80071ac:	d205      	bcs.n	80071ba <__mcmp+0x32>
 80071ae:	f04f 30ff 	mov.w	r0, #4294967295
 80071b2:	bd30      	pop	{r4, r5, pc}
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	d3f3      	bcc.n	80071a0 <__mcmp+0x18>
 80071b8:	e7fb      	b.n	80071b2 <__mcmp+0x2a>
 80071ba:	2001      	movs	r0, #1
 80071bc:	e7f9      	b.n	80071b2 <__mcmp+0x2a>
	...

080071c0 <__mdiff>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4689      	mov	r9, r1
 80071c6:	4606      	mov	r6, r0
 80071c8:	4611      	mov	r1, r2
 80071ca:	4648      	mov	r0, r9
 80071cc:	4614      	mov	r4, r2
 80071ce:	f7ff ffdb 	bl	8007188 <__mcmp>
 80071d2:	1e05      	subs	r5, r0, #0
 80071d4:	d112      	bne.n	80071fc <__mdiff+0x3c>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff fd19 	bl	8006c10 <_Balloc>
 80071de:	4602      	mov	r2, r0
 80071e0:	b928      	cbnz	r0, 80071ee <__mdiff+0x2e>
 80071e2:	4b3f      	ldr	r3, [pc, #252]	@ (80072e0 <__mdiff+0x120>)
 80071e4:	f240 2137 	movw	r1, #567	@ 0x237
 80071e8:	483e      	ldr	r0, [pc, #248]	@ (80072e4 <__mdiff+0x124>)
 80071ea:	f001 fc6d 	bl	8008ac8 <__assert_func>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071f4:	4610      	mov	r0, r2
 80071f6:	b003      	add	sp, #12
 80071f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fc:	bfbc      	itt	lt
 80071fe:	464b      	movlt	r3, r9
 8007200:	46a1      	movlt	r9, r4
 8007202:	4630      	mov	r0, r6
 8007204:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007208:	bfba      	itte	lt
 800720a:	461c      	movlt	r4, r3
 800720c:	2501      	movlt	r5, #1
 800720e:	2500      	movge	r5, #0
 8007210:	f7ff fcfe 	bl	8006c10 <_Balloc>
 8007214:	4602      	mov	r2, r0
 8007216:	b918      	cbnz	r0, 8007220 <__mdiff+0x60>
 8007218:	4b31      	ldr	r3, [pc, #196]	@ (80072e0 <__mdiff+0x120>)
 800721a:	f240 2145 	movw	r1, #581	@ 0x245
 800721e:	e7e3      	b.n	80071e8 <__mdiff+0x28>
 8007220:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007224:	6926      	ldr	r6, [r4, #16]
 8007226:	60c5      	str	r5, [r0, #12]
 8007228:	f109 0310 	add.w	r3, r9, #16
 800722c:	f109 0514 	add.w	r5, r9, #20
 8007230:	f104 0e14 	add.w	lr, r4, #20
 8007234:	f100 0b14 	add.w	fp, r0, #20
 8007238:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800723c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	46d9      	mov	r9, fp
 8007244:	f04f 0c00 	mov.w	ip, #0
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800724e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	fa1f f38a 	uxth.w	r3, sl
 8007258:	4619      	mov	r1, r3
 800725a:	b283      	uxth	r3, r0
 800725c:	1acb      	subs	r3, r1, r3
 800725e:	0c00      	lsrs	r0, r0, #16
 8007260:	4463      	add	r3, ip
 8007262:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007266:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800726a:	b29b      	uxth	r3, r3
 800726c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007270:	4576      	cmp	r6, lr
 8007272:	f849 3b04 	str.w	r3, [r9], #4
 8007276:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800727a:	d8e5      	bhi.n	8007248 <__mdiff+0x88>
 800727c:	1b33      	subs	r3, r6, r4
 800727e:	3b15      	subs	r3, #21
 8007280:	f023 0303 	bic.w	r3, r3, #3
 8007284:	3415      	adds	r4, #21
 8007286:	3304      	adds	r3, #4
 8007288:	42a6      	cmp	r6, r4
 800728a:	bf38      	it	cc
 800728c:	2304      	movcc	r3, #4
 800728e:	441d      	add	r5, r3
 8007290:	445b      	add	r3, fp
 8007292:	461e      	mov	r6, r3
 8007294:	462c      	mov	r4, r5
 8007296:	4544      	cmp	r4, r8
 8007298:	d30e      	bcc.n	80072b8 <__mdiff+0xf8>
 800729a:	f108 0103 	add.w	r1, r8, #3
 800729e:	1b49      	subs	r1, r1, r5
 80072a0:	f021 0103 	bic.w	r1, r1, #3
 80072a4:	3d03      	subs	r5, #3
 80072a6:	45a8      	cmp	r8, r5
 80072a8:	bf38      	it	cc
 80072aa:	2100      	movcc	r1, #0
 80072ac:	440b      	add	r3, r1
 80072ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072b2:	b191      	cbz	r1, 80072da <__mdiff+0x11a>
 80072b4:	6117      	str	r7, [r2, #16]
 80072b6:	e79d      	b.n	80071f4 <__mdiff+0x34>
 80072b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80072bc:	46e6      	mov	lr, ip
 80072be:	0c08      	lsrs	r0, r1, #16
 80072c0:	fa1c fc81 	uxtah	ip, ip, r1
 80072c4:	4471      	add	r1, lr
 80072c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80072ca:	b289      	uxth	r1, r1
 80072cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072d0:	f846 1b04 	str.w	r1, [r6], #4
 80072d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072d8:	e7dd      	b.n	8007296 <__mdiff+0xd6>
 80072da:	3f01      	subs	r7, #1
 80072dc:	e7e7      	b.n	80072ae <__mdiff+0xee>
 80072de:	bf00      	nop
 80072e0:	0800a2f9 	.word	0x0800a2f9
 80072e4:	0800a30a 	.word	0x0800a30a

080072e8 <__ulp>:
 80072e8:	b082      	sub	sp, #8
 80072ea:	ed8d 0b00 	vstr	d0, [sp]
 80072ee:	9a01      	ldr	r2, [sp, #4]
 80072f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007330 <__ulp+0x48>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	dc08      	bgt.n	800730e <__ulp+0x26>
 80072fc:	425b      	negs	r3, r3
 80072fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007302:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007306:	da04      	bge.n	8007312 <__ulp+0x2a>
 8007308:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800730c:	4113      	asrs	r3, r2
 800730e:	2200      	movs	r2, #0
 8007310:	e008      	b.n	8007324 <__ulp+0x3c>
 8007312:	f1a2 0314 	sub.w	r3, r2, #20
 8007316:	2b1e      	cmp	r3, #30
 8007318:	bfda      	itte	le
 800731a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800731e:	40da      	lsrle	r2, r3
 8007320:	2201      	movgt	r2, #1
 8007322:	2300      	movs	r3, #0
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	ec41 0b10 	vmov	d0, r0, r1
 800732c:	b002      	add	sp, #8
 800732e:	4770      	bx	lr
 8007330:	7ff00000 	.word	0x7ff00000

08007334 <__b2d>:
 8007334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007338:	6906      	ldr	r6, [r0, #16]
 800733a:	f100 0814 	add.w	r8, r0, #20
 800733e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007342:	1f37      	subs	r7, r6, #4
 8007344:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007348:	4610      	mov	r0, r2
 800734a:	f7ff fd53 	bl	8006df4 <__hi0bits>
 800734e:	f1c0 0320 	rsb	r3, r0, #32
 8007352:	280a      	cmp	r0, #10
 8007354:	600b      	str	r3, [r1, #0]
 8007356:	491b      	ldr	r1, [pc, #108]	@ (80073c4 <__b2d+0x90>)
 8007358:	dc15      	bgt.n	8007386 <__b2d+0x52>
 800735a:	f1c0 0c0b 	rsb	ip, r0, #11
 800735e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007362:	45b8      	cmp	r8, r7
 8007364:	ea43 0501 	orr.w	r5, r3, r1
 8007368:	bf34      	ite	cc
 800736a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800736e:	2300      	movcs	r3, #0
 8007370:	3015      	adds	r0, #21
 8007372:	fa02 f000 	lsl.w	r0, r2, r0
 8007376:	fa23 f30c 	lsr.w	r3, r3, ip
 800737a:	4303      	orrs	r3, r0
 800737c:	461c      	mov	r4, r3
 800737e:	ec45 4b10 	vmov	d0, r4, r5
 8007382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007386:	45b8      	cmp	r8, r7
 8007388:	bf3a      	itte	cc
 800738a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800738e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007392:	2300      	movcs	r3, #0
 8007394:	380b      	subs	r0, #11
 8007396:	d012      	beq.n	80073be <__b2d+0x8a>
 8007398:	f1c0 0120 	rsb	r1, r0, #32
 800739c:	fa23 f401 	lsr.w	r4, r3, r1
 80073a0:	4082      	lsls	r2, r0
 80073a2:	4322      	orrs	r2, r4
 80073a4:	4547      	cmp	r7, r8
 80073a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80073aa:	bf8c      	ite	hi
 80073ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80073b0:	2200      	movls	r2, #0
 80073b2:	4083      	lsls	r3, r0
 80073b4:	40ca      	lsrs	r2, r1
 80073b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80073ba:	4313      	orrs	r3, r2
 80073bc:	e7de      	b.n	800737c <__b2d+0x48>
 80073be:	ea42 0501 	orr.w	r5, r2, r1
 80073c2:	e7db      	b.n	800737c <__b2d+0x48>
 80073c4:	3ff00000 	.word	0x3ff00000

080073c8 <__d2b>:
 80073c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	460f      	mov	r7, r1
 80073ce:	2101      	movs	r1, #1
 80073d0:	ec59 8b10 	vmov	r8, r9, d0
 80073d4:	4616      	mov	r6, r2
 80073d6:	f7ff fc1b 	bl	8006c10 <_Balloc>
 80073da:	4604      	mov	r4, r0
 80073dc:	b930      	cbnz	r0, 80073ec <__d2b+0x24>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b23      	ldr	r3, [pc, #140]	@ (8007470 <__d2b+0xa8>)
 80073e2:	4824      	ldr	r0, [pc, #144]	@ (8007474 <__d2b+0xac>)
 80073e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80073e8:	f001 fb6e 	bl	8008ac8 <__assert_func>
 80073ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073f4:	b10d      	cbz	r5, 80073fa <__d2b+0x32>
 80073f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	f1b8 0300 	subs.w	r3, r8, #0
 8007400:	d023      	beq.n	800744a <__d2b+0x82>
 8007402:	4668      	mov	r0, sp
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	f7ff fd14 	bl	8006e32 <__lo0bits>
 800740a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800740e:	b1d0      	cbz	r0, 8007446 <__d2b+0x7e>
 8007410:	f1c0 0320 	rsb	r3, r0, #32
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	430b      	orrs	r3, r1
 800741a:	40c2      	lsrs	r2, r0
 800741c:	6163      	str	r3, [r4, #20]
 800741e:	9201      	str	r2, [sp, #4]
 8007420:	9b01      	ldr	r3, [sp, #4]
 8007422:	61a3      	str	r3, [r4, #24]
 8007424:	2b00      	cmp	r3, #0
 8007426:	bf0c      	ite	eq
 8007428:	2201      	moveq	r2, #1
 800742a:	2202      	movne	r2, #2
 800742c:	6122      	str	r2, [r4, #16]
 800742e:	b1a5      	cbz	r5, 800745a <__d2b+0x92>
 8007430:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007434:	4405      	add	r5, r0
 8007436:	603d      	str	r5, [r7, #0]
 8007438:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800743c:	6030      	str	r0, [r6, #0]
 800743e:	4620      	mov	r0, r4
 8007440:	b003      	add	sp, #12
 8007442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007446:	6161      	str	r1, [r4, #20]
 8007448:	e7ea      	b.n	8007420 <__d2b+0x58>
 800744a:	a801      	add	r0, sp, #4
 800744c:	f7ff fcf1 	bl	8006e32 <__lo0bits>
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	6163      	str	r3, [r4, #20]
 8007454:	3020      	adds	r0, #32
 8007456:	2201      	movs	r2, #1
 8007458:	e7e8      	b.n	800742c <__d2b+0x64>
 800745a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800745e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007462:	6038      	str	r0, [r7, #0]
 8007464:	6918      	ldr	r0, [r3, #16]
 8007466:	f7ff fcc5 	bl	8006df4 <__hi0bits>
 800746a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800746e:	e7e5      	b.n	800743c <__d2b+0x74>
 8007470:	0800a2f9 	.word	0x0800a2f9
 8007474:	0800a30a 	.word	0x0800a30a

08007478 <__ratio>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	b085      	sub	sp, #20
 800747e:	e9cd 1000 	strd	r1, r0, [sp]
 8007482:	a902      	add	r1, sp, #8
 8007484:	f7ff ff56 	bl	8007334 <__b2d>
 8007488:	9800      	ldr	r0, [sp, #0]
 800748a:	a903      	add	r1, sp, #12
 800748c:	ec55 4b10 	vmov	r4, r5, d0
 8007490:	f7ff ff50 	bl	8007334 <__b2d>
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	6919      	ldr	r1, [r3, #16]
 8007498:	9b00      	ldr	r3, [sp, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	1ac9      	subs	r1, r1, r3
 800749e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	ec5b ab10 	vmov	sl, fp, d0
 80074a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bfce      	itee	gt
 80074b0:	462a      	movgt	r2, r5
 80074b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074b6:	465a      	movle	r2, fp
 80074b8:	462f      	mov	r7, r5
 80074ba:	46d9      	mov	r9, fp
 80074bc:	bfcc      	ite	gt
 80074be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80074c6:	464b      	mov	r3, r9
 80074c8:	4652      	mov	r2, sl
 80074ca:	4620      	mov	r0, r4
 80074cc:	4639      	mov	r1, r7
 80074ce:	f7f9 f9c5 	bl	800085c <__aeabi_ddiv>
 80074d2:	ec41 0b10 	vmov	d0, r0, r1
 80074d6:	b005      	add	sp, #20
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074dc <__copybits>:
 80074dc:	3901      	subs	r1, #1
 80074de:	b570      	push	{r4, r5, r6, lr}
 80074e0:	1149      	asrs	r1, r1, #5
 80074e2:	6914      	ldr	r4, [r2, #16]
 80074e4:	3101      	adds	r1, #1
 80074e6:	f102 0314 	add.w	r3, r2, #20
 80074ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074f2:	1f05      	subs	r5, r0, #4
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d30c      	bcc.n	8007512 <__copybits+0x36>
 80074f8:	1aa3      	subs	r3, r4, r2
 80074fa:	3b11      	subs	r3, #17
 80074fc:	f023 0303 	bic.w	r3, r3, #3
 8007500:	3211      	adds	r2, #17
 8007502:	42a2      	cmp	r2, r4
 8007504:	bf88      	it	hi
 8007506:	2300      	movhi	r3, #0
 8007508:	4418      	add	r0, r3
 800750a:	2300      	movs	r3, #0
 800750c:	4288      	cmp	r0, r1
 800750e:	d305      	bcc.n	800751c <__copybits+0x40>
 8007510:	bd70      	pop	{r4, r5, r6, pc}
 8007512:	f853 6b04 	ldr.w	r6, [r3], #4
 8007516:	f845 6f04 	str.w	r6, [r5, #4]!
 800751a:	e7eb      	b.n	80074f4 <__copybits+0x18>
 800751c:	f840 3b04 	str.w	r3, [r0], #4
 8007520:	e7f4      	b.n	800750c <__copybits+0x30>

08007522 <__any_on>:
 8007522:	f100 0214 	add.w	r2, r0, #20
 8007526:	6900      	ldr	r0, [r0, #16]
 8007528:	114b      	asrs	r3, r1, #5
 800752a:	4298      	cmp	r0, r3
 800752c:	b510      	push	{r4, lr}
 800752e:	db11      	blt.n	8007554 <__any_on+0x32>
 8007530:	dd0a      	ble.n	8007548 <__any_on+0x26>
 8007532:	f011 011f 	ands.w	r1, r1, #31
 8007536:	d007      	beq.n	8007548 <__any_on+0x26>
 8007538:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800753c:	fa24 f001 	lsr.w	r0, r4, r1
 8007540:	fa00 f101 	lsl.w	r1, r0, r1
 8007544:	428c      	cmp	r4, r1
 8007546:	d10b      	bne.n	8007560 <__any_on+0x3e>
 8007548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800754c:	4293      	cmp	r3, r2
 800754e:	d803      	bhi.n	8007558 <__any_on+0x36>
 8007550:	2000      	movs	r0, #0
 8007552:	bd10      	pop	{r4, pc}
 8007554:	4603      	mov	r3, r0
 8007556:	e7f7      	b.n	8007548 <__any_on+0x26>
 8007558:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800755c:	2900      	cmp	r1, #0
 800755e:	d0f5      	beq.n	800754c <__any_on+0x2a>
 8007560:	2001      	movs	r0, #1
 8007562:	e7f6      	b.n	8007552 <__any_on+0x30>

08007564 <sulp>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4604      	mov	r4, r0
 8007568:	460d      	mov	r5, r1
 800756a:	ec45 4b10 	vmov	d0, r4, r5
 800756e:	4616      	mov	r6, r2
 8007570:	f7ff feba 	bl	80072e8 <__ulp>
 8007574:	ec51 0b10 	vmov	r0, r1, d0
 8007578:	b17e      	cbz	r6, 800759a <sulp+0x36>
 800757a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800757e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007582:	2b00      	cmp	r3, #0
 8007584:	dd09      	ble.n	800759a <sulp+0x36>
 8007586:	051b      	lsls	r3, r3, #20
 8007588:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800758c:	2400      	movs	r4, #0
 800758e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	f7f9 f837 	bl	8000608 <__aeabi_dmul>
 800759a:	ec41 0b10 	vmov	d0, r0, r1
 800759e:	bd70      	pop	{r4, r5, r6, pc}

080075a0 <_strtod_l>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	b09f      	sub	sp, #124	@ 0x7c
 80075a6:	460c      	mov	r4, r1
 80075a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80075aa:	2200      	movs	r2, #0
 80075ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80075ae:	9005      	str	r0, [sp, #20]
 80075b0:	f04f 0a00 	mov.w	sl, #0
 80075b4:	f04f 0b00 	mov.w	fp, #0
 80075b8:	460a      	mov	r2, r1
 80075ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80075bc:	7811      	ldrb	r1, [r2, #0]
 80075be:	292b      	cmp	r1, #43	@ 0x2b
 80075c0:	d04a      	beq.n	8007658 <_strtod_l+0xb8>
 80075c2:	d838      	bhi.n	8007636 <_strtod_l+0x96>
 80075c4:	290d      	cmp	r1, #13
 80075c6:	d832      	bhi.n	800762e <_strtod_l+0x8e>
 80075c8:	2908      	cmp	r1, #8
 80075ca:	d832      	bhi.n	8007632 <_strtod_l+0x92>
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d03b      	beq.n	8007648 <_strtod_l+0xa8>
 80075d0:	2200      	movs	r2, #0
 80075d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80075d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80075d6:	782a      	ldrb	r2, [r5, #0]
 80075d8:	2a30      	cmp	r2, #48	@ 0x30
 80075da:	f040 80b2 	bne.w	8007742 <_strtod_l+0x1a2>
 80075de:	786a      	ldrb	r2, [r5, #1]
 80075e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075e4:	2a58      	cmp	r2, #88	@ 0x58
 80075e6:	d16e      	bne.n	80076c6 <_strtod_l+0x126>
 80075e8:	9302      	str	r3, [sp, #8]
 80075ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	4a8f      	ldr	r2, [pc, #572]	@ (8007830 <_strtod_l+0x290>)
 80075f4:	9805      	ldr	r0, [sp, #20]
 80075f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075f8:	a919      	add	r1, sp, #100	@ 0x64
 80075fa:	f001 faff 	bl	8008bfc <__gethex>
 80075fe:	f010 060f 	ands.w	r6, r0, #15
 8007602:	4604      	mov	r4, r0
 8007604:	d005      	beq.n	8007612 <_strtod_l+0x72>
 8007606:	2e06      	cmp	r6, #6
 8007608:	d128      	bne.n	800765c <_strtod_l+0xbc>
 800760a:	3501      	adds	r5, #1
 800760c:	2300      	movs	r3, #0
 800760e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007610:	930e      	str	r3, [sp, #56]	@ 0x38
 8007612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007614:	2b00      	cmp	r3, #0
 8007616:	f040 858e 	bne.w	8008136 <_strtod_l+0xb96>
 800761a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800761c:	b1cb      	cbz	r3, 8007652 <_strtod_l+0xb2>
 800761e:	4652      	mov	r2, sl
 8007620:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007624:	ec43 2b10 	vmov	d0, r2, r3
 8007628:	b01f      	add	sp, #124	@ 0x7c
 800762a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762e:	2920      	cmp	r1, #32
 8007630:	d1ce      	bne.n	80075d0 <_strtod_l+0x30>
 8007632:	3201      	adds	r2, #1
 8007634:	e7c1      	b.n	80075ba <_strtod_l+0x1a>
 8007636:	292d      	cmp	r1, #45	@ 0x2d
 8007638:	d1ca      	bne.n	80075d0 <_strtod_l+0x30>
 800763a:	2101      	movs	r1, #1
 800763c:	910e      	str	r1, [sp, #56]	@ 0x38
 800763e:	1c51      	adds	r1, r2, #1
 8007640:	9119      	str	r1, [sp, #100]	@ 0x64
 8007642:	7852      	ldrb	r2, [r2, #1]
 8007644:	2a00      	cmp	r2, #0
 8007646:	d1c5      	bne.n	80075d4 <_strtod_l+0x34>
 8007648:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800764a:	9419      	str	r4, [sp, #100]	@ 0x64
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8570 	bne.w	8008132 <_strtod_l+0xb92>
 8007652:	4652      	mov	r2, sl
 8007654:	465b      	mov	r3, fp
 8007656:	e7e5      	b.n	8007624 <_strtod_l+0x84>
 8007658:	2100      	movs	r1, #0
 800765a:	e7ef      	b.n	800763c <_strtod_l+0x9c>
 800765c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800765e:	b13a      	cbz	r2, 8007670 <_strtod_l+0xd0>
 8007660:	2135      	movs	r1, #53	@ 0x35
 8007662:	a81c      	add	r0, sp, #112	@ 0x70
 8007664:	f7ff ff3a 	bl	80074dc <__copybits>
 8007668:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800766a:	9805      	ldr	r0, [sp, #20]
 800766c:	f7ff fb10 	bl	8006c90 <_Bfree>
 8007670:	3e01      	subs	r6, #1
 8007672:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007674:	2e04      	cmp	r6, #4
 8007676:	d806      	bhi.n	8007686 <_strtod_l+0xe6>
 8007678:	e8df f006 	tbb	[pc, r6]
 800767c:	201d0314 	.word	0x201d0314
 8007680:	14          	.byte	0x14
 8007681:	00          	.byte	0x00
 8007682:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007686:	05e1      	lsls	r1, r4, #23
 8007688:	bf48      	it	mi
 800768a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800768e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007692:	0d1b      	lsrs	r3, r3, #20
 8007694:	051b      	lsls	r3, r3, #20
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1bb      	bne.n	8007612 <_strtod_l+0x72>
 800769a:	f7fe fb2d 	bl	8005cf8 <__errno>
 800769e:	2322      	movs	r3, #34	@ 0x22
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	e7b6      	b.n	8007612 <_strtod_l+0x72>
 80076a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80076a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80076ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80076b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80076b4:	e7e7      	b.n	8007686 <_strtod_l+0xe6>
 80076b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007838 <_strtod_l+0x298>
 80076ba:	e7e4      	b.n	8007686 <_strtod_l+0xe6>
 80076bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80076c0:	f04f 3aff 	mov.w	sl, #4294967295
 80076c4:	e7df      	b.n	8007686 <_strtod_l+0xe6>
 80076c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b30      	cmp	r3, #48	@ 0x30
 80076d0:	d0f9      	beq.n	80076c6 <_strtod_l+0x126>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d09d      	beq.n	8007612 <_strtod_l+0x72>
 80076d6:	2301      	movs	r3, #1
 80076d8:	2700      	movs	r7, #0
 80076da:	9308      	str	r3, [sp, #32]
 80076dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076de:	930c      	str	r3, [sp, #48]	@ 0x30
 80076e0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80076e2:	46b9      	mov	r9, r7
 80076e4:	220a      	movs	r2, #10
 80076e6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076e8:	7805      	ldrb	r5, [r0, #0]
 80076ea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80076ee:	b2d9      	uxtb	r1, r3
 80076f0:	2909      	cmp	r1, #9
 80076f2:	d928      	bls.n	8007746 <_strtod_l+0x1a6>
 80076f4:	494f      	ldr	r1, [pc, #316]	@ (8007834 <_strtod_l+0x294>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	f001 f9ac 	bl	8008a54 <strncmp>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d032      	beq.n	8007766 <_strtod_l+0x1c6>
 8007700:	2000      	movs	r0, #0
 8007702:	462a      	mov	r2, r5
 8007704:	900a      	str	r0, [sp, #40]	@ 0x28
 8007706:	464d      	mov	r5, r9
 8007708:	4603      	mov	r3, r0
 800770a:	2a65      	cmp	r2, #101	@ 0x65
 800770c:	d001      	beq.n	8007712 <_strtod_l+0x172>
 800770e:	2a45      	cmp	r2, #69	@ 0x45
 8007710:	d114      	bne.n	800773c <_strtod_l+0x19c>
 8007712:	b91d      	cbnz	r5, 800771c <_strtod_l+0x17c>
 8007714:	9a08      	ldr	r2, [sp, #32]
 8007716:	4302      	orrs	r2, r0
 8007718:	d096      	beq.n	8007648 <_strtod_l+0xa8>
 800771a:	2500      	movs	r5, #0
 800771c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800771e:	1c62      	adds	r2, r4, #1
 8007720:	9219      	str	r2, [sp, #100]	@ 0x64
 8007722:	7862      	ldrb	r2, [r4, #1]
 8007724:	2a2b      	cmp	r2, #43	@ 0x2b
 8007726:	d07a      	beq.n	800781e <_strtod_l+0x27e>
 8007728:	2a2d      	cmp	r2, #45	@ 0x2d
 800772a:	d07e      	beq.n	800782a <_strtod_l+0x28a>
 800772c:	f04f 0c00 	mov.w	ip, #0
 8007730:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007734:	2909      	cmp	r1, #9
 8007736:	f240 8085 	bls.w	8007844 <_strtod_l+0x2a4>
 800773a:	9419      	str	r4, [sp, #100]	@ 0x64
 800773c:	f04f 0800 	mov.w	r8, #0
 8007740:	e0a5      	b.n	800788e <_strtod_l+0x2ee>
 8007742:	2300      	movs	r3, #0
 8007744:	e7c8      	b.n	80076d8 <_strtod_l+0x138>
 8007746:	f1b9 0f08 	cmp.w	r9, #8
 800774a:	bfd8      	it	le
 800774c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800774e:	f100 0001 	add.w	r0, r0, #1
 8007752:	bfda      	itte	le
 8007754:	fb02 3301 	mlale	r3, r2, r1, r3
 8007758:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800775a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800775e:	f109 0901 	add.w	r9, r9, #1
 8007762:	9019      	str	r0, [sp, #100]	@ 0x64
 8007764:	e7bf      	b.n	80076e6 <_strtod_l+0x146>
 8007766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	9219      	str	r2, [sp, #100]	@ 0x64
 800776c:	785a      	ldrb	r2, [r3, #1]
 800776e:	f1b9 0f00 	cmp.w	r9, #0
 8007772:	d03b      	beq.n	80077ec <_strtod_l+0x24c>
 8007774:	900a      	str	r0, [sp, #40]	@ 0x28
 8007776:	464d      	mov	r5, r9
 8007778:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800777c:	2b09      	cmp	r3, #9
 800777e:	d912      	bls.n	80077a6 <_strtod_l+0x206>
 8007780:	2301      	movs	r3, #1
 8007782:	e7c2      	b.n	800770a <_strtod_l+0x16a>
 8007784:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	9219      	str	r2, [sp, #100]	@ 0x64
 800778a:	785a      	ldrb	r2, [r3, #1]
 800778c:	3001      	adds	r0, #1
 800778e:	2a30      	cmp	r2, #48	@ 0x30
 8007790:	d0f8      	beq.n	8007784 <_strtod_l+0x1e4>
 8007792:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007796:	2b08      	cmp	r3, #8
 8007798:	f200 84d2 	bhi.w	8008140 <_strtod_l+0xba0>
 800779c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800779e:	900a      	str	r0, [sp, #40]	@ 0x28
 80077a0:	2000      	movs	r0, #0
 80077a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80077a4:	4605      	mov	r5, r0
 80077a6:	3a30      	subs	r2, #48	@ 0x30
 80077a8:	f100 0301 	add.w	r3, r0, #1
 80077ac:	d018      	beq.n	80077e0 <_strtod_l+0x240>
 80077ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077b0:	4419      	add	r1, r3
 80077b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80077b4:	462e      	mov	r6, r5
 80077b6:	f04f 0e0a 	mov.w	lr, #10
 80077ba:	1c71      	adds	r1, r6, #1
 80077bc:	eba1 0c05 	sub.w	ip, r1, r5
 80077c0:	4563      	cmp	r3, ip
 80077c2:	dc15      	bgt.n	80077f0 <_strtod_l+0x250>
 80077c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80077c8:	182b      	adds	r3, r5, r0
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	f105 0501 	add.w	r5, r5, #1
 80077d0:	4405      	add	r5, r0
 80077d2:	dc1a      	bgt.n	800780a <_strtod_l+0x26a>
 80077d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077d6:	230a      	movs	r3, #10
 80077d8:	fb03 2301 	mla	r3, r3, r1, r2
 80077dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077de:	2300      	movs	r3, #0
 80077e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077e2:	1c51      	adds	r1, r2, #1
 80077e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80077e6:	7852      	ldrb	r2, [r2, #1]
 80077e8:	4618      	mov	r0, r3
 80077ea:	e7c5      	b.n	8007778 <_strtod_l+0x1d8>
 80077ec:	4648      	mov	r0, r9
 80077ee:	e7ce      	b.n	800778e <_strtod_l+0x1ee>
 80077f0:	2e08      	cmp	r6, #8
 80077f2:	dc05      	bgt.n	8007800 <_strtod_l+0x260>
 80077f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80077f6:	fb0e f606 	mul.w	r6, lr, r6
 80077fa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80077fc:	460e      	mov	r6, r1
 80077fe:	e7dc      	b.n	80077ba <_strtod_l+0x21a>
 8007800:	2910      	cmp	r1, #16
 8007802:	bfd8      	it	le
 8007804:	fb0e f707 	mulle.w	r7, lr, r7
 8007808:	e7f8      	b.n	80077fc <_strtod_l+0x25c>
 800780a:	2b0f      	cmp	r3, #15
 800780c:	bfdc      	itt	le
 800780e:	230a      	movle	r3, #10
 8007810:	fb03 2707 	mlale	r7, r3, r7, r2
 8007814:	e7e3      	b.n	80077de <_strtod_l+0x23e>
 8007816:	2300      	movs	r3, #0
 8007818:	930a      	str	r3, [sp, #40]	@ 0x28
 800781a:	2301      	movs	r3, #1
 800781c:	e77a      	b.n	8007714 <_strtod_l+0x174>
 800781e:	f04f 0c00 	mov.w	ip, #0
 8007822:	1ca2      	adds	r2, r4, #2
 8007824:	9219      	str	r2, [sp, #100]	@ 0x64
 8007826:	78a2      	ldrb	r2, [r4, #2]
 8007828:	e782      	b.n	8007730 <_strtod_l+0x190>
 800782a:	f04f 0c01 	mov.w	ip, #1
 800782e:	e7f8      	b.n	8007822 <_strtod_l+0x282>
 8007830:	0800a52c 	.word	0x0800a52c
 8007834:	0800a363 	.word	0x0800a363
 8007838:	7ff00000 	.word	0x7ff00000
 800783c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800783e:	1c51      	adds	r1, r2, #1
 8007840:	9119      	str	r1, [sp, #100]	@ 0x64
 8007842:	7852      	ldrb	r2, [r2, #1]
 8007844:	2a30      	cmp	r2, #48	@ 0x30
 8007846:	d0f9      	beq.n	800783c <_strtod_l+0x29c>
 8007848:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800784c:	2908      	cmp	r1, #8
 800784e:	f63f af75 	bhi.w	800773c <_strtod_l+0x19c>
 8007852:	3a30      	subs	r2, #48	@ 0x30
 8007854:	9209      	str	r2, [sp, #36]	@ 0x24
 8007856:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007858:	920f      	str	r2, [sp, #60]	@ 0x3c
 800785a:	f04f 080a 	mov.w	r8, #10
 800785e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007860:	1c56      	adds	r6, r2, #1
 8007862:	9619      	str	r6, [sp, #100]	@ 0x64
 8007864:	7852      	ldrb	r2, [r2, #1]
 8007866:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800786a:	f1be 0f09 	cmp.w	lr, #9
 800786e:	d939      	bls.n	80078e4 <_strtod_l+0x344>
 8007870:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007872:	1a76      	subs	r6, r6, r1
 8007874:	2e08      	cmp	r6, #8
 8007876:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800787a:	dc03      	bgt.n	8007884 <_strtod_l+0x2e4>
 800787c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800787e:	4588      	cmp	r8, r1
 8007880:	bfa8      	it	ge
 8007882:	4688      	movge	r8, r1
 8007884:	f1bc 0f00 	cmp.w	ip, #0
 8007888:	d001      	beq.n	800788e <_strtod_l+0x2ee>
 800788a:	f1c8 0800 	rsb	r8, r8, #0
 800788e:	2d00      	cmp	r5, #0
 8007890:	d14e      	bne.n	8007930 <_strtod_l+0x390>
 8007892:	9908      	ldr	r1, [sp, #32]
 8007894:	4308      	orrs	r0, r1
 8007896:	f47f aebc 	bne.w	8007612 <_strtod_l+0x72>
 800789a:	2b00      	cmp	r3, #0
 800789c:	f47f aed4 	bne.w	8007648 <_strtod_l+0xa8>
 80078a0:	2a69      	cmp	r2, #105	@ 0x69
 80078a2:	d028      	beq.n	80078f6 <_strtod_l+0x356>
 80078a4:	dc25      	bgt.n	80078f2 <_strtod_l+0x352>
 80078a6:	2a49      	cmp	r2, #73	@ 0x49
 80078a8:	d025      	beq.n	80078f6 <_strtod_l+0x356>
 80078aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80078ac:	f47f aecc 	bne.w	8007648 <_strtod_l+0xa8>
 80078b0:	499a      	ldr	r1, [pc, #616]	@ (8007b1c <_strtod_l+0x57c>)
 80078b2:	a819      	add	r0, sp, #100	@ 0x64
 80078b4:	f001 fbc4 	bl	8009040 <__match>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f43f aec5 	beq.w	8007648 <_strtod_l+0xa8>
 80078be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b28      	cmp	r3, #40	@ 0x28
 80078c4:	d12e      	bne.n	8007924 <_strtod_l+0x384>
 80078c6:	4996      	ldr	r1, [pc, #600]	@ (8007b20 <_strtod_l+0x580>)
 80078c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80078ca:	a819      	add	r0, sp, #100	@ 0x64
 80078cc:	f001 fbcc 	bl	8009068 <__hexnan>
 80078d0:	2805      	cmp	r0, #5
 80078d2:	d127      	bne.n	8007924 <_strtod_l+0x384>
 80078d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80078da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80078de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80078e2:	e696      	b.n	8007612 <_strtod_l+0x72>
 80078e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078e6:	fb08 2101 	mla	r1, r8, r1, r2
 80078ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80078f0:	e7b5      	b.n	800785e <_strtod_l+0x2be>
 80078f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80078f4:	e7da      	b.n	80078ac <_strtod_l+0x30c>
 80078f6:	498b      	ldr	r1, [pc, #556]	@ (8007b24 <_strtod_l+0x584>)
 80078f8:	a819      	add	r0, sp, #100	@ 0x64
 80078fa:	f001 fba1 	bl	8009040 <__match>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aea2 	beq.w	8007648 <_strtod_l+0xa8>
 8007904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007906:	4988      	ldr	r1, [pc, #544]	@ (8007b28 <_strtod_l+0x588>)
 8007908:	3b01      	subs	r3, #1
 800790a:	a819      	add	r0, sp, #100	@ 0x64
 800790c:	9319      	str	r3, [sp, #100]	@ 0x64
 800790e:	f001 fb97 	bl	8009040 <__match>
 8007912:	b910      	cbnz	r0, 800791a <_strtod_l+0x37a>
 8007914:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007916:	3301      	adds	r3, #1
 8007918:	9319      	str	r3, [sp, #100]	@ 0x64
 800791a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007b38 <_strtod_l+0x598>
 800791e:	f04f 0a00 	mov.w	sl, #0
 8007922:	e676      	b.n	8007612 <_strtod_l+0x72>
 8007924:	4881      	ldr	r0, [pc, #516]	@ (8007b2c <_strtod_l+0x58c>)
 8007926:	f001 f8c7 	bl	8008ab8 <nan>
 800792a:	ec5b ab10 	vmov	sl, fp, d0
 800792e:	e670      	b.n	8007612 <_strtod_l+0x72>
 8007930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007932:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007934:	eba8 0303 	sub.w	r3, r8, r3
 8007938:	f1b9 0f00 	cmp.w	r9, #0
 800793c:	bf08      	it	eq
 800793e:	46a9      	moveq	r9, r5
 8007940:	2d10      	cmp	r5, #16
 8007942:	9309      	str	r3, [sp, #36]	@ 0x24
 8007944:	462c      	mov	r4, r5
 8007946:	bfa8      	it	ge
 8007948:	2410      	movge	r4, #16
 800794a:	f7f8 fde3 	bl	8000514 <__aeabi_ui2d>
 800794e:	2d09      	cmp	r5, #9
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	dc13      	bgt.n	800797e <_strtod_l+0x3de>
 8007956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	f43f ae5a 	beq.w	8007612 <_strtod_l+0x72>
 800795e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007960:	dd78      	ble.n	8007a54 <_strtod_l+0x4b4>
 8007962:	2b16      	cmp	r3, #22
 8007964:	dc5f      	bgt.n	8007a26 <_strtod_l+0x486>
 8007966:	4972      	ldr	r1, [pc, #456]	@ (8007b30 <_strtod_l+0x590>)
 8007968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800796c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007970:	4652      	mov	r2, sl
 8007972:	465b      	mov	r3, fp
 8007974:	f7f8 fe48 	bl	8000608 <__aeabi_dmul>
 8007978:	4682      	mov	sl, r0
 800797a:	468b      	mov	fp, r1
 800797c:	e649      	b.n	8007612 <_strtod_l+0x72>
 800797e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b30 <_strtod_l+0x590>)
 8007980:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007984:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007988:	f7f8 fe3e 	bl	8000608 <__aeabi_dmul>
 800798c:	4682      	mov	sl, r0
 800798e:	4638      	mov	r0, r7
 8007990:	468b      	mov	fp, r1
 8007992:	f7f8 fdbf 	bl	8000514 <__aeabi_ui2d>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4650      	mov	r0, sl
 800799c:	4659      	mov	r1, fp
 800799e:	f7f8 fc7d 	bl	800029c <__adddf3>
 80079a2:	2d0f      	cmp	r5, #15
 80079a4:	4682      	mov	sl, r0
 80079a6:	468b      	mov	fp, r1
 80079a8:	ddd5      	ble.n	8007956 <_strtod_l+0x3b6>
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	1b2c      	subs	r4, r5, r4
 80079ae:	441c      	add	r4, r3
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	f340 8093 	ble.w	8007adc <_strtod_l+0x53c>
 80079b6:	f014 030f 	ands.w	r3, r4, #15
 80079ba:	d00a      	beq.n	80079d2 <_strtod_l+0x432>
 80079bc:	495c      	ldr	r1, [pc, #368]	@ (8007b30 <_strtod_l+0x590>)
 80079be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ca:	f7f8 fe1d 	bl	8000608 <__aeabi_dmul>
 80079ce:	4682      	mov	sl, r0
 80079d0:	468b      	mov	fp, r1
 80079d2:	f034 040f 	bics.w	r4, r4, #15
 80079d6:	d073      	beq.n	8007ac0 <_strtod_l+0x520>
 80079d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80079dc:	dd49      	ble.n	8007a72 <_strtod_l+0x4d2>
 80079de:	2400      	movs	r4, #0
 80079e0:	46a0      	mov	r8, r4
 80079e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079e4:	46a1      	mov	r9, r4
 80079e6:	9a05      	ldr	r2, [sp, #20]
 80079e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007b38 <_strtod_l+0x598>
 80079ec:	2322      	movs	r3, #34	@ 0x22
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	f04f 0a00 	mov.w	sl, #0
 80079f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f43f ae0b 	beq.w	8007612 <_strtod_l+0x72>
 80079fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079fe:	9805      	ldr	r0, [sp, #20]
 8007a00:	f7ff f946 	bl	8006c90 <_Bfree>
 8007a04:	9805      	ldr	r0, [sp, #20]
 8007a06:	4649      	mov	r1, r9
 8007a08:	f7ff f942 	bl	8006c90 <_Bfree>
 8007a0c:	9805      	ldr	r0, [sp, #20]
 8007a0e:	4641      	mov	r1, r8
 8007a10:	f7ff f93e 	bl	8006c90 <_Bfree>
 8007a14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a16:	9805      	ldr	r0, [sp, #20]
 8007a18:	f7ff f93a 	bl	8006c90 <_Bfree>
 8007a1c:	9805      	ldr	r0, [sp, #20]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	f7ff f936 	bl	8006c90 <_Bfree>
 8007a24:	e5f5      	b.n	8007612 <_strtod_l+0x72>
 8007a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	dbbc      	blt.n	80079aa <_strtod_l+0x40a>
 8007a30:	4c3f      	ldr	r4, [pc, #252]	@ (8007b30 <_strtod_l+0x590>)
 8007a32:	f1c5 050f 	rsb	r5, r5, #15
 8007a36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a3a:	4652      	mov	r2, sl
 8007a3c:	465b      	mov	r3, fp
 8007a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a42:	f7f8 fde1 	bl	8000608 <__aeabi_dmul>
 8007a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a48:	1b5d      	subs	r5, r3, r5
 8007a4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a52:	e78f      	b.n	8007974 <_strtod_l+0x3d4>
 8007a54:	3316      	adds	r3, #22
 8007a56:	dba8      	blt.n	80079aa <_strtod_l+0x40a>
 8007a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a5a:	eba3 0808 	sub.w	r8, r3, r8
 8007a5e:	4b34      	ldr	r3, [pc, #208]	@ (8007b30 <_strtod_l+0x590>)
 8007a60:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a64:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a68:	4650      	mov	r0, sl
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	f7f8 fef6 	bl	800085c <__aeabi_ddiv>
 8007a70:	e782      	b.n	8007978 <_strtod_l+0x3d8>
 8007a72:	2300      	movs	r3, #0
 8007a74:	4f2f      	ldr	r7, [pc, #188]	@ (8007b34 <_strtod_l+0x594>)
 8007a76:	1124      	asrs	r4, r4, #4
 8007a78:	4650      	mov	r0, sl
 8007a7a:	4659      	mov	r1, fp
 8007a7c:	461e      	mov	r6, r3
 8007a7e:	2c01      	cmp	r4, #1
 8007a80:	dc21      	bgt.n	8007ac6 <_strtod_l+0x526>
 8007a82:	b10b      	cbz	r3, 8007a88 <_strtod_l+0x4e8>
 8007a84:	4682      	mov	sl, r0
 8007a86:	468b      	mov	fp, r1
 8007a88:	492a      	ldr	r1, [pc, #168]	@ (8007b34 <_strtod_l+0x594>)
 8007a8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a92:	4652      	mov	r2, sl
 8007a94:	465b      	mov	r3, fp
 8007a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9a:	f7f8 fdb5 	bl	8000608 <__aeabi_dmul>
 8007a9e:	4b26      	ldr	r3, [pc, #152]	@ (8007b38 <_strtod_l+0x598>)
 8007aa0:	460a      	mov	r2, r1
 8007aa2:	400b      	ands	r3, r1
 8007aa4:	4925      	ldr	r1, [pc, #148]	@ (8007b3c <_strtod_l+0x59c>)
 8007aa6:	428b      	cmp	r3, r1
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	d898      	bhi.n	80079de <_strtod_l+0x43e>
 8007aac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	bf86      	itte	hi
 8007ab4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007b40 <_strtod_l+0x5a0>
 8007ab8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007abc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9308      	str	r3, [sp, #32]
 8007ac4:	e076      	b.n	8007bb4 <_strtod_l+0x614>
 8007ac6:	07e2      	lsls	r2, r4, #31
 8007ac8:	d504      	bpl.n	8007ad4 <_strtod_l+0x534>
 8007aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ace:	f7f8 fd9b 	bl	8000608 <__aeabi_dmul>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	1064      	asrs	r4, r4, #1
 8007ad8:	3708      	adds	r7, #8
 8007ada:	e7d0      	b.n	8007a7e <_strtod_l+0x4de>
 8007adc:	d0f0      	beq.n	8007ac0 <_strtod_l+0x520>
 8007ade:	4264      	negs	r4, r4
 8007ae0:	f014 020f 	ands.w	r2, r4, #15
 8007ae4:	d00a      	beq.n	8007afc <_strtod_l+0x55c>
 8007ae6:	4b12      	ldr	r3, [pc, #72]	@ (8007b30 <_strtod_l+0x590>)
 8007ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aec:	4650      	mov	r0, sl
 8007aee:	4659      	mov	r1, fp
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 feb2 	bl	800085c <__aeabi_ddiv>
 8007af8:	4682      	mov	sl, r0
 8007afa:	468b      	mov	fp, r1
 8007afc:	1124      	asrs	r4, r4, #4
 8007afe:	d0df      	beq.n	8007ac0 <_strtod_l+0x520>
 8007b00:	2c1f      	cmp	r4, #31
 8007b02:	dd1f      	ble.n	8007b44 <_strtod_l+0x5a4>
 8007b04:	2400      	movs	r4, #0
 8007b06:	46a0      	mov	r8, r4
 8007b08:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b0a:	46a1      	mov	r9, r4
 8007b0c:	9a05      	ldr	r2, [sp, #20]
 8007b0e:	2322      	movs	r3, #34	@ 0x22
 8007b10:	f04f 0a00 	mov.w	sl, #0
 8007b14:	f04f 0b00 	mov.w	fp, #0
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e76b      	b.n	80079f4 <_strtod_l+0x454>
 8007b1c:	0800a251 	.word	0x0800a251
 8007b20:	0800a518 	.word	0x0800a518
 8007b24:	0800a249 	.word	0x0800a249
 8007b28:	0800a280 	.word	0x0800a280
 8007b2c:	0800a3b9 	.word	0x0800a3b9
 8007b30:	0800a450 	.word	0x0800a450
 8007b34:	0800a428 	.word	0x0800a428
 8007b38:	7ff00000 	.word	0x7ff00000
 8007b3c:	7ca00000 	.word	0x7ca00000
 8007b40:	7fefffff 	.word	0x7fefffff
 8007b44:	f014 0310 	ands.w	r3, r4, #16
 8007b48:	bf18      	it	ne
 8007b4a:	236a      	movne	r3, #106	@ 0x6a
 8007b4c:	4ea9      	ldr	r6, [pc, #676]	@ (8007df4 <_strtod_l+0x854>)
 8007b4e:	9308      	str	r3, [sp, #32]
 8007b50:	4650      	mov	r0, sl
 8007b52:	4659      	mov	r1, fp
 8007b54:	2300      	movs	r3, #0
 8007b56:	07e7      	lsls	r7, r4, #31
 8007b58:	d504      	bpl.n	8007b64 <_strtod_l+0x5c4>
 8007b5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b5e:	f7f8 fd53 	bl	8000608 <__aeabi_dmul>
 8007b62:	2301      	movs	r3, #1
 8007b64:	1064      	asrs	r4, r4, #1
 8007b66:	f106 0608 	add.w	r6, r6, #8
 8007b6a:	d1f4      	bne.n	8007b56 <_strtod_l+0x5b6>
 8007b6c:	b10b      	cbz	r3, 8007b72 <_strtod_l+0x5d2>
 8007b6e:	4682      	mov	sl, r0
 8007b70:	468b      	mov	fp, r1
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	b1b3      	cbz	r3, 8007ba4 <_strtod_l+0x604>
 8007b76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	4659      	mov	r1, fp
 8007b82:	dd0f      	ble.n	8007ba4 <_strtod_l+0x604>
 8007b84:	2b1f      	cmp	r3, #31
 8007b86:	dd56      	ble.n	8007c36 <_strtod_l+0x696>
 8007b88:	2b34      	cmp	r3, #52	@ 0x34
 8007b8a:	bfde      	ittt	le
 8007b8c:	f04f 33ff 	movle.w	r3, #4294967295
 8007b90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b94:	4093      	lslle	r3, r2
 8007b96:	f04f 0a00 	mov.w	sl, #0
 8007b9a:	bfcc      	ite	gt
 8007b9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ba0:	ea03 0b01 	andle.w	fp, r3, r1
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4650      	mov	r0, sl
 8007baa:	4659      	mov	r1, fp
 8007bac:	f7f8 ff94 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1a7      	bne.n	8007b04 <_strtod_l+0x564>
 8007bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bba:	9805      	ldr	r0, [sp, #20]
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	464a      	mov	r2, r9
 8007bc0:	f7ff f8ce 	bl	8006d60 <__s2b>
 8007bc4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f43f af09 	beq.w	80079de <_strtod_l+0x43e>
 8007bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	eba3 0308 	sub.w	r3, r3, r8
 8007bd6:	bfa8      	it	ge
 8007bd8:	2300      	movge	r3, #0
 8007bda:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bdc:	2400      	movs	r4, #0
 8007bde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007be2:	9316      	str	r3, [sp, #88]	@ 0x58
 8007be4:	46a0      	mov	r8, r4
 8007be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007be8:	9805      	ldr	r0, [sp, #20]
 8007bea:	6859      	ldr	r1, [r3, #4]
 8007bec:	f7ff f810 	bl	8006c10 <_Balloc>
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f aef7 	beq.w	80079e6 <_strtod_l+0x446>
 8007bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	3202      	adds	r2, #2
 8007bfe:	f103 010c 	add.w	r1, r3, #12
 8007c02:	0092      	lsls	r2, r2, #2
 8007c04:	300c      	adds	r0, #12
 8007c06:	f000 ff47 	bl	8008a98 <memcpy>
 8007c0a:	ec4b ab10 	vmov	d0, sl, fp
 8007c0e:	9805      	ldr	r0, [sp, #20]
 8007c10:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c12:	a91b      	add	r1, sp, #108	@ 0x6c
 8007c14:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c18:	f7ff fbd6 	bl	80073c8 <__d2b>
 8007c1c:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f43f aee1 	beq.w	80079e6 <_strtod_l+0x446>
 8007c24:	9805      	ldr	r0, [sp, #20]
 8007c26:	2101      	movs	r1, #1
 8007c28:	f7ff f930 	bl	8006e8c <__i2b>
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	b948      	cbnz	r0, 8007c44 <_strtod_l+0x6a4>
 8007c30:	f04f 0800 	mov.w	r8, #0
 8007c34:	e6d7      	b.n	80079e6 <_strtod_l+0x446>
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	ea03 0a0a 	and.w	sl, r3, sl
 8007c42:	e7af      	b.n	8007ba4 <_strtod_l+0x604>
 8007c44:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c46:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	bfab      	itete	ge
 8007c4c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c4e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c50:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c52:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c54:	bfac      	ite	ge
 8007c56:	18ef      	addge	r7, r5, r3
 8007c58:	1b5e      	sublt	r6, r3, r5
 8007c5a:	9b08      	ldr	r3, [sp, #32]
 8007c5c:	1aed      	subs	r5, r5, r3
 8007c5e:	4415      	add	r5, r2
 8007c60:	4b65      	ldr	r3, [pc, #404]	@ (8007df8 <_strtod_l+0x858>)
 8007c62:	3d01      	subs	r5, #1
 8007c64:	429d      	cmp	r5, r3
 8007c66:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c6a:	da50      	bge.n	8007d0e <_strtod_l+0x76e>
 8007c6c:	1b5b      	subs	r3, r3, r5
 8007c6e:	2b1f      	cmp	r3, #31
 8007c70:	eba2 0203 	sub.w	r2, r2, r3
 8007c74:	f04f 0101 	mov.w	r1, #1
 8007c78:	dc3d      	bgt.n	8007cf6 <_strtod_l+0x756>
 8007c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c80:	2300      	movs	r3, #0
 8007c82:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c84:	18bd      	adds	r5, r7, r2
 8007c86:	9b08      	ldr	r3, [sp, #32]
 8007c88:	42af      	cmp	r7, r5
 8007c8a:	4416      	add	r6, r2
 8007c8c:	441e      	add	r6, r3
 8007c8e:	463b      	mov	r3, r7
 8007c90:	bfa8      	it	ge
 8007c92:	462b      	movge	r3, r5
 8007c94:	42b3      	cmp	r3, r6
 8007c96:	bfa8      	it	ge
 8007c98:	4633      	movge	r3, r6
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfc2      	ittt	gt
 8007c9e:	1aed      	subgt	r5, r5, r3
 8007ca0:	1af6      	subgt	r6, r6, r3
 8007ca2:	1aff      	subgt	r7, r7, r3
 8007ca4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dd16      	ble.n	8007cd8 <_strtod_l+0x738>
 8007caa:	4641      	mov	r1, r8
 8007cac:	9805      	ldr	r0, [sp, #20]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7ff f9a4 	bl	8006ffc <__pow5mult>
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d0ba      	beq.n	8007c30 <_strtod_l+0x690>
 8007cba:	4601      	mov	r1, r0
 8007cbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007cbe:	9805      	ldr	r0, [sp, #20]
 8007cc0:	f7ff f8fa 	bl	8006eb8 <__multiply>
 8007cc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f43f ae8d 	beq.w	80079e6 <_strtod_l+0x446>
 8007ccc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cce:	9805      	ldr	r0, [sp, #20]
 8007cd0:	f7fe ffde 	bl	8006c90 <_Bfree>
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	dc1d      	bgt.n	8007d18 <_strtod_l+0x778>
 8007cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dd23      	ble.n	8007d2a <_strtod_l+0x78a>
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ce6:	9805      	ldr	r0, [sp, #20]
 8007ce8:	f7ff f988 	bl	8006ffc <__pow5mult>
 8007cec:	4681      	mov	r9, r0
 8007cee:	b9e0      	cbnz	r0, 8007d2a <_strtod_l+0x78a>
 8007cf0:	f04f 0900 	mov.w	r9, #0
 8007cf4:	e677      	b.n	80079e6 <_strtod_l+0x446>
 8007cf6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007cfa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007cfe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d02:	35e2      	adds	r5, #226	@ 0xe2
 8007d04:	fa01 f305 	lsl.w	r3, r1, r5
 8007d08:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d0a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d0c:	e7ba      	b.n	8007c84 <_strtod_l+0x6e4>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d12:	2301      	movs	r3, #1
 8007d14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d16:	e7b5      	b.n	8007c84 <_strtod_l+0x6e4>
 8007d18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d1a:	9805      	ldr	r0, [sp, #20]
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	f7ff f9c7 	bl	80070b0 <__lshift>
 8007d22:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1d9      	bne.n	8007cdc <_strtod_l+0x73c>
 8007d28:	e65d      	b.n	80079e6 <_strtod_l+0x446>
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	dd07      	ble.n	8007d3e <_strtod_l+0x79e>
 8007d2e:	4649      	mov	r1, r9
 8007d30:	9805      	ldr	r0, [sp, #20]
 8007d32:	4632      	mov	r2, r6
 8007d34:	f7ff f9bc 	bl	80070b0 <__lshift>
 8007d38:	4681      	mov	r9, r0
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0d8      	beq.n	8007cf0 <_strtod_l+0x750>
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	dd08      	ble.n	8007d54 <_strtod_l+0x7b4>
 8007d42:	4641      	mov	r1, r8
 8007d44:	9805      	ldr	r0, [sp, #20]
 8007d46:	463a      	mov	r2, r7
 8007d48:	f7ff f9b2 	bl	80070b0 <__lshift>
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f43f ae49 	beq.w	80079e6 <_strtod_l+0x446>
 8007d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d56:	9805      	ldr	r0, [sp, #20]
 8007d58:	464a      	mov	r2, r9
 8007d5a:	f7ff fa31 	bl	80071c0 <__mdiff>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	2800      	cmp	r0, #0
 8007d62:	f43f ae40 	beq.w	80079e6 <_strtod_l+0x446>
 8007d66:	68c3      	ldr	r3, [r0, #12]
 8007d68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60c3      	str	r3, [r0, #12]
 8007d6e:	4641      	mov	r1, r8
 8007d70:	f7ff fa0a 	bl	8007188 <__mcmp>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	da45      	bge.n	8007e04 <_strtod_l+0x864>
 8007d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d7e:	d16b      	bne.n	8007e58 <_strtod_l+0x8b8>
 8007d80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d167      	bne.n	8007e58 <_strtod_l+0x8b8>
 8007d88:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d8c:	0d1b      	lsrs	r3, r3, #20
 8007d8e:	051b      	lsls	r3, r3, #20
 8007d90:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d94:	d960      	bls.n	8007e58 <_strtod_l+0x8b8>
 8007d96:	6963      	ldr	r3, [r4, #20]
 8007d98:	b913      	cbnz	r3, 8007da0 <_strtod_l+0x800>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	dd5b      	ble.n	8007e58 <_strtod_l+0x8b8>
 8007da0:	4621      	mov	r1, r4
 8007da2:	2201      	movs	r2, #1
 8007da4:	9805      	ldr	r0, [sp, #20]
 8007da6:	f7ff f983 	bl	80070b0 <__lshift>
 8007daa:	4641      	mov	r1, r8
 8007dac:	4604      	mov	r4, r0
 8007dae:	f7ff f9eb 	bl	8007188 <__mcmp>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	dd50      	ble.n	8007e58 <_strtod_l+0x8b8>
 8007db6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dba:	9a08      	ldr	r2, [sp, #32]
 8007dbc:	0d1b      	lsrs	r3, r3, #20
 8007dbe:	051b      	lsls	r3, r3, #20
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	d06a      	beq.n	8007e9a <_strtod_l+0x8fa>
 8007dc4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007dc8:	d867      	bhi.n	8007e9a <_strtod_l+0x8fa>
 8007dca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007dce:	f67f ae9d 	bls.w	8007b0c <_strtod_l+0x56c>
 8007dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dfc <_strtod_l+0x85c>)
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	4659      	mov	r1, fp
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f7f8 fc15 	bl	8000608 <__aeabi_dmul>
 8007dde:	4b08      	ldr	r3, [pc, #32]	@ (8007e00 <_strtod_l+0x860>)
 8007de0:	400b      	ands	r3, r1
 8007de2:	4682      	mov	sl, r0
 8007de4:	468b      	mov	fp, r1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f47f ae08 	bne.w	80079fc <_strtod_l+0x45c>
 8007dec:	9a05      	ldr	r2, [sp, #20]
 8007dee:	2322      	movs	r3, #34	@ 0x22
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e603      	b.n	80079fc <_strtod_l+0x45c>
 8007df4:	0800a540 	.word	0x0800a540
 8007df8:	fffffc02 	.word	0xfffffc02
 8007dfc:	39500000 	.word	0x39500000
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007e08:	d165      	bne.n	8007ed6 <_strtod_l+0x936>
 8007e0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e10:	b35a      	cbz	r2, 8007e6a <_strtod_l+0x8ca>
 8007e12:	4a9f      	ldr	r2, [pc, #636]	@ (8008090 <_strtod_l+0xaf0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d12b      	bne.n	8007e70 <_strtod_l+0x8d0>
 8007e18:	9b08      	ldr	r3, [sp, #32]
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	b303      	cbz	r3, 8007e60 <_strtod_l+0x8c0>
 8007e1e:	4b9d      	ldr	r3, [pc, #628]	@ (8008094 <_strtod_l+0xaf4>)
 8007e20:	465a      	mov	r2, fp
 8007e22:	4013      	ands	r3, r2
 8007e24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	d81b      	bhi.n	8007e66 <_strtod_l+0x8c6>
 8007e2e:	0d1b      	lsrs	r3, r3, #20
 8007e30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d119      	bne.n	8007e70 <_strtod_l+0x8d0>
 8007e3c:	4b96      	ldr	r3, [pc, #600]	@ (8008098 <_strtod_l+0xaf8>)
 8007e3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d102      	bne.n	8007e4a <_strtod_l+0x8aa>
 8007e44:	3101      	adds	r1, #1
 8007e46:	f43f adce 	beq.w	80079e6 <_strtod_l+0x446>
 8007e4a:	4b92      	ldr	r3, [pc, #584]	@ (8008094 <_strtod_l+0xaf4>)
 8007e4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e4e:	401a      	ands	r2, r3
 8007e50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e54:	f04f 0a00 	mov.w	sl, #0
 8007e58:	9b08      	ldr	r3, [sp, #32]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1b9      	bne.n	8007dd2 <_strtod_l+0x832>
 8007e5e:	e5cd      	b.n	80079fc <_strtod_l+0x45c>
 8007e60:	f04f 33ff 	mov.w	r3, #4294967295
 8007e64:	e7e8      	b.n	8007e38 <_strtod_l+0x898>
 8007e66:	4613      	mov	r3, r2
 8007e68:	e7e6      	b.n	8007e38 <_strtod_l+0x898>
 8007e6a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e6e:	d0a2      	beq.n	8007db6 <_strtod_l+0x816>
 8007e70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e72:	b1db      	cbz	r3, 8007eac <_strtod_l+0x90c>
 8007e74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e76:	4213      	tst	r3, r2
 8007e78:	d0ee      	beq.n	8007e58 <_strtod_l+0x8b8>
 8007e7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e7c:	9a08      	ldr	r2, [sp, #32]
 8007e7e:	4650      	mov	r0, sl
 8007e80:	4659      	mov	r1, fp
 8007e82:	b1bb      	cbz	r3, 8007eb4 <_strtod_l+0x914>
 8007e84:	f7ff fb6e 	bl	8007564 <sulp>
 8007e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e8c:	ec53 2b10 	vmov	r2, r3, d0
 8007e90:	f7f8 fa04 	bl	800029c <__adddf3>
 8007e94:	4682      	mov	sl, r0
 8007e96:	468b      	mov	fp, r1
 8007e98:	e7de      	b.n	8007e58 <_strtod_l+0x8b8>
 8007e9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ea2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007ea6:	f04f 3aff 	mov.w	sl, #4294967295
 8007eaa:	e7d5      	b.n	8007e58 <_strtod_l+0x8b8>
 8007eac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007eae:	ea13 0f0a 	tst.w	r3, sl
 8007eb2:	e7e1      	b.n	8007e78 <_strtod_l+0x8d8>
 8007eb4:	f7ff fb56 	bl	8007564 <sulp>
 8007eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ebc:	ec53 2b10 	vmov	r2, r3, d0
 8007ec0:	f7f8 f9ea 	bl	8000298 <__aeabi_dsub>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4682      	mov	sl, r0
 8007eca:	468b      	mov	fp, r1
 8007ecc:	f7f8 fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d0c1      	beq.n	8007e58 <_strtod_l+0x8b8>
 8007ed4:	e61a      	b.n	8007b0c <_strtod_l+0x56c>
 8007ed6:	4641      	mov	r1, r8
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7ff facd 	bl	8007478 <__ratio>
 8007ede:	ec57 6b10 	vmov	r6, r7, d0
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fe08 	bl	8000b00 <__aeabi_dcmple>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d06f      	beq.n	8007fd4 <_strtod_l+0xa34>
 8007ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d17a      	bne.n	8007ff0 <_strtod_l+0xa50>
 8007efa:	f1ba 0f00 	cmp.w	sl, #0
 8007efe:	d158      	bne.n	8007fb2 <_strtod_l+0xa12>
 8007f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d15a      	bne.n	8007fc0 <_strtod_l+0xa20>
 8007f0a:	4b64      	ldr	r3, [pc, #400]	@ (800809c <_strtod_l+0xafc>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fdeb 	bl	8000aec <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d159      	bne.n	8007fce <_strtod_l+0xa2e>
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4b60      	ldr	r3, [pc, #384]	@ (80080a0 <_strtod_l+0xb00>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7f8 fb71 	bl	8000608 <__aeabi_dmul>
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f2e:	9606      	str	r6, [sp, #24]
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f36:	4d57      	ldr	r5, [pc, #348]	@ (8008094 <_strtod_l+0xaf4>)
 8007f38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f3e:	401d      	ands	r5, r3
 8007f40:	4b58      	ldr	r3, [pc, #352]	@ (80080a4 <_strtod_l+0xb04>)
 8007f42:	429d      	cmp	r5, r3
 8007f44:	f040 80b2 	bne.w	80080ac <_strtod_l+0xb0c>
 8007f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f4e:	ec4b ab10 	vmov	d0, sl, fp
 8007f52:	f7ff f9c9 	bl	80072e8 <__ulp>
 8007f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f5a:	ec51 0b10 	vmov	r0, r1, d0
 8007f5e:	f7f8 fb53 	bl	8000608 <__aeabi_dmul>
 8007f62:	4652      	mov	r2, sl
 8007f64:	465b      	mov	r3, fp
 8007f66:	f7f8 f999 	bl	800029c <__adddf3>
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4949      	ldr	r1, [pc, #292]	@ (8008094 <_strtod_l+0xaf4>)
 8007f6e:	4a4e      	ldr	r2, [pc, #312]	@ (80080a8 <_strtod_l+0xb08>)
 8007f70:	4019      	ands	r1, r3
 8007f72:	4291      	cmp	r1, r2
 8007f74:	4682      	mov	sl, r0
 8007f76:	d942      	bls.n	8007ffe <_strtod_l+0xa5e>
 8007f78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f7a:	4b47      	ldr	r3, [pc, #284]	@ (8008098 <_strtod_l+0xaf8>)
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d103      	bne.n	8007f88 <_strtod_l+0x9e8>
 8007f80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f82:	3301      	adds	r3, #1
 8007f84:	f43f ad2f 	beq.w	80079e6 <_strtod_l+0x446>
 8007f88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008098 <_strtod_l+0xaf8>
 8007f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	f7fe fe7c 	bl	8006c90 <_Bfree>
 8007f98:	9805      	ldr	r0, [sp, #20]
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	f7fe fe78 	bl	8006c90 <_Bfree>
 8007fa0:	9805      	ldr	r0, [sp, #20]
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	f7fe fe74 	bl	8006c90 <_Bfree>
 8007fa8:	9805      	ldr	r0, [sp, #20]
 8007faa:	4621      	mov	r1, r4
 8007fac:	f7fe fe70 	bl	8006c90 <_Bfree>
 8007fb0:	e619      	b.n	8007be6 <_strtod_l+0x646>
 8007fb2:	f1ba 0f01 	cmp.w	sl, #1
 8007fb6:	d103      	bne.n	8007fc0 <_strtod_l+0xa20>
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f43f ada6 	beq.w	8007b0c <_strtod_l+0x56c>
 8007fc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008070 <_strtod_l+0xad0>
 8007fc4:	4f35      	ldr	r7, [pc, #212]	@ (800809c <_strtod_l+0xafc>)
 8007fc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fca:	2600      	movs	r6, #0
 8007fcc:	e7b1      	b.n	8007f32 <_strtod_l+0x992>
 8007fce:	4f34      	ldr	r7, [pc, #208]	@ (80080a0 <_strtod_l+0xb00>)
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	e7aa      	b.n	8007f2a <_strtod_l+0x98a>
 8007fd4:	4b32      	ldr	r3, [pc, #200]	@ (80080a0 <_strtod_l+0xb00>)
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	4639      	mov	r1, r7
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f7f8 fb14 	bl	8000608 <__aeabi_dmul>
 8007fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d09f      	beq.n	8007f2a <_strtod_l+0x98a>
 8007fea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fee:	e7a0      	b.n	8007f32 <_strtod_l+0x992>
 8007ff0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008078 <_strtod_l+0xad8>
 8007ff4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ff8:	ec57 6b17 	vmov	r6, r7, d7
 8007ffc:	e799      	b.n	8007f32 <_strtod_l+0x992>
 8007ffe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008002:	9b08      	ldr	r3, [sp, #32]
 8008004:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1c1      	bne.n	8007f90 <_strtod_l+0x9f0>
 800800c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	051b      	lsls	r3, r3, #20
 8008014:	429d      	cmp	r5, r3
 8008016:	d1bb      	bne.n	8007f90 <_strtod_l+0x9f0>
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fe54 	bl	8000cc8 <__aeabi_d2lz>
 8008020:	f7f8 fac4 	bl	80005ac <__aeabi_l2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 f934 	bl	8000298 <__aeabi_dsub>
 8008030:	460b      	mov	r3, r1
 8008032:	4602      	mov	r2, r0
 8008034:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008038:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800803c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800803e:	ea46 060a 	orr.w	r6, r6, sl
 8008042:	431e      	orrs	r6, r3
 8008044:	d06f      	beq.n	8008126 <_strtod_l+0xb86>
 8008046:	a30e      	add	r3, pc, #56	@ (adr r3, 8008080 <_strtod_l+0xae0>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f7f8 fd4e 	bl	8000aec <__aeabi_dcmplt>
 8008050:	2800      	cmp	r0, #0
 8008052:	f47f acd3 	bne.w	80079fc <_strtod_l+0x45c>
 8008056:	a30c      	add	r3, pc, #48	@ (adr r3, 8008088 <_strtod_l+0xae8>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008060:	f7f8 fd62 	bl	8000b28 <__aeabi_dcmpgt>
 8008064:	2800      	cmp	r0, #0
 8008066:	d093      	beq.n	8007f90 <_strtod_l+0x9f0>
 8008068:	e4c8      	b.n	80079fc <_strtod_l+0x45c>
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	00000000 	.word	0x00000000
 8008074:	bff00000 	.word	0xbff00000
 8008078:	00000000 	.word	0x00000000
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	94a03595 	.word	0x94a03595
 8008084:	3fdfffff 	.word	0x3fdfffff
 8008088:	35afe535 	.word	0x35afe535
 800808c:	3fe00000 	.word	0x3fe00000
 8008090:	000fffff 	.word	0x000fffff
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	7fefffff 	.word	0x7fefffff
 800809c:	3ff00000 	.word	0x3ff00000
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	7fe00000 	.word	0x7fe00000
 80080a8:	7c9fffff 	.word	0x7c9fffff
 80080ac:	9b08      	ldr	r3, [sp, #32]
 80080ae:	b323      	cbz	r3, 80080fa <_strtod_l+0xb5a>
 80080b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80080b4:	d821      	bhi.n	80080fa <_strtod_l+0xb5a>
 80080b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008158 <_strtod_l+0xbb8>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 fd1e 	bl	8000b00 <__aeabi_dcmple>
 80080c4:	b1a0      	cbz	r0, 80080f0 <_strtod_l+0xb50>
 80080c6:	4639      	mov	r1, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7f8 fd75 	bl	8000bb8 <__aeabi_d2uiz>
 80080ce:	2801      	cmp	r0, #1
 80080d0:	bf38      	it	cc
 80080d2:	2001      	movcc	r0, #1
 80080d4:	f7f8 fa1e 	bl	8000514 <__aeabi_ui2d>
 80080d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	b9fb      	cbnz	r3, 8008120 <_strtod_l+0xb80>
 80080e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80080e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80080e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80080ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80080f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80080f6:	1b5b      	subs	r3, r3, r5
 80080f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80080fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008102:	f7ff f8f1 	bl	80072e8 <__ulp>
 8008106:	4650      	mov	r0, sl
 8008108:	ec53 2b10 	vmov	r2, r3, d0
 800810c:	4659      	mov	r1, fp
 800810e:	f7f8 fa7b 	bl	8000608 <__aeabi_dmul>
 8008112:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008116:	f7f8 f8c1 	bl	800029c <__adddf3>
 800811a:	4682      	mov	sl, r0
 800811c:	468b      	mov	fp, r1
 800811e:	e770      	b.n	8008002 <_strtod_l+0xa62>
 8008120:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008124:	e7e0      	b.n	80080e8 <_strtod_l+0xb48>
 8008126:	a30e      	add	r3, pc, #56	@ (adr r3, 8008160 <_strtod_l+0xbc0>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 fcde 	bl	8000aec <__aeabi_dcmplt>
 8008130:	e798      	b.n	8008064 <_strtod_l+0xac4>
 8008132:	2300      	movs	r3, #0
 8008134:	930e      	str	r3, [sp, #56]	@ 0x38
 8008136:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	f7ff ba6d 	b.w	800761a <_strtod_l+0x7a>
 8008140:	2a65      	cmp	r2, #101	@ 0x65
 8008142:	f43f ab68 	beq.w	8007816 <_strtod_l+0x276>
 8008146:	2a45      	cmp	r2, #69	@ 0x45
 8008148:	f43f ab65 	beq.w	8007816 <_strtod_l+0x276>
 800814c:	2301      	movs	r3, #1
 800814e:	f7ff bba0 	b.w	8007892 <_strtod_l+0x2f2>
 8008152:	bf00      	nop
 8008154:	f3af 8000 	nop.w
 8008158:	ffc00000 	.word	0xffc00000
 800815c:	41dfffff 	.word	0x41dfffff
 8008160:	94a03595 	.word	0x94a03595
 8008164:	3fcfffff 	.word	0x3fcfffff

08008168 <_strtod_r>:
 8008168:	4b01      	ldr	r3, [pc, #4]	@ (8008170 <_strtod_r+0x8>)
 800816a:	f7ff ba19 	b.w	80075a0 <_strtod_l>
 800816e:	bf00      	nop
 8008170:	20000068 	.word	0x20000068

08008174 <_strtol_l.isra.0>:
 8008174:	2b24      	cmp	r3, #36	@ 0x24
 8008176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800817a:	4686      	mov	lr, r0
 800817c:	4690      	mov	r8, r2
 800817e:	d801      	bhi.n	8008184 <_strtol_l.isra.0+0x10>
 8008180:	2b01      	cmp	r3, #1
 8008182:	d106      	bne.n	8008192 <_strtol_l.isra.0+0x1e>
 8008184:	f7fd fdb8 	bl	8005cf8 <__errno>
 8008188:	2316      	movs	r3, #22
 800818a:	6003      	str	r3, [r0, #0]
 800818c:	2000      	movs	r0, #0
 800818e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008192:	4834      	ldr	r0, [pc, #208]	@ (8008264 <_strtol_l.isra.0+0xf0>)
 8008194:	460d      	mov	r5, r1
 8008196:	462a      	mov	r2, r5
 8008198:	f815 4b01 	ldrb.w	r4, [r5], #1
 800819c:	5d06      	ldrb	r6, [r0, r4]
 800819e:	f016 0608 	ands.w	r6, r6, #8
 80081a2:	d1f8      	bne.n	8008196 <_strtol_l.isra.0+0x22>
 80081a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80081a6:	d110      	bne.n	80081ca <_strtol_l.isra.0+0x56>
 80081a8:	782c      	ldrb	r4, [r5, #0]
 80081aa:	2601      	movs	r6, #1
 80081ac:	1c95      	adds	r5, r2, #2
 80081ae:	f033 0210 	bics.w	r2, r3, #16
 80081b2:	d115      	bne.n	80081e0 <_strtol_l.isra.0+0x6c>
 80081b4:	2c30      	cmp	r4, #48	@ 0x30
 80081b6:	d10d      	bne.n	80081d4 <_strtol_l.isra.0+0x60>
 80081b8:	782a      	ldrb	r2, [r5, #0]
 80081ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081be:	2a58      	cmp	r2, #88	@ 0x58
 80081c0:	d108      	bne.n	80081d4 <_strtol_l.isra.0+0x60>
 80081c2:	786c      	ldrb	r4, [r5, #1]
 80081c4:	3502      	adds	r5, #2
 80081c6:	2310      	movs	r3, #16
 80081c8:	e00a      	b.n	80081e0 <_strtol_l.isra.0+0x6c>
 80081ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80081cc:	bf04      	itt	eq
 80081ce:	782c      	ldrbeq	r4, [r5, #0]
 80081d0:	1c95      	addeq	r5, r2, #2
 80081d2:	e7ec      	b.n	80081ae <_strtol_l.isra.0+0x3a>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1f6      	bne.n	80081c6 <_strtol_l.isra.0+0x52>
 80081d8:	2c30      	cmp	r4, #48	@ 0x30
 80081da:	bf14      	ite	ne
 80081dc:	230a      	movne	r3, #10
 80081de:	2308      	moveq	r3, #8
 80081e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081e8:	2200      	movs	r2, #0
 80081ea:	fbbc f9f3 	udiv	r9, ip, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80081f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081f8:	2f09      	cmp	r7, #9
 80081fa:	d80f      	bhi.n	800821c <_strtol_l.isra.0+0xa8>
 80081fc:	463c      	mov	r4, r7
 80081fe:	42a3      	cmp	r3, r4
 8008200:	dd1b      	ble.n	800823a <_strtol_l.isra.0+0xc6>
 8008202:	1c57      	adds	r7, r2, #1
 8008204:	d007      	beq.n	8008216 <_strtol_l.isra.0+0xa2>
 8008206:	4581      	cmp	r9, r0
 8008208:	d314      	bcc.n	8008234 <_strtol_l.isra.0+0xc0>
 800820a:	d101      	bne.n	8008210 <_strtol_l.isra.0+0x9c>
 800820c:	45a2      	cmp	sl, r4
 800820e:	db11      	blt.n	8008234 <_strtol_l.isra.0+0xc0>
 8008210:	fb00 4003 	mla	r0, r0, r3, r4
 8008214:	2201      	movs	r2, #1
 8008216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800821a:	e7eb      	b.n	80081f4 <_strtol_l.isra.0+0x80>
 800821c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008220:	2f19      	cmp	r7, #25
 8008222:	d801      	bhi.n	8008228 <_strtol_l.isra.0+0xb4>
 8008224:	3c37      	subs	r4, #55	@ 0x37
 8008226:	e7ea      	b.n	80081fe <_strtol_l.isra.0+0x8a>
 8008228:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800822c:	2f19      	cmp	r7, #25
 800822e:	d804      	bhi.n	800823a <_strtol_l.isra.0+0xc6>
 8008230:	3c57      	subs	r4, #87	@ 0x57
 8008232:	e7e4      	b.n	80081fe <_strtol_l.isra.0+0x8a>
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	e7ed      	b.n	8008216 <_strtol_l.isra.0+0xa2>
 800823a:	1c53      	adds	r3, r2, #1
 800823c:	d108      	bne.n	8008250 <_strtol_l.isra.0+0xdc>
 800823e:	2322      	movs	r3, #34	@ 0x22
 8008240:	f8ce 3000 	str.w	r3, [lr]
 8008244:	4660      	mov	r0, ip
 8008246:	f1b8 0f00 	cmp.w	r8, #0
 800824a:	d0a0      	beq.n	800818e <_strtol_l.isra.0+0x1a>
 800824c:	1e69      	subs	r1, r5, #1
 800824e:	e006      	b.n	800825e <_strtol_l.isra.0+0xea>
 8008250:	b106      	cbz	r6, 8008254 <_strtol_l.isra.0+0xe0>
 8008252:	4240      	negs	r0, r0
 8008254:	f1b8 0f00 	cmp.w	r8, #0
 8008258:	d099      	beq.n	800818e <_strtol_l.isra.0+0x1a>
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1f6      	bne.n	800824c <_strtol_l.isra.0+0xd8>
 800825e:	f8c8 1000 	str.w	r1, [r8]
 8008262:	e794      	b.n	800818e <_strtol_l.isra.0+0x1a>
 8008264:	0800a569 	.word	0x0800a569

08008268 <_strtol_r>:
 8008268:	f7ff bf84 	b.w	8008174 <_strtol_l.isra.0>

0800826c <__ssputs_r>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	688e      	ldr	r6, [r1, #8]
 8008272:	461f      	mov	r7, r3
 8008274:	42be      	cmp	r6, r7
 8008276:	680b      	ldr	r3, [r1, #0]
 8008278:	4682      	mov	sl, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4690      	mov	r8, r2
 800827e:	d82d      	bhi.n	80082dc <__ssputs_r+0x70>
 8008280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008288:	d026      	beq.n	80082d8 <__ssputs_r+0x6c>
 800828a:	6965      	ldr	r5, [r4, #20]
 800828c:	6909      	ldr	r1, [r1, #16]
 800828e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008292:	eba3 0901 	sub.w	r9, r3, r1
 8008296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800829a:	1c7b      	adds	r3, r7, #1
 800829c:	444b      	add	r3, r9
 800829e:	106d      	asrs	r5, r5, #1
 80082a0:	429d      	cmp	r5, r3
 80082a2:	bf38      	it	cc
 80082a4:	461d      	movcc	r5, r3
 80082a6:	0553      	lsls	r3, r2, #21
 80082a8:	d527      	bpl.n	80082fa <__ssputs_r+0x8e>
 80082aa:	4629      	mov	r1, r5
 80082ac:	f7fe fc24 	bl	8006af8 <_malloc_r>
 80082b0:	4606      	mov	r6, r0
 80082b2:	b360      	cbz	r0, 800830e <__ssputs_r+0xa2>
 80082b4:	6921      	ldr	r1, [r4, #16]
 80082b6:	464a      	mov	r2, r9
 80082b8:	f000 fbee 	bl	8008a98 <memcpy>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	6126      	str	r6, [r4, #16]
 80082ca:	6165      	str	r5, [r4, #20]
 80082cc:	444e      	add	r6, r9
 80082ce:	eba5 0509 	sub.w	r5, r5, r9
 80082d2:	6026      	str	r6, [r4, #0]
 80082d4:	60a5      	str	r5, [r4, #8]
 80082d6:	463e      	mov	r6, r7
 80082d8:	42be      	cmp	r6, r7
 80082da:	d900      	bls.n	80082de <__ssputs_r+0x72>
 80082dc:	463e      	mov	r6, r7
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	4632      	mov	r2, r6
 80082e2:	4641      	mov	r1, r8
 80082e4:	f000 fb9c 	bl	8008a20 <memmove>
 80082e8:	68a3      	ldr	r3, [r4, #8]
 80082ea:	1b9b      	subs	r3, r3, r6
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	4433      	add	r3, r6
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	2000      	movs	r0, #0
 80082f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fa:	462a      	mov	r2, r5
 80082fc:	f000 ff61 	bl	80091c2 <_realloc_r>
 8008300:	4606      	mov	r6, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d1e0      	bne.n	80082c8 <__ssputs_r+0x5c>
 8008306:	6921      	ldr	r1, [r4, #16]
 8008308:	4650      	mov	r0, sl
 800830a:	f7fe fb81 	bl	8006a10 <_free_r>
 800830e:	230c      	movs	r3, #12
 8008310:	f8ca 3000 	str.w	r3, [sl]
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	e7e9      	b.n	80082f6 <__ssputs_r+0x8a>
	...

08008324 <_svfiprintf_r>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	4698      	mov	r8, r3
 800832a:	898b      	ldrh	r3, [r1, #12]
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	b09d      	sub	sp, #116	@ 0x74
 8008330:	4607      	mov	r7, r0
 8008332:	460d      	mov	r5, r1
 8008334:	4614      	mov	r4, r2
 8008336:	d510      	bpl.n	800835a <_svfiprintf_r+0x36>
 8008338:	690b      	ldr	r3, [r1, #16]
 800833a:	b973      	cbnz	r3, 800835a <_svfiprintf_r+0x36>
 800833c:	2140      	movs	r1, #64	@ 0x40
 800833e:	f7fe fbdb 	bl	8006af8 <_malloc_r>
 8008342:	6028      	str	r0, [r5, #0]
 8008344:	6128      	str	r0, [r5, #16]
 8008346:	b930      	cbnz	r0, 8008356 <_svfiprintf_r+0x32>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	b01d      	add	sp, #116	@ 0x74
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	2340      	movs	r3, #64	@ 0x40
 8008358:	616b      	str	r3, [r5, #20]
 800835a:	2300      	movs	r3, #0
 800835c:	9309      	str	r3, [sp, #36]	@ 0x24
 800835e:	2320      	movs	r3, #32
 8008360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008364:	f8cd 800c 	str.w	r8, [sp, #12]
 8008368:	2330      	movs	r3, #48	@ 0x30
 800836a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008508 <_svfiprintf_r+0x1e4>
 800836e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008372:	f04f 0901 	mov.w	r9, #1
 8008376:	4623      	mov	r3, r4
 8008378:	469a      	mov	sl, r3
 800837a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837e:	b10a      	cbz	r2, 8008384 <_svfiprintf_r+0x60>
 8008380:	2a25      	cmp	r2, #37	@ 0x25
 8008382:	d1f9      	bne.n	8008378 <_svfiprintf_r+0x54>
 8008384:	ebba 0b04 	subs.w	fp, sl, r4
 8008388:	d00b      	beq.n	80083a2 <_svfiprintf_r+0x7e>
 800838a:	465b      	mov	r3, fp
 800838c:	4622      	mov	r2, r4
 800838e:	4629      	mov	r1, r5
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff ff6b 	bl	800826c <__ssputs_r>
 8008396:	3001      	adds	r0, #1
 8008398:	f000 80a7 	beq.w	80084ea <_svfiprintf_r+0x1c6>
 800839c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800839e:	445a      	add	r2, fp
 80083a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083a2:	f89a 3000 	ldrb.w	r3, [sl]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 809f 	beq.w	80084ea <_svfiprintf_r+0x1c6>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b6:	f10a 0a01 	add.w	sl, sl, #1
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	9307      	str	r3, [sp, #28]
 80083be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083c4:	4654      	mov	r4, sl
 80083c6:	2205      	movs	r2, #5
 80083c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083cc:	484e      	ldr	r0, [pc, #312]	@ (8008508 <_svfiprintf_r+0x1e4>)
 80083ce:	f7f7 ff07 	bl	80001e0 <memchr>
 80083d2:	9a04      	ldr	r2, [sp, #16]
 80083d4:	b9d8      	cbnz	r0, 800840e <_svfiprintf_r+0xea>
 80083d6:	06d0      	lsls	r0, r2, #27
 80083d8:	bf44      	itt	mi
 80083da:	2320      	movmi	r3, #32
 80083dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e0:	0711      	lsls	r1, r2, #28
 80083e2:	bf44      	itt	mi
 80083e4:	232b      	movmi	r3, #43	@ 0x2b
 80083e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ea:	f89a 3000 	ldrb.w	r3, [sl]
 80083ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80083f0:	d015      	beq.n	800841e <_svfiprintf_r+0xfa>
 80083f2:	9a07      	ldr	r2, [sp, #28]
 80083f4:	4654      	mov	r4, sl
 80083f6:	2000      	movs	r0, #0
 80083f8:	f04f 0c0a 	mov.w	ip, #10
 80083fc:	4621      	mov	r1, r4
 80083fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008402:	3b30      	subs	r3, #48	@ 0x30
 8008404:	2b09      	cmp	r3, #9
 8008406:	d94b      	bls.n	80084a0 <_svfiprintf_r+0x17c>
 8008408:	b1b0      	cbz	r0, 8008438 <_svfiprintf_r+0x114>
 800840a:	9207      	str	r2, [sp, #28]
 800840c:	e014      	b.n	8008438 <_svfiprintf_r+0x114>
 800840e:	eba0 0308 	sub.w	r3, r0, r8
 8008412:	fa09 f303 	lsl.w	r3, r9, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	9304      	str	r3, [sp, #16]
 800841a:	46a2      	mov	sl, r4
 800841c:	e7d2      	b.n	80083c4 <_svfiprintf_r+0xa0>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	1d19      	adds	r1, r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	9103      	str	r1, [sp, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfbb      	ittet	lt
 800842a:	425b      	neglt	r3, r3
 800842c:	f042 0202 	orrlt.w	r2, r2, #2
 8008430:	9307      	strge	r3, [sp, #28]
 8008432:	9307      	strlt	r3, [sp, #28]
 8008434:	bfb8      	it	lt
 8008436:	9204      	strlt	r2, [sp, #16]
 8008438:	7823      	ldrb	r3, [r4, #0]
 800843a:	2b2e      	cmp	r3, #46	@ 0x2e
 800843c:	d10a      	bne.n	8008454 <_svfiprintf_r+0x130>
 800843e:	7863      	ldrb	r3, [r4, #1]
 8008440:	2b2a      	cmp	r3, #42	@ 0x2a
 8008442:	d132      	bne.n	80084aa <_svfiprintf_r+0x186>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	9203      	str	r2, [sp, #12]
 800844c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008450:	3402      	adds	r4, #2
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008518 <_svfiprintf_r+0x1f4>
 8008458:	7821      	ldrb	r1, [r4, #0]
 800845a:	2203      	movs	r2, #3
 800845c:	4650      	mov	r0, sl
 800845e:	f7f7 febf 	bl	80001e0 <memchr>
 8008462:	b138      	cbz	r0, 8008474 <_svfiprintf_r+0x150>
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	eba0 000a 	sub.w	r0, r0, sl
 800846a:	2240      	movs	r2, #64	@ 0x40
 800846c:	4082      	lsls	r2, r0
 800846e:	4313      	orrs	r3, r2
 8008470:	3401      	adds	r4, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	4824      	ldr	r0, [pc, #144]	@ (800850c <_svfiprintf_r+0x1e8>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800847e:	2206      	movs	r2, #6
 8008480:	f7f7 feae 	bl	80001e0 <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d036      	beq.n	80084f6 <_svfiprintf_r+0x1d2>
 8008488:	4b21      	ldr	r3, [pc, #132]	@ (8008510 <_svfiprintf_r+0x1ec>)
 800848a:	bb1b      	cbnz	r3, 80084d4 <_svfiprintf_r+0x1b0>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	3307      	adds	r3, #7
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849a:	4433      	add	r3, r6
 800849c:	9309      	str	r3, [sp, #36]	@ 0x24
 800849e:	e76a      	b.n	8008376 <_svfiprintf_r+0x52>
 80084a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a4:	460c      	mov	r4, r1
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7a8      	b.n	80083fc <_svfiprintf_r+0xd8>
 80084aa:	2300      	movs	r3, #0
 80084ac:	3401      	adds	r4, #1
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4620      	mov	r0, r4
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	3a30      	subs	r2, #48	@ 0x30
 80084be:	2a09      	cmp	r2, #9
 80084c0:	d903      	bls.n	80084ca <_svfiprintf_r+0x1a6>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c6      	beq.n	8008454 <_svfiprintf_r+0x130>
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	e7c4      	b.n	8008454 <_svfiprintf_r+0x130>
 80084ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ce:	4604      	mov	r4, r0
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7f0      	b.n	80084b6 <_svfiprintf_r+0x192>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4b0e      	ldr	r3, [pc, #56]	@ (8008514 <_svfiprintf_r+0x1f0>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4638      	mov	r0, r7
 80084e0:	f7fc fc84 	bl	8004dec <_printf_float>
 80084e4:	1c42      	adds	r2, r0, #1
 80084e6:	4606      	mov	r6, r0
 80084e8:	d1d6      	bne.n	8008498 <_svfiprintf_r+0x174>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	065b      	lsls	r3, r3, #25
 80084ee:	f53f af2d 	bmi.w	800834c <_svfiprintf_r+0x28>
 80084f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f4:	e72c      	b.n	8008350 <_svfiprintf_r+0x2c>
 80084f6:	ab03      	add	r3, sp, #12
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	462a      	mov	r2, r5
 80084fc:	4b05      	ldr	r3, [pc, #20]	@ (8008514 <_svfiprintf_r+0x1f0>)
 80084fe:	a904      	add	r1, sp, #16
 8008500:	4638      	mov	r0, r7
 8008502:	f7fc ff0b 	bl	800531c <_printf_i>
 8008506:	e7ed      	b.n	80084e4 <_svfiprintf_r+0x1c0>
 8008508:	0800a365 	.word	0x0800a365
 800850c:	0800a36f 	.word	0x0800a36f
 8008510:	08004ded 	.word	0x08004ded
 8008514:	0800826d 	.word	0x0800826d
 8008518:	0800a36b 	.word	0x0800a36b

0800851c <__sfputc_r>:
 800851c:	6893      	ldr	r3, [r2, #8]
 800851e:	3b01      	subs	r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	b410      	push	{r4}
 8008524:	6093      	str	r3, [r2, #8]
 8008526:	da08      	bge.n	800853a <__sfputc_r+0x1e>
 8008528:	6994      	ldr	r4, [r2, #24]
 800852a:	42a3      	cmp	r3, r4
 800852c:	db01      	blt.n	8008532 <__sfputc_r+0x16>
 800852e:	290a      	cmp	r1, #10
 8008530:	d103      	bne.n	800853a <__sfputc_r+0x1e>
 8008532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008536:	f000 b9df 	b.w	80088f8 <__swbuf_r>
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	1c58      	adds	r0, r3, #1
 800853e:	6010      	str	r0, [r2, #0]
 8008540:	7019      	strb	r1, [r3, #0]
 8008542:	4608      	mov	r0, r1
 8008544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008548:	4770      	bx	lr

0800854a <__sfputs_r>:
 800854a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	4614      	mov	r4, r2
 8008552:	18d5      	adds	r5, r2, r3
 8008554:	42ac      	cmp	r4, r5
 8008556:	d101      	bne.n	800855c <__sfputs_r+0x12>
 8008558:	2000      	movs	r0, #0
 800855a:	e007      	b.n	800856c <__sfputs_r+0x22>
 800855c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008560:	463a      	mov	r2, r7
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff ffda 	bl	800851c <__sfputc_r>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d1f3      	bne.n	8008554 <__sfputs_r+0xa>
 800856c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008570 <_vfiprintf_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	460d      	mov	r5, r1
 8008576:	b09d      	sub	sp, #116	@ 0x74
 8008578:	4614      	mov	r4, r2
 800857a:	4698      	mov	r8, r3
 800857c:	4606      	mov	r6, r0
 800857e:	b118      	cbz	r0, 8008588 <_vfiprintf_r+0x18>
 8008580:	6a03      	ldr	r3, [r0, #32]
 8008582:	b90b      	cbnz	r3, 8008588 <_vfiprintf_r+0x18>
 8008584:	f7fd fa82 	bl	8005a8c <__sinit>
 8008588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800858a:	07d9      	lsls	r1, r3, #31
 800858c:	d405      	bmi.n	800859a <_vfiprintf_r+0x2a>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	059a      	lsls	r2, r3, #22
 8008592:	d402      	bmi.n	800859a <_vfiprintf_r+0x2a>
 8008594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008596:	f7fd fbda 	bl	8005d4e <__retarget_lock_acquire_recursive>
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	071b      	lsls	r3, r3, #28
 800859e:	d501      	bpl.n	80085a4 <_vfiprintf_r+0x34>
 80085a0:	692b      	ldr	r3, [r5, #16]
 80085a2:	b99b      	cbnz	r3, 80085cc <_vfiprintf_r+0x5c>
 80085a4:	4629      	mov	r1, r5
 80085a6:	4630      	mov	r0, r6
 80085a8:	f000 f9e4 	bl	8008974 <__swsetup_r>
 80085ac:	b170      	cbz	r0, 80085cc <_vfiprintf_r+0x5c>
 80085ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085b0:	07dc      	lsls	r4, r3, #31
 80085b2:	d504      	bpl.n	80085be <_vfiprintf_r+0x4e>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	b01d      	add	sp, #116	@ 0x74
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	0598      	lsls	r0, r3, #22
 80085c2:	d4f7      	bmi.n	80085b4 <_vfiprintf_r+0x44>
 80085c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085c6:	f7fd fbc3 	bl	8005d50 <__retarget_lock_release_recursive>
 80085ca:	e7f3      	b.n	80085b4 <_vfiprintf_r+0x44>
 80085cc:	2300      	movs	r3, #0
 80085ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d0:	2320      	movs	r3, #32
 80085d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085da:	2330      	movs	r3, #48	@ 0x30
 80085dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800878c <_vfiprintf_r+0x21c>
 80085e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085e4:	f04f 0901 	mov.w	r9, #1
 80085e8:	4623      	mov	r3, r4
 80085ea:	469a      	mov	sl, r3
 80085ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f0:	b10a      	cbz	r2, 80085f6 <_vfiprintf_r+0x86>
 80085f2:	2a25      	cmp	r2, #37	@ 0x25
 80085f4:	d1f9      	bne.n	80085ea <_vfiprintf_r+0x7a>
 80085f6:	ebba 0b04 	subs.w	fp, sl, r4
 80085fa:	d00b      	beq.n	8008614 <_vfiprintf_r+0xa4>
 80085fc:	465b      	mov	r3, fp
 80085fe:	4622      	mov	r2, r4
 8008600:	4629      	mov	r1, r5
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ffa1 	bl	800854a <__sfputs_r>
 8008608:	3001      	adds	r0, #1
 800860a:	f000 80a7 	beq.w	800875c <_vfiprintf_r+0x1ec>
 800860e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008610:	445a      	add	r2, fp
 8008612:	9209      	str	r2, [sp, #36]	@ 0x24
 8008614:	f89a 3000 	ldrb.w	r3, [sl]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 809f 	beq.w	800875c <_vfiprintf_r+0x1ec>
 800861e:	2300      	movs	r3, #0
 8008620:	f04f 32ff 	mov.w	r2, #4294967295
 8008624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008628:	f10a 0a01 	add.w	sl, sl, #1
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008634:	931a      	str	r3, [sp, #104]	@ 0x68
 8008636:	4654      	mov	r4, sl
 8008638:	2205      	movs	r2, #5
 800863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863e:	4853      	ldr	r0, [pc, #332]	@ (800878c <_vfiprintf_r+0x21c>)
 8008640:	f7f7 fdce 	bl	80001e0 <memchr>
 8008644:	9a04      	ldr	r2, [sp, #16]
 8008646:	b9d8      	cbnz	r0, 8008680 <_vfiprintf_r+0x110>
 8008648:	06d1      	lsls	r1, r2, #27
 800864a:	bf44      	itt	mi
 800864c:	2320      	movmi	r3, #32
 800864e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008652:	0713      	lsls	r3, r2, #28
 8008654:	bf44      	itt	mi
 8008656:	232b      	movmi	r3, #43	@ 0x2b
 8008658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b2a      	cmp	r3, #42	@ 0x2a
 8008662:	d015      	beq.n	8008690 <_vfiprintf_r+0x120>
 8008664:	9a07      	ldr	r2, [sp, #28]
 8008666:	4654      	mov	r4, sl
 8008668:	2000      	movs	r0, #0
 800866a:	f04f 0c0a 	mov.w	ip, #10
 800866e:	4621      	mov	r1, r4
 8008670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008674:	3b30      	subs	r3, #48	@ 0x30
 8008676:	2b09      	cmp	r3, #9
 8008678:	d94b      	bls.n	8008712 <_vfiprintf_r+0x1a2>
 800867a:	b1b0      	cbz	r0, 80086aa <_vfiprintf_r+0x13a>
 800867c:	9207      	str	r2, [sp, #28]
 800867e:	e014      	b.n	80086aa <_vfiprintf_r+0x13a>
 8008680:	eba0 0308 	sub.w	r3, r0, r8
 8008684:	fa09 f303 	lsl.w	r3, r9, r3
 8008688:	4313      	orrs	r3, r2
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	46a2      	mov	sl, r4
 800868e:	e7d2      	b.n	8008636 <_vfiprintf_r+0xc6>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	1d19      	adds	r1, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	9103      	str	r1, [sp, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	bfbb      	ittet	lt
 800869c:	425b      	neglt	r3, r3
 800869e:	f042 0202 	orrlt.w	r2, r2, #2
 80086a2:	9307      	strge	r3, [sp, #28]
 80086a4:	9307      	strlt	r3, [sp, #28]
 80086a6:	bfb8      	it	lt
 80086a8:	9204      	strlt	r2, [sp, #16]
 80086aa:	7823      	ldrb	r3, [r4, #0]
 80086ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ae:	d10a      	bne.n	80086c6 <_vfiprintf_r+0x156>
 80086b0:	7863      	ldrb	r3, [r4, #1]
 80086b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b4:	d132      	bne.n	800871c <_vfiprintf_r+0x1ac>
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	1d1a      	adds	r2, r3, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	9203      	str	r2, [sp, #12]
 80086be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086c2:	3402      	adds	r4, #2
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800879c <_vfiprintf_r+0x22c>
 80086ca:	7821      	ldrb	r1, [r4, #0]
 80086cc:	2203      	movs	r2, #3
 80086ce:	4650      	mov	r0, sl
 80086d0:	f7f7 fd86 	bl	80001e0 <memchr>
 80086d4:	b138      	cbz	r0, 80086e6 <_vfiprintf_r+0x176>
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	eba0 000a 	sub.w	r0, r0, sl
 80086dc:	2240      	movs	r2, #64	@ 0x40
 80086de:	4082      	lsls	r2, r0
 80086e0:	4313      	orrs	r3, r2
 80086e2:	3401      	adds	r4, #1
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ea:	4829      	ldr	r0, [pc, #164]	@ (8008790 <_vfiprintf_r+0x220>)
 80086ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086f0:	2206      	movs	r2, #6
 80086f2:	f7f7 fd75 	bl	80001e0 <memchr>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d03f      	beq.n	800877a <_vfiprintf_r+0x20a>
 80086fa:	4b26      	ldr	r3, [pc, #152]	@ (8008794 <_vfiprintf_r+0x224>)
 80086fc:	bb1b      	cbnz	r3, 8008746 <_vfiprintf_r+0x1d6>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	3307      	adds	r3, #7
 8008702:	f023 0307 	bic.w	r3, r3, #7
 8008706:	3308      	adds	r3, #8
 8008708:	9303      	str	r3, [sp, #12]
 800870a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870c:	443b      	add	r3, r7
 800870e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008710:	e76a      	b.n	80085e8 <_vfiprintf_r+0x78>
 8008712:	fb0c 3202 	mla	r2, ip, r2, r3
 8008716:	460c      	mov	r4, r1
 8008718:	2001      	movs	r0, #1
 800871a:	e7a8      	b.n	800866e <_vfiprintf_r+0xfe>
 800871c:	2300      	movs	r3, #0
 800871e:	3401      	adds	r4, #1
 8008720:	9305      	str	r3, [sp, #20]
 8008722:	4619      	mov	r1, r3
 8008724:	f04f 0c0a 	mov.w	ip, #10
 8008728:	4620      	mov	r0, r4
 800872a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872e:	3a30      	subs	r2, #48	@ 0x30
 8008730:	2a09      	cmp	r2, #9
 8008732:	d903      	bls.n	800873c <_vfiprintf_r+0x1cc>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0c6      	beq.n	80086c6 <_vfiprintf_r+0x156>
 8008738:	9105      	str	r1, [sp, #20]
 800873a:	e7c4      	b.n	80086c6 <_vfiprintf_r+0x156>
 800873c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008740:	4604      	mov	r4, r0
 8008742:	2301      	movs	r3, #1
 8008744:	e7f0      	b.n	8008728 <_vfiprintf_r+0x1b8>
 8008746:	ab03      	add	r3, sp, #12
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	462a      	mov	r2, r5
 800874c:	4b12      	ldr	r3, [pc, #72]	@ (8008798 <_vfiprintf_r+0x228>)
 800874e:	a904      	add	r1, sp, #16
 8008750:	4630      	mov	r0, r6
 8008752:	f7fc fb4b 	bl	8004dec <_printf_float>
 8008756:	4607      	mov	r7, r0
 8008758:	1c78      	adds	r0, r7, #1
 800875a:	d1d6      	bne.n	800870a <_vfiprintf_r+0x19a>
 800875c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800875e:	07d9      	lsls	r1, r3, #31
 8008760:	d405      	bmi.n	800876e <_vfiprintf_r+0x1fe>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	059a      	lsls	r2, r3, #22
 8008766:	d402      	bmi.n	800876e <_vfiprintf_r+0x1fe>
 8008768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800876a:	f7fd faf1 	bl	8005d50 <__retarget_lock_release_recursive>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	065b      	lsls	r3, r3, #25
 8008772:	f53f af1f 	bmi.w	80085b4 <_vfiprintf_r+0x44>
 8008776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008778:	e71e      	b.n	80085b8 <_vfiprintf_r+0x48>
 800877a:	ab03      	add	r3, sp, #12
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	462a      	mov	r2, r5
 8008780:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <_vfiprintf_r+0x228>)
 8008782:	a904      	add	r1, sp, #16
 8008784:	4630      	mov	r0, r6
 8008786:	f7fc fdc9 	bl	800531c <_printf_i>
 800878a:	e7e4      	b.n	8008756 <_vfiprintf_r+0x1e6>
 800878c:	0800a365 	.word	0x0800a365
 8008790:	0800a36f 	.word	0x0800a36f
 8008794:	08004ded 	.word	0x08004ded
 8008798:	0800854b 	.word	0x0800854b
 800879c:	0800a36b 	.word	0x0800a36b

080087a0 <__sflush_r>:
 80087a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	0716      	lsls	r6, r2, #28
 80087aa:	4605      	mov	r5, r0
 80087ac:	460c      	mov	r4, r1
 80087ae:	d454      	bmi.n	800885a <__sflush_r+0xba>
 80087b0:	684b      	ldr	r3, [r1, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dc02      	bgt.n	80087bc <__sflush_r+0x1c>
 80087b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dd48      	ble.n	800884e <__sflush_r+0xae>
 80087bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d045      	beq.n	800884e <__sflush_r+0xae>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087c8:	682f      	ldr	r7, [r5, #0]
 80087ca:	6a21      	ldr	r1, [r4, #32]
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	d030      	beq.n	8008832 <__sflush_r+0x92>
 80087d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	0759      	lsls	r1, r3, #29
 80087d6:	d505      	bpl.n	80087e4 <__sflush_r+0x44>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087de:	b10b      	cbz	r3, 80087e4 <__sflush_r+0x44>
 80087e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	2300      	movs	r3, #0
 80087e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b0      	blx	r6
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	d106      	bne.n	8008802 <__sflush_r+0x62>
 80087f4:	6829      	ldr	r1, [r5, #0]
 80087f6:	291d      	cmp	r1, #29
 80087f8:	d82b      	bhi.n	8008852 <__sflush_r+0xb2>
 80087fa:	4a2a      	ldr	r2, [pc, #168]	@ (80088a4 <__sflush_r+0x104>)
 80087fc:	40ca      	lsrs	r2, r1
 80087fe:	07d6      	lsls	r6, r2, #31
 8008800:	d527      	bpl.n	8008852 <__sflush_r+0xb2>
 8008802:	2200      	movs	r2, #0
 8008804:	6062      	str	r2, [r4, #4]
 8008806:	04d9      	lsls	r1, r3, #19
 8008808:	6922      	ldr	r2, [r4, #16]
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	d504      	bpl.n	8008818 <__sflush_r+0x78>
 800880e:	1c42      	adds	r2, r0, #1
 8008810:	d101      	bne.n	8008816 <__sflush_r+0x76>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	b903      	cbnz	r3, 8008818 <__sflush_r+0x78>
 8008816:	6560      	str	r0, [r4, #84]	@ 0x54
 8008818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800881a:	602f      	str	r7, [r5, #0]
 800881c:	b1b9      	cbz	r1, 800884e <__sflush_r+0xae>
 800881e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008822:	4299      	cmp	r1, r3
 8008824:	d002      	beq.n	800882c <__sflush_r+0x8c>
 8008826:	4628      	mov	r0, r5
 8008828:	f7fe f8f2 	bl	8006a10 <_free_r>
 800882c:	2300      	movs	r3, #0
 800882e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008830:	e00d      	b.n	800884e <__sflush_r+0xae>
 8008832:	2301      	movs	r3, #1
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	4602      	mov	r2, r0
 800883a:	1c50      	adds	r0, r2, #1
 800883c:	d1c9      	bne.n	80087d2 <__sflush_r+0x32>
 800883e:	682b      	ldr	r3, [r5, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0c6      	beq.n	80087d2 <__sflush_r+0x32>
 8008844:	2b1d      	cmp	r3, #29
 8008846:	d001      	beq.n	800884c <__sflush_r+0xac>
 8008848:	2b16      	cmp	r3, #22
 800884a:	d11e      	bne.n	800888a <__sflush_r+0xea>
 800884c:	602f      	str	r7, [r5, #0]
 800884e:	2000      	movs	r0, #0
 8008850:	e022      	b.n	8008898 <__sflush_r+0xf8>
 8008852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008856:	b21b      	sxth	r3, r3
 8008858:	e01b      	b.n	8008892 <__sflush_r+0xf2>
 800885a:	690f      	ldr	r7, [r1, #16]
 800885c:	2f00      	cmp	r7, #0
 800885e:	d0f6      	beq.n	800884e <__sflush_r+0xae>
 8008860:	0793      	lsls	r3, r2, #30
 8008862:	680e      	ldr	r6, [r1, #0]
 8008864:	bf08      	it	eq
 8008866:	694b      	ldreq	r3, [r1, #20]
 8008868:	600f      	str	r7, [r1, #0]
 800886a:	bf18      	it	ne
 800886c:	2300      	movne	r3, #0
 800886e:	eba6 0807 	sub.w	r8, r6, r7
 8008872:	608b      	str	r3, [r1, #8]
 8008874:	f1b8 0f00 	cmp.w	r8, #0
 8008878:	dde9      	ble.n	800884e <__sflush_r+0xae>
 800887a:	6a21      	ldr	r1, [r4, #32]
 800887c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800887e:	4643      	mov	r3, r8
 8008880:	463a      	mov	r2, r7
 8008882:	4628      	mov	r0, r5
 8008884:	47b0      	blx	r6
 8008886:	2800      	cmp	r0, #0
 8008888:	dc08      	bgt.n	800889c <__sflush_r+0xfc>
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800889c:	4407      	add	r7, r0
 800889e:	eba8 0800 	sub.w	r8, r8, r0
 80088a2:	e7e7      	b.n	8008874 <__sflush_r+0xd4>
 80088a4:	20400001 	.word	0x20400001

080088a8 <_fflush_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	690b      	ldr	r3, [r1, #16]
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b913      	cbnz	r3, 80088b8 <_fflush_r+0x10>
 80088b2:	2500      	movs	r5, #0
 80088b4:	4628      	mov	r0, r5
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	b118      	cbz	r0, 80088c2 <_fflush_r+0x1a>
 80088ba:	6a03      	ldr	r3, [r0, #32]
 80088bc:	b90b      	cbnz	r3, 80088c2 <_fflush_r+0x1a>
 80088be:	f7fd f8e5 	bl	8005a8c <__sinit>
 80088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f3      	beq.n	80088b2 <_fflush_r+0xa>
 80088ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088cc:	07d0      	lsls	r0, r2, #31
 80088ce:	d404      	bmi.n	80088da <_fflush_r+0x32>
 80088d0:	0599      	lsls	r1, r3, #22
 80088d2:	d402      	bmi.n	80088da <_fflush_r+0x32>
 80088d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088d6:	f7fd fa3a 	bl	8005d4e <__retarget_lock_acquire_recursive>
 80088da:	4628      	mov	r0, r5
 80088dc:	4621      	mov	r1, r4
 80088de:	f7ff ff5f 	bl	80087a0 <__sflush_r>
 80088e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088e4:	07da      	lsls	r2, r3, #31
 80088e6:	4605      	mov	r5, r0
 80088e8:	d4e4      	bmi.n	80088b4 <_fflush_r+0xc>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	059b      	lsls	r3, r3, #22
 80088ee:	d4e1      	bmi.n	80088b4 <_fflush_r+0xc>
 80088f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f2:	f7fd fa2d 	bl	8005d50 <__retarget_lock_release_recursive>
 80088f6:	e7dd      	b.n	80088b4 <_fflush_r+0xc>

080088f8 <__swbuf_r>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	460e      	mov	r6, r1
 80088fc:	4614      	mov	r4, r2
 80088fe:	4605      	mov	r5, r0
 8008900:	b118      	cbz	r0, 800890a <__swbuf_r+0x12>
 8008902:	6a03      	ldr	r3, [r0, #32]
 8008904:	b90b      	cbnz	r3, 800890a <__swbuf_r+0x12>
 8008906:	f7fd f8c1 	bl	8005a8c <__sinit>
 800890a:	69a3      	ldr	r3, [r4, #24]
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	071a      	lsls	r2, r3, #28
 8008912:	d501      	bpl.n	8008918 <__swbuf_r+0x20>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	b943      	cbnz	r3, 800892a <__swbuf_r+0x32>
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 f82a 	bl	8008974 <__swsetup_r>
 8008920:	b118      	cbz	r0, 800892a <__swbuf_r+0x32>
 8008922:	f04f 37ff 	mov.w	r7, #4294967295
 8008926:	4638      	mov	r0, r7
 8008928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	6922      	ldr	r2, [r4, #16]
 800892e:	1a98      	subs	r0, r3, r2
 8008930:	6963      	ldr	r3, [r4, #20]
 8008932:	b2f6      	uxtb	r6, r6
 8008934:	4283      	cmp	r3, r0
 8008936:	4637      	mov	r7, r6
 8008938:	dc05      	bgt.n	8008946 <__swbuf_r+0x4e>
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff ffb3 	bl	80088a8 <_fflush_r>
 8008942:	2800      	cmp	r0, #0
 8008944:	d1ed      	bne.n	8008922 <__swbuf_r+0x2a>
 8008946:	68a3      	ldr	r3, [r4, #8]
 8008948:	3b01      	subs	r3, #1
 800894a:	60a3      	str	r3, [r4, #8]
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	701e      	strb	r6, [r3, #0]
 8008954:	6962      	ldr	r2, [r4, #20]
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	429a      	cmp	r2, r3
 800895a:	d004      	beq.n	8008966 <__swbuf_r+0x6e>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	07db      	lsls	r3, r3, #31
 8008960:	d5e1      	bpl.n	8008926 <__swbuf_r+0x2e>
 8008962:	2e0a      	cmp	r6, #10
 8008964:	d1df      	bne.n	8008926 <__swbuf_r+0x2e>
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f7ff ff9d 	bl	80088a8 <_fflush_r>
 800896e:	2800      	cmp	r0, #0
 8008970:	d0d9      	beq.n	8008926 <__swbuf_r+0x2e>
 8008972:	e7d6      	b.n	8008922 <__swbuf_r+0x2a>

08008974 <__swsetup_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4b29      	ldr	r3, [pc, #164]	@ (8008a1c <__swsetup_r+0xa8>)
 8008978:	4605      	mov	r5, r0
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	460c      	mov	r4, r1
 800897e:	b118      	cbz	r0, 8008988 <__swsetup_r+0x14>
 8008980:	6a03      	ldr	r3, [r0, #32]
 8008982:	b90b      	cbnz	r3, 8008988 <__swsetup_r+0x14>
 8008984:	f7fd f882 	bl	8005a8c <__sinit>
 8008988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898c:	0719      	lsls	r1, r3, #28
 800898e:	d422      	bmi.n	80089d6 <__swsetup_r+0x62>
 8008990:	06da      	lsls	r2, r3, #27
 8008992:	d407      	bmi.n	80089a4 <__swsetup_r+0x30>
 8008994:	2209      	movs	r2, #9
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	e033      	b.n	8008a0c <__swsetup_r+0x98>
 80089a4:	0758      	lsls	r0, r3, #29
 80089a6:	d512      	bpl.n	80089ce <__swsetup_r+0x5a>
 80089a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089aa:	b141      	cbz	r1, 80089be <__swsetup_r+0x4a>
 80089ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b0:	4299      	cmp	r1, r3
 80089b2:	d002      	beq.n	80089ba <__swsetup_r+0x46>
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7fe f82b 	bl	8006a10 <_free_r>
 80089ba:	2300      	movs	r3, #0
 80089bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	2300      	movs	r3, #0
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0308 	orr.w	r3, r3, #8
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	b94b      	cbnz	r3, 80089ee <__swsetup_r+0x7a>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e4:	d003      	beq.n	80089ee <__swsetup_r+0x7a>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f000 fc5d 	bl	80092a8 <__smakebuf_r>
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	f013 0201 	ands.w	r2, r3, #1
 80089f6:	d00a      	beq.n	8008a0e <__swsetup_r+0x9a>
 80089f8:	2200      	movs	r2, #0
 80089fa:	60a2      	str	r2, [r4, #8]
 80089fc:	6962      	ldr	r2, [r4, #20]
 80089fe:	4252      	negs	r2, r2
 8008a00:	61a2      	str	r2, [r4, #24]
 8008a02:	6922      	ldr	r2, [r4, #16]
 8008a04:	b942      	cbnz	r2, 8008a18 <__swsetup_r+0xa4>
 8008a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a0a:	d1c5      	bne.n	8008998 <__swsetup_r+0x24>
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	0799      	lsls	r1, r3, #30
 8008a10:	bf58      	it	pl
 8008a12:	6962      	ldrpl	r2, [r4, #20]
 8008a14:	60a2      	str	r2, [r4, #8]
 8008a16:	e7f4      	b.n	8008a02 <__swsetup_r+0x8e>
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e7f7      	b.n	8008a0c <__swsetup_r+0x98>
 8008a1c:	20000018 	.word	0x20000018

08008a20 <memmove>:
 8008a20:	4288      	cmp	r0, r1
 8008a22:	b510      	push	{r4, lr}
 8008a24:	eb01 0402 	add.w	r4, r1, r2
 8008a28:	d902      	bls.n	8008a30 <memmove+0x10>
 8008a2a:	4284      	cmp	r4, r0
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	d807      	bhi.n	8008a40 <memmove+0x20>
 8008a30:	1e43      	subs	r3, r0, #1
 8008a32:	42a1      	cmp	r1, r4
 8008a34:	d008      	beq.n	8008a48 <memmove+0x28>
 8008a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a3e:	e7f8      	b.n	8008a32 <memmove+0x12>
 8008a40:	4402      	add	r2, r0
 8008a42:	4601      	mov	r1, r0
 8008a44:	428a      	cmp	r2, r1
 8008a46:	d100      	bne.n	8008a4a <memmove+0x2a>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a52:	e7f7      	b.n	8008a44 <memmove+0x24>

08008a54 <strncmp>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	b16a      	cbz	r2, 8008a74 <strncmp+0x20>
 8008a58:	3901      	subs	r1, #1
 8008a5a:	1884      	adds	r4, r0, r2
 8008a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d103      	bne.n	8008a70 <strncmp+0x1c>
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d001      	beq.n	8008a70 <strncmp+0x1c>
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	d1f5      	bne.n	8008a5c <strncmp+0x8>
 8008a70:	1ad0      	subs	r0, r2, r3
 8008a72:	bd10      	pop	{r4, pc}
 8008a74:	4610      	mov	r0, r2
 8008a76:	e7fc      	b.n	8008a72 <strncmp+0x1e>

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	@ (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f9 fb98 	bl	80021b8 <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20000434 	.word	0x20000434

08008a98 <memcpy>:
 8008a98:	440a      	add	r2, r1
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa0:	d100      	bne.n	8008aa4 <memcpy+0xc>
 8008aa2:	4770      	bx	lr
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aae:	4291      	cmp	r1, r2
 8008ab0:	d1f9      	bne.n	8008aa6 <memcpy+0xe>
 8008ab2:	bd10      	pop	{r4, pc}
 8008ab4:	0000      	movs	r0, r0
	...

08008ab8 <nan>:
 8008ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ac0 <nan+0x8>
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	00000000 	.word	0x00000000
 8008ac4:	7ff80000 	.word	0x7ff80000

08008ac8 <__assert_func>:
 8008ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aca:	4614      	mov	r4, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	4b09      	ldr	r3, [pc, #36]	@ (8008af4 <__assert_func+0x2c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	68d8      	ldr	r0, [r3, #12]
 8008ad6:	b14c      	cbz	r4, 8008aec <__assert_func+0x24>
 8008ad8:	4b07      	ldr	r3, [pc, #28]	@ (8008af8 <__assert_func+0x30>)
 8008ada:	9100      	str	r1, [sp, #0]
 8008adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ae0:	4906      	ldr	r1, [pc, #24]	@ (8008afc <__assert_func+0x34>)
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f000 fba8 	bl	8009238 <fiprintf>
 8008ae8:	f000 fc3c 	bl	8009364 <abort>
 8008aec:	4b04      	ldr	r3, [pc, #16]	@ (8008b00 <__assert_func+0x38>)
 8008aee:	461c      	mov	r4, r3
 8008af0:	e7f3      	b.n	8008ada <__assert_func+0x12>
 8008af2:	bf00      	nop
 8008af4:	20000018 	.word	0x20000018
 8008af8:	0800a37e 	.word	0x0800a37e
 8008afc:	0800a38b 	.word	0x0800a38b
 8008b00:	0800a3b9 	.word	0x0800a3b9

08008b04 <_calloc_r>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	fba1 5402 	umull	r5, r4, r1, r2
 8008b0a:	b934      	cbnz	r4, 8008b1a <_calloc_r+0x16>
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7fd fff3 	bl	8006af8 <_malloc_r>
 8008b12:	4606      	mov	r6, r0
 8008b14:	b928      	cbnz	r0, 8008b22 <_calloc_r+0x1e>
 8008b16:	4630      	mov	r0, r6
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	220c      	movs	r2, #12
 8008b1c:	6002      	str	r2, [r0, #0]
 8008b1e:	2600      	movs	r6, #0
 8008b20:	e7f9      	b.n	8008b16 <_calloc_r+0x12>
 8008b22:	462a      	mov	r2, r5
 8008b24:	4621      	mov	r1, r4
 8008b26:	f7fd f894 	bl	8005c52 <memset>
 8008b2a:	e7f4      	b.n	8008b16 <_calloc_r+0x12>

08008b2c <rshift>:
 8008b2c:	6903      	ldr	r3, [r0, #16]
 8008b2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b3a:	f100 0414 	add.w	r4, r0, #20
 8008b3e:	dd45      	ble.n	8008bcc <rshift+0xa0>
 8008b40:	f011 011f 	ands.w	r1, r1, #31
 8008b44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b4c:	d10c      	bne.n	8008b68 <rshift+0x3c>
 8008b4e:	f100 0710 	add.w	r7, r0, #16
 8008b52:	4629      	mov	r1, r5
 8008b54:	42b1      	cmp	r1, r6
 8008b56:	d334      	bcc.n	8008bc2 <rshift+0x96>
 8008b58:	1a9b      	subs	r3, r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	1eea      	subs	r2, r5, #3
 8008b5e:	4296      	cmp	r6, r2
 8008b60:	bf38      	it	cc
 8008b62:	2300      	movcc	r3, #0
 8008b64:	4423      	add	r3, r4
 8008b66:	e015      	b.n	8008b94 <rshift+0x68>
 8008b68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b6c:	f1c1 0820 	rsb	r8, r1, #32
 8008b70:	40cf      	lsrs	r7, r1
 8008b72:	f105 0e04 	add.w	lr, r5, #4
 8008b76:	46a1      	mov	r9, r4
 8008b78:	4576      	cmp	r6, lr
 8008b7a:	46f4      	mov	ip, lr
 8008b7c:	d815      	bhi.n	8008baa <rshift+0x7e>
 8008b7e:	1a9a      	subs	r2, r3, r2
 8008b80:	0092      	lsls	r2, r2, #2
 8008b82:	3a04      	subs	r2, #4
 8008b84:	3501      	adds	r5, #1
 8008b86:	42ae      	cmp	r6, r5
 8008b88:	bf38      	it	cc
 8008b8a:	2200      	movcc	r2, #0
 8008b8c:	18a3      	adds	r3, r4, r2
 8008b8e:	50a7      	str	r7, [r4, r2]
 8008b90:	b107      	cbz	r7, 8008b94 <rshift+0x68>
 8008b92:	3304      	adds	r3, #4
 8008b94:	1b1a      	subs	r2, r3, r4
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b9c:	bf08      	it	eq
 8008b9e:	2300      	moveq	r3, #0
 8008ba0:	6102      	str	r2, [r0, #16]
 8008ba2:	bf08      	it	eq
 8008ba4:	6143      	streq	r3, [r0, #20]
 8008ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008baa:	f8dc c000 	ldr.w	ip, [ip]
 8008bae:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bb2:	ea4c 0707 	orr.w	r7, ip, r7
 8008bb6:	f849 7b04 	str.w	r7, [r9], #4
 8008bba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bbe:	40cf      	lsrs	r7, r1
 8008bc0:	e7da      	b.n	8008b78 <rshift+0x4c>
 8008bc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bca:	e7c3      	b.n	8008b54 <rshift+0x28>
 8008bcc:	4623      	mov	r3, r4
 8008bce:	e7e1      	b.n	8008b94 <rshift+0x68>

08008bd0 <__hexdig_fun>:
 8008bd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008bd4:	2b09      	cmp	r3, #9
 8008bd6:	d802      	bhi.n	8008bde <__hexdig_fun+0xe>
 8008bd8:	3820      	subs	r0, #32
 8008bda:	b2c0      	uxtb	r0, r0
 8008bdc:	4770      	bx	lr
 8008bde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d801      	bhi.n	8008bea <__hexdig_fun+0x1a>
 8008be6:	3847      	subs	r0, #71	@ 0x47
 8008be8:	e7f7      	b.n	8008bda <__hexdig_fun+0xa>
 8008bea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	d801      	bhi.n	8008bf6 <__hexdig_fun+0x26>
 8008bf2:	3827      	subs	r0, #39	@ 0x27
 8008bf4:	e7f1      	b.n	8008bda <__hexdig_fun+0xa>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	4770      	bx	lr
	...

08008bfc <__gethex>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	b085      	sub	sp, #20
 8008c02:	468a      	mov	sl, r1
 8008c04:	9302      	str	r3, [sp, #8]
 8008c06:	680b      	ldr	r3, [r1, #0]
 8008c08:	9001      	str	r0, [sp, #4]
 8008c0a:	4690      	mov	r8, r2
 8008c0c:	1c9c      	adds	r4, r3, #2
 8008c0e:	46a1      	mov	r9, r4
 8008c10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008c14:	2830      	cmp	r0, #48	@ 0x30
 8008c16:	d0fa      	beq.n	8008c0e <__gethex+0x12>
 8008c18:	eba9 0303 	sub.w	r3, r9, r3
 8008c1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008c20:	f7ff ffd6 	bl	8008bd0 <__hexdig_fun>
 8008c24:	4605      	mov	r5, r0
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d168      	bne.n	8008cfc <__gethex+0x100>
 8008c2a:	49a0      	ldr	r1, [pc, #640]	@ (8008eac <__gethex+0x2b0>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	4648      	mov	r0, r9
 8008c30:	f7ff ff10 	bl	8008a54 <strncmp>
 8008c34:	4607      	mov	r7, r0
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d167      	bne.n	8008d0a <__gethex+0x10e>
 8008c3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008c3e:	4626      	mov	r6, r4
 8008c40:	f7ff ffc6 	bl	8008bd0 <__hexdig_fun>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d062      	beq.n	8008d0e <__gethex+0x112>
 8008c48:	4623      	mov	r3, r4
 8008c4a:	7818      	ldrb	r0, [r3, #0]
 8008c4c:	2830      	cmp	r0, #48	@ 0x30
 8008c4e:	4699      	mov	r9, r3
 8008c50:	f103 0301 	add.w	r3, r3, #1
 8008c54:	d0f9      	beq.n	8008c4a <__gethex+0x4e>
 8008c56:	f7ff ffbb 	bl	8008bd0 <__hexdig_fun>
 8008c5a:	fab0 f580 	clz	r5, r0
 8008c5e:	096d      	lsrs	r5, r5, #5
 8008c60:	f04f 0b01 	mov.w	fp, #1
 8008c64:	464a      	mov	r2, r9
 8008c66:	4616      	mov	r6, r2
 8008c68:	3201      	adds	r2, #1
 8008c6a:	7830      	ldrb	r0, [r6, #0]
 8008c6c:	f7ff ffb0 	bl	8008bd0 <__hexdig_fun>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1f8      	bne.n	8008c66 <__gethex+0x6a>
 8008c74:	498d      	ldr	r1, [pc, #564]	@ (8008eac <__gethex+0x2b0>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff feeb 	bl	8008a54 <strncmp>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d13f      	bne.n	8008d02 <__gethex+0x106>
 8008c82:	b944      	cbnz	r4, 8008c96 <__gethex+0x9a>
 8008c84:	1c74      	adds	r4, r6, #1
 8008c86:	4622      	mov	r2, r4
 8008c88:	4616      	mov	r6, r2
 8008c8a:	3201      	adds	r2, #1
 8008c8c:	7830      	ldrb	r0, [r6, #0]
 8008c8e:	f7ff ff9f 	bl	8008bd0 <__hexdig_fun>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d1f8      	bne.n	8008c88 <__gethex+0x8c>
 8008c96:	1ba4      	subs	r4, r4, r6
 8008c98:	00a7      	lsls	r7, r4, #2
 8008c9a:	7833      	ldrb	r3, [r6, #0]
 8008c9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ca0:	2b50      	cmp	r3, #80	@ 0x50
 8008ca2:	d13e      	bne.n	8008d22 <__gethex+0x126>
 8008ca4:	7873      	ldrb	r3, [r6, #1]
 8008ca6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ca8:	d033      	beq.n	8008d12 <__gethex+0x116>
 8008caa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008cac:	d034      	beq.n	8008d18 <__gethex+0x11c>
 8008cae:	1c71      	adds	r1, r6, #1
 8008cb0:	2400      	movs	r4, #0
 8008cb2:	7808      	ldrb	r0, [r1, #0]
 8008cb4:	f7ff ff8c 	bl	8008bd0 <__hexdig_fun>
 8008cb8:	1e43      	subs	r3, r0, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b18      	cmp	r3, #24
 8008cbe:	d830      	bhi.n	8008d22 <__gethex+0x126>
 8008cc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008cc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cc8:	f7ff ff82 	bl	8008bd0 <__hexdig_fun>
 8008ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cd0:	fa5f fc8c 	uxtb.w	ip, ip
 8008cd4:	f1bc 0f18 	cmp.w	ip, #24
 8008cd8:	f04f 030a 	mov.w	r3, #10
 8008cdc:	d91e      	bls.n	8008d1c <__gethex+0x120>
 8008cde:	b104      	cbz	r4, 8008ce2 <__gethex+0xe6>
 8008ce0:	4252      	negs	r2, r2
 8008ce2:	4417      	add	r7, r2
 8008ce4:	f8ca 1000 	str.w	r1, [sl]
 8008ce8:	b1ed      	cbz	r5, 8008d26 <__gethex+0x12a>
 8008cea:	f1bb 0f00 	cmp.w	fp, #0
 8008cee:	bf0c      	ite	eq
 8008cf0:	2506      	moveq	r5, #6
 8008cf2:	2500      	movne	r5, #0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	b005      	add	sp, #20
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	462c      	mov	r4, r5
 8008d00:	e7b0      	b.n	8008c64 <__gethex+0x68>
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d1c7      	bne.n	8008c96 <__gethex+0x9a>
 8008d06:	4627      	mov	r7, r4
 8008d08:	e7c7      	b.n	8008c9a <__gethex+0x9e>
 8008d0a:	464e      	mov	r6, r9
 8008d0c:	462f      	mov	r7, r5
 8008d0e:	2501      	movs	r5, #1
 8008d10:	e7c3      	b.n	8008c9a <__gethex+0x9e>
 8008d12:	2400      	movs	r4, #0
 8008d14:	1cb1      	adds	r1, r6, #2
 8008d16:	e7cc      	b.n	8008cb2 <__gethex+0xb6>
 8008d18:	2401      	movs	r4, #1
 8008d1a:	e7fb      	b.n	8008d14 <__gethex+0x118>
 8008d1c:	fb03 0002 	mla	r0, r3, r2, r0
 8008d20:	e7ce      	b.n	8008cc0 <__gethex+0xc4>
 8008d22:	4631      	mov	r1, r6
 8008d24:	e7de      	b.n	8008ce4 <__gethex+0xe8>
 8008d26:	eba6 0309 	sub.w	r3, r6, r9
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	2b07      	cmp	r3, #7
 8008d30:	dc0a      	bgt.n	8008d48 <__gethex+0x14c>
 8008d32:	9801      	ldr	r0, [sp, #4]
 8008d34:	f7fd ff6c 	bl	8006c10 <_Balloc>
 8008d38:	4604      	mov	r4, r0
 8008d3a:	b940      	cbnz	r0, 8008d4e <__gethex+0x152>
 8008d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008eb0 <__gethex+0x2b4>)
 8008d3e:	4602      	mov	r2, r0
 8008d40:	21e4      	movs	r1, #228	@ 0xe4
 8008d42:	485c      	ldr	r0, [pc, #368]	@ (8008eb4 <__gethex+0x2b8>)
 8008d44:	f7ff fec0 	bl	8008ac8 <__assert_func>
 8008d48:	3101      	adds	r1, #1
 8008d4a:	105b      	asrs	r3, r3, #1
 8008d4c:	e7ef      	b.n	8008d2e <__gethex+0x132>
 8008d4e:	f100 0a14 	add.w	sl, r0, #20
 8008d52:	2300      	movs	r3, #0
 8008d54:	4655      	mov	r5, sl
 8008d56:	469b      	mov	fp, r3
 8008d58:	45b1      	cmp	r9, r6
 8008d5a:	d337      	bcc.n	8008dcc <__gethex+0x1d0>
 8008d5c:	f845 bb04 	str.w	fp, [r5], #4
 8008d60:	eba5 050a 	sub.w	r5, r5, sl
 8008d64:	10ad      	asrs	r5, r5, #2
 8008d66:	6125      	str	r5, [r4, #16]
 8008d68:	4658      	mov	r0, fp
 8008d6a:	f7fe f843 	bl	8006df4 <__hi0bits>
 8008d6e:	016d      	lsls	r5, r5, #5
 8008d70:	f8d8 6000 	ldr.w	r6, [r8]
 8008d74:	1a2d      	subs	r5, r5, r0
 8008d76:	42b5      	cmp	r5, r6
 8008d78:	dd54      	ble.n	8008e24 <__gethex+0x228>
 8008d7a:	1bad      	subs	r5, r5, r6
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7fe fbcf 	bl	8007522 <__any_on>
 8008d84:	4681      	mov	r9, r0
 8008d86:	b178      	cbz	r0, 8008da8 <__gethex+0x1ac>
 8008d88:	1e6b      	subs	r3, r5, #1
 8008d8a:	1159      	asrs	r1, r3, #5
 8008d8c:	f003 021f 	and.w	r2, r3, #31
 8008d90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d94:	f04f 0901 	mov.w	r9, #1
 8008d98:	fa09 f202 	lsl.w	r2, r9, r2
 8008d9c:	420a      	tst	r2, r1
 8008d9e:	d003      	beq.n	8008da8 <__gethex+0x1ac>
 8008da0:	454b      	cmp	r3, r9
 8008da2:	dc36      	bgt.n	8008e12 <__gethex+0x216>
 8008da4:	f04f 0902 	mov.w	r9, #2
 8008da8:	4629      	mov	r1, r5
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7ff febe 	bl	8008b2c <rshift>
 8008db0:	442f      	add	r7, r5
 8008db2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008db6:	42bb      	cmp	r3, r7
 8008db8:	da42      	bge.n	8008e40 <__gethex+0x244>
 8008dba:	9801      	ldr	r0, [sp, #4]
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f7fd ff67 	bl	8006c90 <_Bfree>
 8008dc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	25a3      	movs	r5, #163	@ 0xa3
 8008dca:	e793      	b.n	8008cf4 <__gethex+0xf8>
 8008dcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008dd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008dd2:	d012      	beq.n	8008dfa <__gethex+0x1fe>
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d104      	bne.n	8008de2 <__gethex+0x1e6>
 8008dd8:	f845 bb04 	str.w	fp, [r5], #4
 8008ddc:	f04f 0b00 	mov.w	fp, #0
 8008de0:	465b      	mov	r3, fp
 8008de2:	7830      	ldrb	r0, [r6, #0]
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	f7ff fef3 	bl	8008bd0 <__hexdig_fun>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	f000 000f 	and.w	r0, r0, #15
 8008df0:	4098      	lsls	r0, r3
 8008df2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008df6:	3304      	adds	r3, #4
 8008df8:	e7ae      	b.n	8008d58 <__gethex+0x15c>
 8008dfa:	45b1      	cmp	r9, r6
 8008dfc:	d8ea      	bhi.n	8008dd4 <__gethex+0x1d8>
 8008dfe:	492b      	ldr	r1, [pc, #172]	@ (8008eac <__gethex+0x2b0>)
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fe25 	bl	8008a54 <strncmp>
 8008e0a:	9b03      	ldr	r3, [sp, #12]
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d1e1      	bne.n	8008dd4 <__gethex+0x1d8>
 8008e10:	e7a2      	b.n	8008d58 <__gethex+0x15c>
 8008e12:	1ea9      	subs	r1, r5, #2
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7fe fb84 	bl	8007522 <__any_on>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d0c2      	beq.n	8008da4 <__gethex+0x1a8>
 8008e1e:	f04f 0903 	mov.w	r9, #3
 8008e22:	e7c1      	b.n	8008da8 <__gethex+0x1ac>
 8008e24:	da09      	bge.n	8008e3a <__gethex+0x23e>
 8008e26:	1b75      	subs	r5, r6, r5
 8008e28:	4621      	mov	r1, r4
 8008e2a:	9801      	ldr	r0, [sp, #4]
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	f7fe f93f 	bl	80070b0 <__lshift>
 8008e32:	1b7f      	subs	r7, r7, r5
 8008e34:	4604      	mov	r4, r0
 8008e36:	f100 0a14 	add.w	sl, r0, #20
 8008e3a:	f04f 0900 	mov.w	r9, #0
 8008e3e:	e7b8      	b.n	8008db2 <__gethex+0x1b6>
 8008e40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e44:	42bd      	cmp	r5, r7
 8008e46:	dd6f      	ble.n	8008f28 <__gethex+0x32c>
 8008e48:	1bed      	subs	r5, r5, r7
 8008e4a:	42ae      	cmp	r6, r5
 8008e4c:	dc34      	bgt.n	8008eb8 <__gethex+0x2bc>
 8008e4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d022      	beq.n	8008e9c <__gethex+0x2a0>
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d024      	beq.n	8008ea4 <__gethex+0x2a8>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d115      	bne.n	8008e8a <__gethex+0x28e>
 8008e5e:	42ae      	cmp	r6, r5
 8008e60:	d113      	bne.n	8008e8a <__gethex+0x28e>
 8008e62:	2e01      	cmp	r6, #1
 8008e64:	d10b      	bne.n	8008e7e <__gethex+0x282>
 8008e66:	9a02      	ldr	r2, [sp, #8]
 8008e68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	f8ca 3000 	str.w	r3, [sl]
 8008e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e78:	2562      	movs	r5, #98	@ 0x62
 8008e7a:	601c      	str	r4, [r3, #0]
 8008e7c:	e73a      	b.n	8008cf4 <__gethex+0xf8>
 8008e7e:	1e71      	subs	r1, r6, #1
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7fe fb4e 	bl	8007522 <__any_on>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d1ed      	bne.n	8008e66 <__gethex+0x26a>
 8008e8a:	9801      	ldr	r0, [sp, #4]
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	f7fd feff 	bl	8006c90 <_Bfree>
 8008e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e94:	2300      	movs	r3, #0
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	2550      	movs	r5, #80	@ 0x50
 8008e9a:	e72b      	b.n	8008cf4 <__gethex+0xf8>
 8008e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f3      	bne.n	8008e8a <__gethex+0x28e>
 8008ea2:	e7e0      	b.n	8008e66 <__gethex+0x26a>
 8008ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1dd      	bne.n	8008e66 <__gethex+0x26a>
 8008eaa:	e7ee      	b.n	8008e8a <__gethex+0x28e>
 8008eac:	0800a363 	.word	0x0800a363
 8008eb0:	0800a2f9 	.word	0x0800a2f9
 8008eb4:	0800a3ba 	.word	0x0800a3ba
 8008eb8:	1e6f      	subs	r7, r5, #1
 8008eba:	f1b9 0f00 	cmp.w	r9, #0
 8008ebe:	d130      	bne.n	8008f22 <__gethex+0x326>
 8008ec0:	b127      	cbz	r7, 8008ecc <__gethex+0x2d0>
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f7fe fb2c 	bl	8007522 <__any_on>
 8008eca:	4681      	mov	r9, r0
 8008ecc:	117a      	asrs	r2, r7, #5
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ed4:	f007 071f 	and.w	r7, r7, #31
 8008ed8:	40bb      	lsls	r3, r7
 8008eda:	4213      	tst	r3, r2
 8008edc:	4629      	mov	r1, r5
 8008ede:	4620      	mov	r0, r4
 8008ee0:	bf18      	it	ne
 8008ee2:	f049 0902 	orrne.w	r9, r9, #2
 8008ee6:	f7ff fe21 	bl	8008b2c <rshift>
 8008eea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008eee:	1b76      	subs	r6, r6, r5
 8008ef0:	2502      	movs	r5, #2
 8008ef2:	f1b9 0f00 	cmp.w	r9, #0
 8008ef6:	d047      	beq.n	8008f88 <__gethex+0x38c>
 8008ef8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d015      	beq.n	8008f2c <__gethex+0x330>
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d017      	beq.n	8008f34 <__gethex+0x338>
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d109      	bne.n	8008f1c <__gethex+0x320>
 8008f08:	f019 0f02 	tst.w	r9, #2
 8008f0c:	d006      	beq.n	8008f1c <__gethex+0x320>
 8008f0e:	f8da 3000 	ldr.w	r3, [sl]
 8008f12:	ea49 0903 	orr.w	r9, r9, r3
 8008f16:	f019 0f01 	tst.w	r9, #1
 8008f1a:	d10e      	bne.n	8008f3a <__gethex+0x33e>
 8008f1c:	f045 0510 	orr.w	r5, r5, #16
 8008f20:	e032      	b.n	8008f88 <__gethex+0x38c>
 8008f22:	f04f 0901 	mov.w	r9, #1
 8008f26:	e7d1      	b.n	8008ecc <__gethex+0x2d0>
 8008f28:	2501      	movs	r5, #1
 8008f2a:	e7e2      	b.n	8008ef2 <__gethex+0x2f6>
 8008f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f2e:	f1c3 0301 	rsb	r3, r3, #1
 8008f32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0f0      	beq.n	8008f1c <__gethex+0x320>
 8008f3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f3e:	f104 0314 	add.w	r3, r4, #20
 8008f42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f4a:	f04f 0c00 	mov.w	ip, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f58:	d01b      	beq.n	8008f92 <__gethex+0x396>
 8008f5a:	3201      	adds	r2, #1
 8008f5c:	6002      	str	r2, [r0, #0]
 8008f5e:	2d02      	cmp	r5, #2
 8008f60:	f104 0314 	add.w	r3, r4, #20
 8008f64:	d13c      	bne.n	8008fe0 <__gethex+0x3e4>
 8008f66:	f8d8 2000 	ldr.w	r2, [r8]
 8008f6a:	3a01      	subs	r2, #1
 8008f6c:	42b2      	cmp	r2, r6
 8008f6e:	d109      	bne.n	8008f84 <__gethex+0x388>
 8008f70:	1171      	asrs	r1, r6, #5
 8008f72:	2201      	movs	r2, #1
 8008f74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f78:	f006 061f 	and.w	r6, r6, #31
 8008f7c:	fa02 f606 	lsl.w	r6, r2, r6
 8008f80:	421e      	tst	r6, r3
 8008f82:	d13a      	bne.n	8008ffa <__gethex+0x3fe>
 8008f84:	f045 0520 	orr.w	r5, r5, #32
 8008f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f8a:	601c      	str	r4, [r3, #0]
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	601f      	str	r7, [r3, #0]
 8008f90:	e6b0      	b.n	8008cf4 <__gethex+0xf8>
 8008f92:	4299      	cmp	r1, r3
 8008f94:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f98:	d8d9      	bhi.n	8008f4e <__gethex+0x352>
 8008f9a:	68a3      	ldr	r3, [r4, #8]
 8008f9c:	459b      	cmp	fp, r3
 8008f9e:	db17      	blt.n	8008fd0 <__gethex+0x3d4>
 8008fa0:	6861      	ldr	r1, [r4, #4]
 8008fa2:	9801      	ldr	r0, [sp, #4]
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	f7fd fe33 	bl	8006c10 <_Balloc>
 8008faa:	4681      	mov	r9, r0
 8008fac:	b918      	cbnz	r0, 8008fb6 <__gethex+0x3ba>
 8008fae:	4b1a      	ldr	r3, [pc, #104]	@ (8009018 <__gethex+0x41c>)
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	2184      	movs	r1, #132	@ 0x84
 8008fb4:	e6c5      	b.n	8008d42 <__gethex+0x146>
 8008fb6:	6922      	ldr	r2, [r4, #16]
 8008fb8:	3202      	adds	r2, #2
 8008fba:	f104 010c 	add.w	r1, r4, #12
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	300c      	adds	r0, #12
 8008fc2:	f7ff fd69 	bl	8008a98 <memcpy>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	9801      	ldr	r0, [sp, #4]
 8008fca:	f7fd fe61 	bl	8006c90 <_Bfree>
 8008fce:	464c      	mov	r4, r9
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fd8:	6122      	str	r2, [r4, #16]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]
 8008fde:	e7be      	b.n	8008f5e <__gethex+0x362>
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	455a      	cmp	r2, fp
 8008fe4:	dd0b      	ble.n	8008ffe <__gethex+0x402>
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f7ff fd9f 	bl	8008b2c <rshift>
 8008fee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ff2:	3701      	adds	r7, #1
 8008ff4:	42bb      	cmp	r3, r7
 8008ff6:	f6ff aee0 	blt.w	8008dba <__gethex+0x1be>
 8008ffa:	2501      	movs	r5, #1
 8008ffc:	e7c2      	b.n	8008f84 <__gethex+0x388>
 8008ffe:	f016 061f 	ands.w	r6, r6, #31
 8009002:	d0fa      	beq.n	8008ffa <__gethex+0x3fe>
 8009004:	4453      	add	r3, sl
 8009006:	f1c6 0620 	rsb	r6, r6, #32
 800900a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800900e:	f7fd fef1 	bl	8006df4 <__hi0bits>
 8009012:	42b0      	cmp	r0, r6
 8009014:	dbe7      	blt.n	8008fe6 <__gethex+0x3ea>
 8009016:	e7f0      	b.n	8008ffa <__gethex+0x3fe>
 8009018:	0800a2f9 	.word	0x0800a2f9

0800901c <L_shift>:
 800901c:	f1c2 0208 	rsb	r2, r2, #8
 8009020:	0092      	lsls	r2, r2, #2
 8009022:	b570      	push	{r4, r5, r6, lr}
 8009024:	f1c2 0620 	rsb	r6, r2, #32
 8009028:	6843      	ldr	r3, [r0, #4]
 800902a:	6804      	ldr	r4, [r0, #0]
 800902c:	fa03 f506 	lsl.w	r5, r3, r6
 8009030:	432c      	orrs	r4, r5
 8009032:	40d3      	lsrs	r3, r2
 8009034:	6004      	str	r4, [r0, #0]
 8009036:	f840 3f04 	str.w	r3, [r0, #4]!
 800903a:	4288      	cmp	r0, r1
 800903c:	d3f4      	bcc.n	8009028 <L_shift+0xc>
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <__match>:
 8009040:	b530      	push	{r4, r5, lr}
 8009042:	6803      	ldr	r3, [r0, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904a:	b914      	cbnz	r4, 8009052 <__match+0x12>
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	2001      	movs	r0, #1
 8009050:	bd30      	pop	{r4, r5, pc}
 8009052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009056:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800905a:	2d19      	cmp	r5, #25
 800905c:	bf98      	it	ls
 800905e:	3220      	addls	r2, #32
 8009060:	42a2      	cmp	r2, r4
 8009062:	d0f0      	beq.n	8009046 <__match+0x6>
 8009064:	2000      	movs	r0, #0
 8009066:	e7f3      	b.n	8009050 <__match+0x10>

08009068 <__hexnan>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	680b      	ldr	r3, [r1, #0]
 800906e:	6801      	ldr	r1, [r0, #0]
 8009070:	115e      	asrs	r6, r3, #5
 8009072:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009076:	f013 031f 	ands.w	r3, r3, #31
 800907a:	b087      	sub	sp, #28
 800907c:	bf18      	it	ne
 800907e:	3604      	addne	r6, #4
 8009080:	2500      	movs	r5, #0
 8009082:	1f37      	subs	r7, r6, #4
 8009084:	4682      	mov	sl, r0
 8009086:	4690      	mov	r8, r2
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	f846 5c04 	str.w	r5, [r6, #-4]
 800908e:	46b9      	mov	r9, r7
 8009090:	463c      	mov	r4, r7
 8009092:	9502      	str	r5, [sp, #8]
 8009094:	46ab      	mov	fp, r5
 8009096:	784a      	ldrb	r2, [r1, #1]
 8009098:	1c4b      	adds	r3, r1, #1
 800909a:	9303      	str	r3, [sp, #12]
 800909c:	b342      	cbz	r2, 80090f0 <__hexnan+0x88>
 800909e:	4610      	mov	r0, r2
 80090a0:	9105      	str	r1, [sp, #20]
 80090a2:	9204      	str	r2, [sp, #16]
 80090a4:	f7ff fd94 	bl	8008bd0 <__hexdig_fun>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d151      	bne.n	8009150 <__hexnan+0xe8>
 80090ac:	9a04      	ldr	r2, [sp, #16]
 80090ae:	9905      	ldr	r1, [sp, #20]
 80090b0:	2a20      	cmp	r2, #32
 80090b2:	d818      	bhi.n	80090e6 <__hexnan+0x7e>
 80090b4:	9b02      	ldr	r3, [sp, #8]
 80090b6:	459b      	cmp	fp, r3
 80090b8:	dd13      	ble.n	80090e2 <__hexnan+0x7a>
 80090ba:	454c      	cmp	r4, r9
 80090bc:	d206      	bcs.n	80090cc <__hexnan+0x64>
 80090be:	2d07      	cmp	r5, #7
 80090c0:	dc04      	bgt.n	80090cc <__hexnan+0x64>
 80090c2:	462a      	mov	r2, r5
 80090c4:	4649      	mov	r1, r9
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7ff ffa8 	bl	800901c <L_shift>
 80090cc:	4544      	cmp	r4, r8
 80090ce:	d952      	bls.n	8009176 <__hexnan+0x10e>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f1a4 0904 	sub.w	r9, r4, #4
 80090d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80090da:	f8cd b008 	str.w	fp, [sp, #8]
 80090de:	464c      	mov	r4, r9
 80090e0:	461d      	mov	r5, r3
 80090e2:	9903      	ldr	r1, [sp, #12]
 80090e4:	e7d7      	b.n	8009096 <__hexnan+0x2e>
 80090e6:	2a29      	cmp	r2, #41	@ 0x29
 80090e8:	d157      	bne.n	800919a <__hexnan+0x132>
 80090ea:	3102      	adds	r1, #2
 80090ec:	f8ca 1000 	str.w	r1, [sl]
 80090f0:	f1bb 0f00 	cmp.w	fp, #0
 80090f4:	d051      	beq.n	800919a <__hexnan+0x132>
 80090f6:	454c      	cmp	r4, r9
 80090f8:	d206      	bcs.n	8009108 <__hexnan+0xa0>
 80090fa:	2d07      	cmp	r5, #7
 80090fc:	dc04      	bgt.n	8009108 <__hexnan+0xa0>
 80090fe:	462a      	mov	r2, r5
 8009100:	4649      	mov	r1, r9
 8009102:	4620      	mov	r0, r4
 8009104:	f7ff ff8a 	bl	800901c <L_shift>
 8009108:	4544      	cmp	r4, r8
 800910a:	d936      	bls.n	800917a <__hexnan+0x112>
 800910c:	f1a8 0204 	sub.w	r2, r8, #4
 8009110:	4623      	mov	r3, r4
 8009112:	f853 1b04 	ldr.w	r1, [r3], #4
 8009116:	f842 1f04 	str.w	r1, [r2, #4]!
 800911a:	429f      	cmp	r7, r3
 800911c:	d2f9      	bcs.n	8009112 <__hexnan+0xaa>
 800911e:	1b3b      	subs	r3, r7, r4
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	3304      	adds	r3, #4
 8009126:	3401      	adds	r4, #1
 8009128:	3e03      	subs	r6, #3
 800912a:	42b4      	cmp	r4, r6
 800912c:	bf88      	it	hi
 800912e:	2304      	movhi	r3, #4
 8009130:	4443      	add	r3, r8
 8009132:	2200      	movs	r2, #0
 8009134:	f843 2b04 	str.w	r2, [r3], #4
 8009138:	429f      	cmp	r7, r3
 800913a:	d2fb      	bcs.n	8009134 <__hexnan+0xcc>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	b91b      	cbnz	r3, 8009148 <__hexnan+0xe0>
 8009140:	4547      	cmp	r7, r8
 8009142:	d128      	bne.n	8009196 <__hexnan+0x12e>
 8009144:	2301      	movs	r3, #1
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	2005      	movs	r0, #5
 800914a:	b007      	add	sp, #28
 800914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009150:	3501      	adds	r5, #1
 8009152:	2d08      	cmp	r5, #8
 8009154:	f10b 0b01 	add.w	fp, fp, #1
 8009158:	dd06      	ble.n	8009168 <__hexnan+0x100>
 800915a:	4544      	cmp	r4, r8
 800915c:	d9c1      	bls.n	80090e2 <__hexnan+0x7a>
 800915e:	2300      	movs	r3, #0
 8009160:	f844 3c04 	str.w	r3, [r4, #-4]
 8009164:	2501      	movs	r5, #1
 8009166:	3c04      	subs	r4, #4
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	f000 000f 	and.w	r0, r0, #15
 800916e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	e7b5      	b.n	80090e2 <__hexnan+0x7a>
 8009176:	2508      	movs	r5, #8
 8009178:	e7b3      	b.n	80090e2 <__hexnan+0x7a>
 800917a:	9b01      	ldr	r3, [sp, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0dd      	beq.n	800913c <__hexnan+0xd4>
 8009180:	f1c3 0320 	rsb	r3, r3, #32
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	40da      	lsrs	r2, r3
 800918a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800918e:	4013      	ands	r3, r2
 8009190:	f846 3c04 	str.w	r3, [r6, #-4]
 8009194:	e7d2      	b.n	800913c <__hexnan+0xd4>
 8009196:	3f04      	subs	r7, #4
 8009198:	e7d0      	b.n	800913c <__hexnan+0xd4>
 800919a:	2004      	movs	r0, #4
 800919c:	e7d5      	b.n	800914a <__hexnan+0xe2>

0800919e <__ascii_mbtowc>:
 800919e:	b082      	sub	sp, #8
 80091a0:	b901      	cbnz	r1, 80091a4 <__ascii_mbtowc+0x6>
 80091a2:	a901      	add	r1, sp, #4
 80091a4:	b142      	cbz	r2, 80091b8 <__ascii_mbtowc+0x1a>
 80091a6:	b14b      	cbz	r3, 80091bc <__ascii_mbtowc+0x1e>
 80091a8:	7813      	ldrb	r3, [r2, #0]
 80091aa:	600b      	str	r3, [r1, #0]
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	1e10      	subs	r0, r2, #0
 80091b0:	bf18      	it	ne
 80091b2:	2001      	movne	r0, #1
 80091b4:	b002      	add	sp, #8
 80091b6:	4770      	bx	lr
 80091b8:	4610      	mov	r0, r2
 80091ba:	e7fb      	b.n	80091b4 <__ascii_mbtowc+0x16>
 80091bc:	f06f 0001 	mvn.w	r0, #1
 80091c0:	e7f8      	b.n	80091b4 <__ascii_mbtowc+0x16>

080091c2 <_realloc_r>:
 80091c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	4607      	mov	r7, r0
 80091c8:	4614      	mov	r4, r2
 80091ca:	460d      	mov	r5, r1
 80091cc:	b921      	cbnz	r1, 80091d8 <_realloc_r+0x16>
 80091ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091d2:	4611      	mov	r1, r2
 80091d4:	f7fd bc90 	b.w	8006af8 <_malloc_r>
 80091d8:	b92a      	cbnz	r2, 80091e6 <_realloc_r+0x24>
 80091da:	f7fd fc19 	bl	8006a10 <_free_r>
 80091de:	4625      	mov	r5, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e6:	f000 f8c4 	bl	8009372 <_malloc_usable_size_r>
 80091ea:	4284      	cmp	r4, r0
 80091ec:	4606      	mov	r6, r0
 80091ee:	d802      	bhi.n	80091f6 <_realloc_r+0x34>
 80091f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091f4:	d8f4      	bhi.n	80091e0 <_realloc_r+0x1e>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7fd fc7d 	bl	8006af8 <_malloc_r>
 80091fe:	4680      	mov	r8, r0
 8009200:	b908      	cbnz	r0, 8009206 <_realloc_r+0x44>
 8009202:	4645      	mov	r5, r8
 8009204:	e7ec      	b.n	80091e0 <_realloc_r+0x1e>
 8009206:	42b4      	cmp	r4, r6
 8009208:	4622      	mov	r2, r4
 800920a:	4629      	mov	r1, r5
 800920c:	bf28      	it	cs
 800920e:	4632      	movcs	r2, r6
 8009210:	f7ff fc42 	bl	8008a98 <memcpy>
 8009214:	4629      	mov	r1, r5
 8009216:	4638      	mov	r0, r7
 8009218:	f7fd fbfa 	bl	8006a10 <_free_r>
 800921c:	e7f1      	b.n	8009202 <_realloc_r+0x40>

0800921e <__ascii_wctomb>:
 800921e:	4603      	mov	r3, r0
 8009220:	4608      	mov	r0, r1
 8009222:	b141      	cbz	r1, 8009236 <__ascii_wctomb+0x18>
 8009224:	2aff      	cmp	r2, #255	@ 0xff
 8009226:	d904      	bls.n	8009232 <__ascii_wctomb+0x14>
 8009228:	228a      	movs	r2, #138	@ 0x8a
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	4770      	bx	lr
 8009232:	700a      	strb	r2, [r1, #0]
 8009234:	2001      	movs	r0, #1
 8009236:	4770      	bx	lr

08009238 <fiprintf>:
 8009238:	b40e      	push	{r1, r2, r3}
 800923a:	b503      	push	{r0, r1, lr}
 800923c:	4601      	mov	r1, r0
 800923e:	ab03      	add	r3, sp, #12
 8009240:	4805      	ldr	r0, [pc, #20]	@ (8009258 <fiprintf+0x20>)
 8009242:	f853 2b04 	ldr.w	r2, [r3], #4
 8009246:	6800      	ldr	r0, [r0, #0]
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	f7ff f991 	bl	8008570 <_vfiprintf_r>
 800924e:	b002      	add	sp, #8
 8009250:	f85d eb04 	ldr.w	lr, [sp], #4
 8009254:	b003      	add	sp, #12
 8009256:	4770      	bx	lr
 8009258:	20000018 	.word	0x20000018

0800925c <__swhatbuf_r>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	460c      	mov	r4, r1
 8009260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009264:	2900      	cmp	r1, #0
 8009266:	b096      	sub	sp, #88	@ 0x58
 8009268:	4615      	mov	r5, r2
 800926a:	461e      	mov	r6, r3
 800926c:	da0d      	bge.n	800928a <__swhatbuf_r+0x2e>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009274:	f04f 0100 	mov.w	r1, #0
 8009278:	bf14      	ite	ne
 800927a:	2340      	movne	r3, #64	@ 0x40
 800927c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009280:	2000      	movs	r0, #0
 8009282:	6031      	str	r1, [r6, #0]
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	b016      	add	sp, #88	@ 0x58
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	466a      	mov	r2, sp
 800928c:	f000 f848 	bl	8009320 <_fstat_r>
 8009290:	2800      	cmp	r0, #0
 8009292:	dbec      	blt.n	800926e <__swhatbuf_r+0x12>
 8009294:	9901      	ldr	r1, [sp, #4]
 8009296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800929a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800929e:	4259      	negs	r1, r3
 80092a0:	4159      	adcs	r1, r3
 80092a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092a6:	e7eb      	b.n	8009280 <__swhatbuf_r+0x24>

080092a8 <__smakebuf_r>:
 80092a8:	898b      	ldrh	r3, [r1, #12]
 80092aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ac:	079d      	lsls	r5, r3, #30
 80092ae:	4606      	mov	r6, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	d507      	bpl.n	80092c4 <__smakebuf_r+0x1c>
 80092b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	2301      	movs	r3, #1
 80092be:	6163      	str	r3, [r4, #20]
 80092c0:	b003      	add	sp, #12
 80092c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c4:	ab01      	add	r3, sp, #4
 80092c6:	466a      	mov	r2, sp
 80092c8:	f7ff ffc8 	bl	800925c <__swhatbuf_r>
 80092cc:	9f00      	ldr	r7, [sp, #0]
 80092ce:	4605      	mov	r5, r0
 80092d0:	4639      	mov	r1, r7
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7fd fc10 	bl	8006af8 <_malloc_r>
 80092d8:	b948      	cbnz	r0, 80092ee <__smakebuf_r+0x46>
 80092da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092de:	059a      	lsls	r2, r3, #22
 80092e0:	d4ee      	bmi.n	80092c0 <__smakebuf_r+0x18>
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	f043 0302 	orr.w	r3, r3, #2
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	e7e2      	b.n	80092b4 <__smakebuf_r+0xc>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	6020      	str	r0, [r4, #0]
 80092f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f6:	81a3      	strh	r3, [r4, #12]
 80092f8:	9b01      	ldr	r3, [sp, #4]
 80092fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092fe:	b15b      	cbz	r3, 8009318 <__smakebuf_r+0x70>
 8009300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009304:	4630      	mov	r0, r6
 8009306:	f000 f81d 	bl	8009344 <_isatty_r>
 800930a:	b128      	cbz	r0, 8009318 <__smakebuf_r+0x70>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	431d      	orrs	r5, r3
 800931c:	81a5      	strh	r5, [r4, #12]
 800931e:	e7cf      	b.n	80092c0 <__smakebuf_r+0x18>

08009320 <_fstat_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	@ (8009340 <_fstat_r+0x20>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	f7f8 ff1b 	bl	8002168 <_fstat>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d102      	bne.n	800933c <_fstat_r+0x1c>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b103      	cbz	r3, 800933c <_fstat_r+0x1c>
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	20000434 	.word	0x20000434

08009344 <_isatty_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	@ (8009360 <_isatty_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 ff1a 	bl	8002188 <_isatty>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_isatty_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_isatty_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000434 	.word	0x20000434

08009364 <abort>:
 8009364:	b508      	push	{r3, lr}
 8009366:	2006      	movs	r0, #6
 8009368:	f000 f834 	bl	80093d4 <raise>
 800936c:	2001      	movs	r0, #1
 800936e:	f7f8 feab 	bl	80020c8 <_exit>

08009372 <_malloc_usable_size_r>:
 8009372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009376:	1f18      	subs	r0, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfbc      	itt	lt
 800937c:	580b      	ldrlt	r3, [r1, r0]
 800937e:	18c0      	addlt	r0, r0, r3
 8009380:	4770      	bx	lr

08009382 <_raise_r>:
 8009382:	291f      	cmp	r1, #31
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4605      	mov	r5, r0
 8009388:	460c      	mov	r4, r1
 800938a:	d904      	bls.n	8009396 <_raise_r+0x14>
 800938c:	2316      	movs	r3, #22
 800938e:	6003      	str	r3, [r0, #0]
 8009390:	f04f 30ff 	mov.w	r0, #4294967295
 8009394:	bd38      	pop	{r3, r4, r5, pc}
 8009396:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009398:	b112      	cbz	r2, 80093a0 <_raise_r+0x1e>
 800939a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800939e:	b94b      	cbnz	r3, 80093b4 <_raise_r+0x32>
 80093a0:	4628      	mov	r0, r5
 80093a2:	f000 f831 	bl	8009408 <_getpid_r>
 80093a6:	4622      	mov	r2, r4
 80093a8:	4601      	mov	r1, r0
 80093aa:	4628      	mov	r0, r5
 80093ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b0:	f000 b818 	b.w	80093e4 <_kill_r>
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d00a      	beq.n	80093ce <_raise_r+0x4c>
 80093b8:	1c59      	adds	r1, r3, #1
 80093ba:	d103      	bne.n	80093c4 <_raise_r+0x42>
 80093bc:	2316      	movs	r3, #22
 80093be:	6003      	str	r3, [r0, #0]
 80093c0:	2001      	movs	r0, #1
 80093c2:	e7e7      	b.n	8009394 <_raise_r+0x12>
 80093c4:	2100      	movs	r1, #0
 80093c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093ca:	4620      	mov	r0, r4
 80093cc:	4798      	blx	r3
 80093ce:	2000      	movs	r0, #0
 80093d0:	e7e0      	b.n	8009394 <_raise_r+0x12>
	...

080093d4 <raise>:
 80093d4:	4b02      	ldr	r3, [pc, #8]	@ (80093e0 <raise+0xc>)
 80093d6:	4601      	mov	r1, r0
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	f7ff bfd2 	b.w	8009382 <_raise_r>
 80093de:	bf00      	nop
 80093e0:	20000018 	.word	0x20000018

080093e4 <_kill_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d07      	ldr	r5, [pc, #28]	@ (8009404 <_kill_r+0x20>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	4611      	mov	r1, r2
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	f7f8 fe59 	bl	80020a8 <_kill>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	d102      	bne.n	8009400 <_kill_r+0x1c>
 80093fa:	682b      	ldr	r3, [r5, #0]
 80093fc:	b103      	cbz	r3, 8009400 <_kill_r+0x1c>
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20000434 	.word	0x20000434

08009408 <_getpid_r>:
 8009408:	f7f8 be46 	b.w	8002098 <_getpid>

0800940c <_init>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr

08009418 <_fini>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr
